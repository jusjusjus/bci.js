/**
 * bci.js v1.6.0
 * https://github.com/pwstegman/bci.js
 *
 * License: MIT
 * Generated 2019-04-12T01:37:53Z
 */

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.bci = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

// This file was auto generated, changes will be overwritten
// Created on Thu Apr 11 2019 20:37:53 GMT-0500 (Central Daylight Time)
// This module excludes Node.js specific methods so it can be used in the browser

/** @module bcijs */
module.exports.csp = require('./lib/compat/csp.js');
module.exports.f1score = require('./lib/compat/f1score.js');
module.exports.lda = require('./lib/compat/lda.js');
module.exports.signal = require('./lib/compat/signal.js');
module.exports.partition = require('./lib/data/partition.js');
module.exports.round = require('./lib/data/round.js');
module.exports.subscript = require('./lib/data/subscript.js');
module.exports.toFixed = require('./lib/data/toFixed.js');
module.exports.toTable = require('./lib/data/toTable.js');
module.exports.windowApply = require('./lib/data/windowApply.js');
module.exports.averageBandPowers = require('./lib/math/averageBandPowers.js');
module.exports.cspLearn = require('./lib/math/cspLearn.js');
module.exports.cspProject = require('./lib/math/cspProject.js');
module.exports.fastICA = require('./lib/math/fastICA.js');
module.exports.features = require('./lib/math/features.js');
module.exports.generateSignal = require('./lib/math/generateSignal.js');
module.exports.ldaClassify = require('./lib/math/ldaClassify.js');
module.exports.ldaLearn = require('./lib/math/ldaLearn.js');
module.exports.ldaProject = require('./lib/math/ldaProject.js');
module.exports.nextpow2 = require('./lib/math/nextpow2.js');
module.exports.psd = require('./lib/math/psd.js');
module.exports.psdBandPower = require('./lib/math/psdBandPower.js');
module.exports.signalBandPower = require('./lib/math/signalBandPower.js');
module.exports.transpose = require('./lib/math/transpose.js');
module.exports.accuracy = require('./lib/metrics/accuracy.js');
module.exports.balancedAccuracy = require('./lib/metrics/balancedAccuracy.js');
module.exports.confusionMatrix = require('./lib/metrics/confusionMatrix.js');
module.exports.f1 = require('./lib/metrics/f1.js');
module.exports.mcc = require('./lib/metrics/mcc.js');
module.exports.precision = require('./lib/metrics/precision.js');
module.exports.recall = require('./lib/metrics/recall.js');
module.exports.specificity = require('./lib/metrics/specificity.js');
module.exports.wait = require('./lib/network/wait.js'); // Additional backwards compatibility

exports.LDA = exports.lda;
exports.csp = exports.signal.CSP;

},{"./lib/compat/csp.js":2,"./lib/compat/f1score.js":3,"./lib/compat/lda.js":4,"./lib/compat/signal.js":5,"./lib/data/partition.js":6,"./lib/data/round.js":7,"./lib/data/subscript.js":8,"./lib/data/toFixed.js":9,"./lib/data/toTable.js":10,"./lib/data/windowApply.js":11,"./lib/math/averageBandPowers.js":12,"./lib/math/cspLearn.js":13,"./lib/math/cspProject.js":14,"./lib/math/fastICA.js":15,"./lib/math/features.js":16,"./lib/math/generateSignal.js":17,"./lib/math/ldaClassify.js":18,"./lib/math/ldaLearn.js":19,"./lib/math/ldaProject.js":20,"./lib/math/nextpow2.js":21,"./lib/math/psd.js":22,"./lib/math/psdBandPower.js":23,"./lib/math/signalBandPower.js":24,"./lib/math/transpose.js":25,"./lib/metrics/accuracy.js":26,"./lib/metrics/balancedAccuracy.js":27,"./lib/metrics/confusionMatrix.js":28,"./lib/metrics/f1.js":29,"./lib/metrics/mcc.js":30,"./lib/metrics/precision.js":31,"./lib/metrics/recall.js":32,"./lib/metrics/specificity.js":33,"./lib/network/wait.js":34}],2:[function(require,module,exports){
"use strict";

var pwcsp = require('pw-csp');
/**
 * Creates a new CSP object
 * @name CSP
 * @memberof module:bcijs.signal
 * @constructor
 * @param {number[][]} class1 - Data samples for class 1. Rows should be samples, columns should be signals.
 * @param {number[][]} class2 - Data samples for class 2. Rows should be samples, columns should be signals.
 */

/**
 * Projects data and reduces to given number of dimensions
 * @name project
 * @memberof module:bcijs.signal.CSP
 * @function
 * @param {number[][]} data - Data points to be projected. Rows should be samples, columns should be signals.
 * @param {number} [dimensions] - Number of dimensions to be returned. Can range from 1 to number of signals. Defaults to number of signals.
 * @returns {number[][]} Projected data. Rows are samples, columns are dimensions sorted by descending importance.
 */


module.exports = pwcsp;

},{"pw-csp":234}],3:[function(require,module,exports){
"use strict";

/**
 * Calculate the f1 score of a binary classifier given its confusion matrix
 * 
 * This method uses the following definition of a confusion matrix:
 * C = [
 *   [true positive, false negative],
 *   [false positive, true negative]
 * ]
 * which does not match the definition provided by the method bcijs.confusionMatrix.
 * As such, it has been deprecated and replaced with the method bcijs.f1 in order to prevent a version breaking change.
 * @memberof module:bcijs
 * @deprecated since version 1.5.0 (Please use bcijs.f1 instead)
 * @param {number[][]} confusionMatrix - a 2x2 confusion matrix
 * @returns {number} The f1 score
 */
function f1score(confusionMatrix) {
  if (confusionMatrix.length != 2 || confusionMatrix[0].length != 2 || confusionMatrix[1].length != 2) {
    throw new Error('Confusion matrix must be of size 2x2');
  }

  var precision = confusionMatrix[0][0] / (confusionMatrix[0][0] + confusionMatrix[1][0]);
  var recall = confusionMatrix[0][0] / (confusionMatrix[0][0] + confusionMatrix[0][1]);
  var f1 = 2 * recall * precision / (recall + precision);
  return f1;
}

module.exports = f1score;

},{}],4:[function(require,module,exports){
"use strict";

var pwlda = require('pw-lda');
/**
 * An LDA object
 * @deprecated since version 1.1
 * @name LDA
 * @memberof module:bcijs
 * @constructor
 * @param {number[][]} class1 - Data set for class 1, rows are samples, columns are variables
 * @param {number[][]} class2 - Data set for class 2, rows are samples, columns are variables
 */

/**
 * Predict the class of an unknown data point
 * @name project
 * @memberof module:bcijs.LDA
 * @function
 * @param {number[]} point - The data point to be classified.
 * @returns {number} value less than 0 if predicted to be in class 1, 0 if exactly inbetween, greater than 0 if class 2
 */


module.exports = pwlda;

},{"pw-lda":235}],5:[function(require,module,exports){
"use strict";

/**
 * Signal processing operations
 * @deprecated since version 1.1
 * @namespace signal
 * @memberof module:bcijs
 */
var math = require('mathjs/core').create();

math.import(require('mathjs/lib/type/matrix'));
math.import(require('mathjs/lib/type/bignumber'));
math.import(require('mathjs/lib/function/arithmetic'));
math.import(require('mathjs/lib/function/trigonometry'));
math.import(require('mathjs/lib/function/matrix'));

var fft = require('fft.js');

var fftCache = {};
/**
 * Compute the power spectral density of a given signal.
 * @memberof module:bcijs.signal
 * @param {number} size - Size of the fourier transform to be used. Should be a power of 2.
 * @param {number[]} signal - The signal.
 * @returns {number[]} The PSD.
 */

function getPSD(size, signal) {
  if (fftCache.hasOwnProperty(size)) {
    var f = fftCache[size];
  } else {
    var f = new fft(size);
    fftCache[size] = f;
  }

  var freqs = f.createComplexArray();
  f.realTransform(freqs, signal);
  var powers = getPowers(size, freqs);
  return powers;
}
/*
 * Local helper function
 * Return an array containing the magnitude of the first half of complex numbers
 * in the complex Array
 */


function getPowers(size, complexArray) {
  var magnitudes = [];

  for (var i = 0; i < size; i += 2) {
    magnitudes.push(Math.sqrt(complexArray[i] * complexArray[i] + complexArray[i + 1] * complexArray[i + 1]));
  }

  return magnitudes;
}
/*
 * String representation of common frequency bands
 */


var bands = {
  // From Dan Szafir's "Pay Attention!", 2012
  'delta': [1, 3],
  'theta': [4, 7],
  'alpha': [8, 12],
  'beta': [13, 30],
  'gamma': [31, 50]
};
/**
 * Compute the average power across a given frequency band given the PSD.
 * @memberof module:bcijs.signal
 * @param {number} size - Size of the fourier transform used to compute the PSD.
 * @param {number[]} psd - Power spectral density of the signal.
 * @param {number} sampleRate - The sample rate of the signal.
 * @param {(number[]|string)} - The frequency band provided as an array [frequencyStart, frequencyStop] or a
 * string <code>delta</code> (1-3 Hz), <code>theta</code> (4-7 Hz), <code>alpha</code> (8-12 Hz), <code>beta</code> (13-30 Hz), or <code>gamma</code> (31-50 Hz).
 * While string representations
 * allow for easier prototyping, the use of a specific band passed as an array is recommended, as band string representations may change in
 * future updates.
 * @returns {number} The average power in the frequency band.
 */

function getBandPower(size, psd, sampleRate, band) {
  // Allow selecting of a band by name
  if (typeof band === 'string' || band instanceof String) {
    band = bands[band];
  }

  var startIndex = Math.ceil(band[0] / sampleRate * size);
  var endIndex = Math.floor(band[1] / sampleRate * size);
  var power = 0;

  for (var i = startIndex; i < endIndex + 1; i++) {
    power += psd[i];
  }

  return power / (endIndex - startIndex + 1);
}
/*
 * Local helper function for debugging
 * Prints a complex array to the console, where the array elements are alternating real and imaginary components.
 * @param {number[]} complexArray - The array to be displayed. Should be of form [real1, imag1, real2, imag2, ..., realn, imagn].
 * @param {number} [precision] - The number of decimal places to be shown. Defaults to 5. 
 */


function displayComplex(complexArray, precision) {
  if (precision === undefined) {
    precision = 5;
  }

  var p = Math.pow(10, precision);

  for (var i = 0; i < complexArray.length; i += 2) {
    console.log(Math.round(complexArray[i] * p) / p + '+' + Math.round(complexArray[i + 1] * p) / p + 'i');
  }
}
/**
 * Create a new EEGWindow object.
 * @memberof module:bcijs.signal
 * @constructor
 * @param {number} size - The number of samples to be stored before callback is called.
 * @param {number} numChannels - The number of channels in each sample.
 * @param {requestCallback} callback - Called when the EEGWindow has a number of samples equal to size.
 * An array of dimensions channels x samples is passed to the callback function.
 */


function EEGWindow(size, numChannels, callback) {
  this.size = size;
  this.length = 0;
  this.callback = callback;
  this.channels = [];

  for (var i = 0; i < numChannels; i++) {
    this.channels.push([]);
  }
}
/**
 * Adds a data sample to the EEGWindow.
 * @param {number[]} - The data sample to be added. Should be of length 'channels'
 */


EEGWindow.prototype.addData = function (data) {
  for (var i = 0; i < data.length; i++) {
    this.channels[i].push(data[i]);
  }

  this.length += 1;

  if (this.length >= this.size) {
    this.callback(this.channels);
    this.clear();
  }
};
/**
 * Reset the EEGWindow and clear all data from it.
 */


EEGWindow.prototype.clear = function () {
  this.length = 0;

  for (var i = 0; i < this.channels.length; i++) {
    this.channels[i] = [];
  }
};

exports.EEGWindow = EEGWindow;
/**
 * Generate a signal.
 * @alias generate
 * @memberof module:bcijs.signal
 * @param {number[]} amplitudes - The amplitudes of each frequency in the signal.
 * @param {number[]} frequencies - The frequencies to be included in the signal.
 * @param {number} sampleRate - The sample rate of the signal in Hz.
 * @param {number} duration - The duration of the signal in seconds.
 * @returns {number[]} The generated signal. Equals the summation of <code>amplitudes[i] * sin(2 * pi * frequencies[i] * t)</code>.
 */

exports.generate = function (amplitudes, frequencies, sampleRate, duration) {
  var x = math.range(0, duration, 1 / sampleRate);
  var signal = math.zeros(x.size()[0]);

  for (var i = 0; i < amplitudes.length; i++) {
    signal = math.add(signal, math.multiply(amplitudes[i], math.sin(math.multiply(2 * Math.PI * frequencies[i], x))));
  }

  return signal.toArray();
};

exports.getPSD = getPSD;
exports.getBandPower = getBandPower;
exports.CSP = require('./csp.js');

},{"./csp.js":2,"fft.js":44,"mathjs/core":47,"mathjs/lib/function/arithmetic":71,"mathjs/lib/function/matrix":98,"mathjs/lib/function/trigonometry":162,"mathjs/lib/type/bignumber":181,"mathjs/lib/type/matrix":197}],6:[function(require,module,exports){
"use strict";

/**
 * Partitions an array into multiple arrays
 * Can be used to split data into training and testing sets
 * @memberof module:bcijs
 * @param {Array} array - The array to be partitioned
 * @param {...number[]} divisions - The size of each partition, each value should range from 0 to 1
 * @example
 * partition([1, 2, 3, 4], 0.25, 0.75); // returns [[1], [2, 3, 4]]
 * @returns {Array.<Array>} Array of subarrays which are the partitons
 */
function partition(array) {
  var parts = [];
  var lastDivision = 0;
  var runningSum = 0;

  for (var _len = arguments.length, divisions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    divisions[_key - 1] = arguments[_key];
  }

  divisions.forEach(function (division) {
    runningSum += division;
    var end = Math.round(runningSum * array.length);
    parts.push(array.slice(lastDivision, end));
    lastDivision = end;
  });
  return parts;
}

module.exports = partition;

},{}],7:[function(require,module,exports){
"use strict";

/**
 * Rounds every value in an array to a set number of decimal places
 * @memberof module:bcijs
 * @param {number[]} array
 * @param {number} places
 * @returns {number[]} The rounded array
 */
function round(array, places) {
  return helper(array);

  function helper(array) {
    return array.map(function (item) {
      if (typeof item === 'number') {
        return parseFloat(item.toFixed(places));
      }

      return helper(item);
    });
  }
}

module.exports = round;

},{}],8:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

/**
 * Subscript an array with MATLAB-like syntax
 * @memberof module:bcijs
 * @param {Array} array - The array to be subscripted
 * @param {...string} params - Colon notation for which elements to include in each dimension
 * @returns {Array} The subscripted array
 * @example
 * var bci = require('bcijs');
 * var arr = [3, 2, 4, 1, 5];
 * var subarr = bci.subscript(arr, '1:3');
 * console.log(subarr); // [3, 2, 4]
 * @example
 * var bci = require('bcijs');
 * var arr = [
 *   [1, 2, 3],
 *   [4, 5, 6],
 *   [7, 8, 9]
 * ];
 * var subarr = bci.subscript(arr, '1 3', '2:3'); // rows 1 and 3, columns 2 through 3
 * console.log(subarr); // [[2, 3], [8, 9]]
 */
function subscript(array) {
  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }

  return recur.apply(void 0, [array].concat(params));

  function recur(array) {
    for (var _len2 = arguments.length, dims = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      dims[_key2 - 1] = arguments[_key2];
    }

    var arr = slice(array, dims.shift(), "matlab");

    if (dims.length != 0) {
      for (var i = 0; i < arr.length; i++) {
        arr[i] = recur.apply(void 0, [arr[i]].concat(dims));
      }
    }

    return arr;
  }

  function slice(array, dims) {
    var _ref;

    var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "python";
    dims = dims.split(" ");
    var subs = [];
    dims.forEach(function (dim) {
      var cp = dim.indexOf(':');
      var indexes = dim.split(':');

      if (indexes.length > 2 || dim == '') {
        console.error("Invalid subscript string");
        return;
      }

      if (indexes[1] == '') {
        indexes[1] = array.length;
      }

      indexes = indexes.map(Number);

      if (format == "matlab" || format == "mat") {
        // TODO: Implement 'end' keyword
        // This format is still in beta
        if (indexes[0] > 0) {
          indexes[0] -= 1;
        }

        if (indexes[1] == -1) {
          indexes[1] = array.length;
        }

        if (indexes[1] < 0) {
          indexes[1] += 1;
        }
      }

      if (indexes.length == 1) {
        indexes.push(indexes[0] + 1);
      }

      subs.push(array.slice.apply(array, _toConsumableArray(indexes)));
    });
    return (_ref = []).concat.apply(_ref, subs);
  }
}

module.exports = subscript;

},{}],9:[function(require,module,exports){
"use strict";

/**
 * Returns an array of numbers as strings rounded to the proper number of decimal places and padded with zeros as needed.
 * @memberof module:bcijs
 * @param {Array} array
 * @param {number} places
 * @returns {string[]} Array of string representations of numbers
 */
function toFixed(array, places) {
  return helper(array);

  function helper(array) {
    return array.map(function (item) {
      if (typeof item === 'number') {
        return item.toFixed(places);
      }

      return helper(item);
    });
  }
}

module.exports = toFixed;

},{}],10:[function(require,module,exports){
"use strict";

var Table = require('easy-table');

var toFixed = require('./toFixed.js');
/**
 * Returns an ASCII table representation of an array
 * @memberof module:bcijs
 * @param {Array} array
 * @returns {string} ASCII table
 */


function toTable(array) {
  return Table.print(array);
}

module.exports = toTable;

},{"./toFixed.js":9,"easy-table":42}],11:[function(require,module,exports){
"use strict";

/**
 * Similar to JavaScript's map, but it applies a function to sub arrays instead of each element.
 * Each sub array, or window, starts at index 0 and has length 'length'
 * Each next window will be shifted 'step' elements from the first. The result of each function is stored in a returned array.
 * @memberof module:bcijs
 * @param {Array} array - The array of elements which will be windowed
 * @param {Function} func - The function to call on each window, the returned result is stored in a returned array
 * @param {number} length - The number of elements to include in each window
 * @param {number} step - The start of the window is incremented by this amount every iteration
 * @param {boolean} tail - If false, windows which begin near the end of the array which cannot reach length 'length' will be ignored
 * @returns {Array} An array containing the function result for each window
 * @example
 * var bci = require('bcijs');
 * bci.windowApply([1, 2, 3, 4, 5], window => console.log(window), 3, 1);
 * // [1, 2, 3]
 * // [2, 3, 4]
 * // [3, 4, 5] 
 * @example
 * var bci = require('bcijs');
 * var sums = bci.windowApply([1, 2, 3, 4, 5], window => {
 *   var sum = 0;
 *   window.forEach(x => sum += x);
 *   return sum;
 * }, 3, 1);
 * console.log(sums);
 * // [6, 9, 12]
 */
function windowApply(array, func, length) {
  var step = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
  var tail = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  if (step == -1) step = length;
  var result = [];

  for (var i = 0; i < array.length; i += step) {
    var window = array.slice(i, i + length);

    if (tail || window.length == length) {
      result.push(func(window));
    }
  }

  return result;
}

module.exports = windowApply;

},{}],12:[function(require,module,exports){
"use strict";

var transpose = require('./transpose.js');

var signalBandPower = require('./signalBandPower.js');
/**
 * Computes the power in each frequency band averaged across all channels
 * @memberof module:bcijs
 * @param {number[][]} samples - The signals where rows are samples and columns are electrodes
 * @param {number} sampleRate - Sample rate of the data
 * @param {Array} bands - An array of frequency bands. See signalBandPower for more info on frequency bands.
 * @param {number} [fftSize] - The size of the fft to use. See signalBandPower for more info on fft sizes.
 * @returns {number[]} Array containing the average power across all channels in each band
 * @example
 * let feature = bci.averageBandPowers(samples, 256, ['alpha', 'beta']);
 * // returns [alpha_power_averaged_across_channels, beta_power_averaged_across_channels]
 */


function averageBandPowers(samples, sampleRate, bands) {
  var fftSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var powers = new Array(bands.length);

  for (var i = 0; i < bands.length; i++) {
    powers[i] = 0;
  }

  var channels = transpose(samples);

  for (var _i = 0; _i < channels.length; _i++) {
    for (var j = 0; j < bands.length; j++) {
      var bandPower = signalBandPower(channels[_i], sampleRate, bands[j], fftSize);
      powers[j] += bandPower;
    }
  }

  for (var _i2 = 0; _i2 < bands.length; _i2++) {
    powers[_i2] = powers[_i2] / channels.length;
  }

  return powers;
}

module.exports = averageBandPowers;

},{"./signalBandPower.js":24,"./transpose.js":25}],13:[function(require,module,exports){
"use strict";

var math = require('mathjs/core').create();

math.import(require('mathjs/lib/type/matrix'));
math.import(require('mathjs/lib/function/arithmetic'));
math.import(require('mathjs/lib/function/matrix'));

var numeric = require('numeric');

var stat = require('pw-stat');
/**
 * Learn common spatial pattern for two datasets
 * @memberof module:bcijs
 * @param {number[][]} class1 - Data samples for class 1. Rows should be samples, columns should be signals.
 * @param {number[][]} class2 - Data samples for class 2. Rows should be samples, columns should be signals.
 * @returns {Object} Learned CSP parameters
 * @example
 * let cspParams = bci.cspLearn(class_a, class_b);
 */


function cspLearn(class1, class2) {
  var cov1 = stat.cov(class1);
  var cov2 = stat.cov(class2);
  var V = numeric.eig(math.multiply(math.inv(math.add(cov1, cov2)), cov1)).E.x;
  return {
    V: V
  };
}

module.exports = cspLearn;

},{"mathjs/core":47,"mathjs/lib/function/arithmetic":71,"mathjs/lib/function/matrix":98,"mathjs/lib/type/matrix":197,"numeric":233,"pw-stat":236}],14:[function(require,module,exports){
"use strict";

var math = require('mathjs/core').create();

math.import(require('mathjs/lib/type/matrix'));
math.import(require('mathjs/lib/function/arithmetic'));
/**
 * Projects data and reduces to given number of dimensions
 * @memberof module:bcijs
 * @param {object} cspParams - CSP parameters computed using the cspLearn function
 * @param {number[][]} data - Data points to be projected. Rows should be samples, columns should be signals.
 * @param {number} [dimensions] - Number of dimensions to be returned. Can range from 1 to number of signals. Defaults to number of signals.
 * @returns {number[][]} Projected data. Rows are samples, columns are dimensions sorted by descending importance.
 * @example
 * // Learn the CSP params
 * let cspParams = bci.cspLearn(class_a, class_b);
 * 
 * // Project the signals
 * let class_a_csp = bci.cspProject(cspParams, class_a);
 * let class_b_csp = bci.cspProject(cspParams, class_b);
 */

function cspProject(cspParams, data, dimensions) {
  var projected = math.multiply(data, cspParams.V); // Default number of dimensions is all of them, which is number of columns in data

  dimensions = typeof dimensions !== "undefined" ? dimensions : projected[0].length;
  var reduced = [];

  for (var r = 0; r < projected.length; r++) {
    reduced.push([]);

    for (var i = 0; i < dimensions; i++) {
      // Start at left and right ends of matrix columns are work towards center
      if (i % 2 == 0) {
        var column = i / 2;
      } else {
        var column = projected[0].length - (i + 1) / 2;
      }

      reduced[r].push(projected[r][column]);
    }
  }

  return reduced;
}

module.exports = cspProject;

},{"mathjs/core":47,"mathjs/lib/function/arithmetic":71,"mathjs/lib/type/matrix":197}],15:[function(require,module,exports){
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var math = require('mathjs/core').create();

math.import(require('mathjs/lib/type/matrix'));
math.import(require('mathjs/lib/type/complex'));
math.import(require('mathjs/lib/function/arithmetic'));
math.import(require('mathjs/lib/function/matrix'));
math.import(require('mathjs/lib/function/statistics'));
math.import(require('mathjs/lib/function/probability'));
math.import(require('mathjs/lib/function/utils'));
math.import(require('mathjs/lib/function/trigonometry'));

var numeric = require('numeric');

var stat = require('pw-stat');
/**
 * FastICA algorithm for independent component analysis
 * @memberof module:bcijs
 * @param {number[][]} signals - The mixed signals. Each row should be a signal and each column a sample.
 * @param {Object} options
 * @param {number} [options.maxIterations=1000] - Maximum number of iterations
 * @param {boolean} [options.debug=false] - If true, prints out debug information while running
 * @param {string} [options.fun=logcosh] - The functional form of the G function used in the approximation of negentropy. Can be either 'exp' or 'logcosh.
 * @returns {Object} An object with the following values: {source: the estimated source matrix, weights: the estimated unmixing matrix, whitening: the computed whitening matrix, iterations: number of iterations taken to converge on each weight}
 */


function fastICA(signals, options) {
  var _Object$assign = Object.assign({
    maxIterations: 1000,
    debug: false,
    fun: 'logcosh'
  }, options),
      maxIterations = _Object$assign.maxIterations,
      debug = _Object$assign.debug,
      fun = _Object$assign.fun;

  var negentropyFunctions = {
    'logcosh': {
      g: function g(u) {
        return math.tanh(u);
      },
      gp: function gp(u) {
        return math.subtract(1, math.dotPow(math.tanh(u), 2));
      }
    },
    'exp': {
      g: function g(u) {
        return math.dotMultiply(u, math.exp(math.dotDivide(math.dotPow(u, 2), -2)));
      },
      gp: function gp(u) {
        return math.dotMultiply(math.subtract(1, math.dotPow(u, 2)), math.exp(math.dotDivide(math.dotPow(u, 2), -2)));
      }
    }
  };

  if (!negentropyFunctions.hasOwnProperty(fun)) {
    throw new Error("Negentropy approximation function must be either 'exp' or 'logcosh'");
  }

  var eigs = numeric.eig(stat.cov(math.transpose(signals)));
  var V = eigs.E.x;
  var D = eigs.lambda.x;
  /* As covariance matrices are positive semi-definite and symmetric, all eigenvalues are nonnegative.
     Sometimes very small negatives are returned due to issues with numerical precision. This will cause problems
     later as we raise each value to the -1/2 power and complex numbers will break the code. To solve, setting
     D to equal abs(D). Should eventually find a better way to handle eigenvalues that are 0. */

  D = math.abs(D);
  var mean = math.mean(signals, 1);
  var centered = [];

  for (var i = 0; i < signals.length; i++) {
    centered.push([]);

    for (var j = 0; j < signals[i].length; j++) {
      centered[i].push(signals[i][j] - mean[i]);
    }
  }

  var whitening = math.multiply(math.diag(D.map(function (i) {
    return math.pow(i, -1 / 2);
  })), math.transpose(V));
  var whitened = math.multiply(whitening, centered);
  var g = negentropyFunctions[fun].g;
  var gp = negentropyFunctions[fun].gp;

  var _math$size = math.size(whitened),
      _math$size2 = _slicedToArray(_math$size, 2),
      N = _math$size2[0],
      M = _math$size2[1]; // In this case, getting a component for each dimension, but we could opt to use fewer


  var numComponenents = N; // Create a weight vector for each component

  var weights = [];

  for (var _i2 = 0; _i2 < numComponenents; _i2++) {
    weights.push(math.random([N]));
  }

  var totalIterations = [];

  for (var p = 0; p < numComponenents; p++) {
    var previousWeight = math.clone(weights[p]);

    if (debug) {
      console.log(new Date().toLocaleTimeString(), 'Computing component', p + 1, '/', numComponenents);
    }

    var converged = false;

    for (var _i3 = 0; _i3 < maxIterations; _i3++) {
      // Convergence test
      var a = previousWeight;
      var b = weights[p];
      var cosTheta = math.dot(a, b) / (math.norm(a) * math.norm(b));
      var delta = 1 - math.abs(cosTheta);
      previousWeight = b;

      if (debug && _i3 == 0) {
        console.log(new Date().toLocaleTimeString(), 'On iteration', _i3 + 1, '/', maxIterations);
      }

      if (debug && (_i3 + 1) % 10 == 0) {
        console.log(new Date().toLocaleTimeString(), 'On iteration', _i3 + 1, '/', maxIterations, 'with a change of', Math.acos(Math.abs(cosTheta)), 'rad');
      }

      if (_i3 != 0 && delta < 5e-11) {
        totalIterations.push(_i3);
        converged = true;

        if (debug) {
          console.log(new Date().toLocaleTimeString(), 'Converged on iteration', _i3);
        }

        break;
      }

      weights[p] = math.transpose(math.subtract(math.multiply(1 / M, whitened, math.transpose(g(math.multiply(weights[p], whitened)))), math.multiply(1 / M, math.sum(gp(math.multiply(weights[p], whitened))), math.transpose(weights[p]))));

      for (var _j = 0; _j < p; _j++) {
        weights[p] = math.subtract(weights[p], math.multiply(weights[p], math.transpose(weights[_j]), weights[_j]));
      }

      weights[p] = math.divide(weights[p], math.norm(weights[p]));
    }

    if (!converged) {
      totalIterations.push(maxIterations);

      if (debug) {
        console.log('Stopped at maxIterations before converged');
      }
    }
  }

  ;
  var source = math.multiply(weights, whitened);
  return {
    source: source,
    weights: weights,
    whitening: whitening,
    iterations: totalIterations
  };
}

module.exports = fastICA;

},{"mathjs/core":47,"mathjs/lib/function/arithmetic":71,"mathjs/lib/function/matrix":98,"mathjs/lib/function/probability":118,"mathjs/lib/function/statistics":131,"mathjs/lib/function/trigonometry":162,"mathjs/lib/function/utils":170,"mathjs/lib/type/complex":184,"mathjs/lib/type/matrix":197,"numeric":233,"pw-stat":236}],16:[function(require,module,exports){
"use strict";

/** 
 * Feature extraction methods
 * @namespace features
 * @memberof module:bcijs
 */
var math = require('mathjs/core').create();

math.import(require('mathjs/lib/type/matrix'));
math.import(require('mathjs/lib/function/matrix'));
math.import(require('mathjs/lib/function/arithmetic'));
math.import(require('mathjs/lib/function/statistics'));

var sbp = require('./signalBandPower.js');

var transpose = require('./transpose.js');
/**
 * Computes the log of the variance along the specified dimension
 * @memberof module:bcijs.features
 * @param {number[] | number[][]} window - The data
 * @param {string} [dimension] - If 'rows' or 'columns' passed, the features are calculated along that dimension
 */


function logvar(window) {
  var dimension = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (dimension == null) {
    return math.log(math.var(window));
  }

  var possibleDimensions = ['rows', 'cols', 'columns'];

  if (possibleDimensions.indexOf(dimension) == -1) {
    throw "Invalid dimension";
  }

  if (dimension == 'cols' || dimension == 'columns') {
    window = transpose(window);
  }

  return window.map(function (channel) {
    return math.log(math.var(channel));
  });
}

module.exports.logvar = logvar;
/**
 * Computes the variance along the specified dimension
 * @memberof module:bcijs.features
 * @param {number[] | number[][]} window - The data
 * @param {string} [dimension] - If 'rows' or 'columns' passed, the features are calculated along that dimension
 */

function variance(window) {
  var dimension = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (dimension == null) {
    return math.log(math.var(window));
  }

  var possibleDimensions = ['rows', 'cols', 'columns'];

  if (possibleDimensions.indexOf(dimension) == -1) {
    throw "Invalid dimension";
  }

  if (dimension == 'cols' || dimension == 'columns') {
    window = transpose(window);
  }

  return window.map(function (channel) {
    return math.var(channel);
  });
}

module.exports.variance = variance;
/**
 * Computes the root mean square along the specified dimension
 * @memberof module:bcijs.features
 * @param {number[] | number[][]} window - The data
 * @param {string} [dimension] - If 'rows' or 'columns' passed, the features are calculated along that dimension
 */

function rootMeanSquare(window) {
  var dimension = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (dimension == null) {
    return math.sqrt(math.mean(math.square(window)));
  }

  var possibleDimensions = ['rows', 'cols', 'columns'];

  if (possibleDimensions.indexOf(dimension) == -1) {
    throw "Invalid dimension";
  }

  if (dimension == 'cols' || dimension == 'columns') {
    window = transpose(window);
  }

  return window.map(function (channel) {
    return math.sqrt(math.mean(math.square(channel)));
  });
}

module.exports.rootMeanSquare = rootMeanSquare;

},{"./signalBandPower.js":24,"./transpose.js":25,"mathjs/core":47,"mathjs/lib/function/arithmetic":71,"mathjs/lib/function/matrix":98,"mathjs/lib/function/statistics":131,"mathjs/lib/type/matrix":197}],17:[function(require,module,exports){
"use strict";

var math = require('mathjs/core').create();

math.import(require('mathjs/lib/type/matrix'));
math.import(require('mathjs/lib/type/bignumber'));
math.import(require('mathjs/lib/function/arithmetic'));
math.import(require('mathjs/lib/function/matrix'));
math.import(require('mathjs/lib/function/trigonometry'));
/**
 * Generate a signal with the given frequencies and their amplitudes.
 * @memberof module:bcijs
 * @param {number[]} amplitudes - The amplitudes of each frequency.
 * @param {number[]} frequencies - The frequencies.
 * @param {number} sampleRate - Sample rate of the signal in Hz.
 * @param {number} duration - Duration of the signal in seconds.
 * @returns {number[]} The generated signal.
 * @example
 * let amplitudes = [4, 8];
 * let frequencies = [10, 20]; // 10 Hz (alpha), 20 Hz (beta)
 * let sampleRate = 512; // Hz
 * let duration = 1; // Seconds
 * 
 * let signal = bci.generateSignal(amplitudes, frequencies, sampleRate, duration);
 */

function generateSignal(amplitudes, frequencies, sampleRate, duration) {
  var x = math.range(0, duration, 1 / sampleRate);
  var signal = math.zeros(x.size()[0]);

  for (var i = 0; i < amplitudes.length; i++) {
    signal = math.add(signal, math.multiply(amplitudes[i], math.sin(math.multiply(2 * Math.PI * frequencies[i], x))));
  }

  return signal.toArray();
}

module.exports = generateSignal;

},{"mathjs/core":47,"mathjs/lib/function/arithmetic":71,"mathjs/lib/function/matrix":98,"mathjs/lib/function/trigonometry":162,"mathjs/lib/type/bignumber":181,"mathjs/lib/type/matrix":197}],18:[function(require,module,exports){
"use strict";

var ldaProject = require('./ldaProject');
/**
 * Classify an unknown data point.
 * @memberof module:bcijs
 * @param {object} ldaParams - The parameters for the LDA, computed with the function ldaLearn
 * @param {number[]|number[][]} point - The data point or array of points to be classified.
 * @returns {number} 0 if the first class, 1 if the second class
 * @example
 * let features = [[1,3], [5,2]]; // Example feature vectors
 * let classification = bci.ldaClassify(ldaParams, features[0]); // Outputs a number (0 or 1 depending on class)
 * let classifications = bci.ldaClassify(ldaParams, features); // Outputs an array of classifications
 */


function ldaClassify(ldaParams, point) {
  var result = ldaProject(ldaParams, point);

  if (Array.isArray(result)) {
    for (var i = 0; i < result.length; i++) {
      result[i] = result[i] < 0 ? 0 : 1;
    }
  } else {
    result = result < 0 ? 0 : 1;
  }

  return result;
}

module.exports = ldaClassify;

},{"./ldaProject":20}],19:[function(require,module,exports){
"use strict";

var math = require('mathjs/core').create();

math.import(require('mathjs/lib/type/matrix'));
math.import(require('mathjs/lib/function/arithmetic'));
math.import(require('mathjs/lib/function/matrix'));

var stat = require('pw-stat');
/**
 * Perform linear discriminant analysis between two datasets
 * @memberof module:bcijs
 * @param {number[][]} class1 - Data set for class 1, rows are samples, columns are variables
 * @param {number[][]} class2 - Data set for class 2, rows are samples, columns are variables
 * @returns {Object} Computed LDA parameters
 * @example
 * // Training set
 * let class1 = [[0, 0], [1, 2], [2, 2], [1.5, 0.5]];
 * let class2 = [[8, 8], [9, 10], [7, 8], [9, 9]];
 * 
 * // Learn an LDA classifier
 * let ldaParams = bci.ldaLearn(class1, class2);
 */


function ldaLearn(class1, class2) {
  var mu1 = math.transpose(stat.mean(class1));
  var mu2 = math.transpose(stat.mean(class2));
  var pooledCov = math.add(stat.cov(class1), stat.cov(class2));
  var theta = math.multiply(math.inv(pooledCov), math.subtract(mu2, mu1));
  var b = math.multiply(-1, math.transpose(theta), math.add(mu1, mu2), 1 / 2);
  return {
    theta: theta,
    b: b
  };
}

module.exports = ldaLearn;

},{"mathjs/core":47,"mathjs/lib/function/arithmetic":71,"mathjs/lib/function/matrix":98,"mathjs/lib/type/matrix":197,"pw-stat":236}],20:[function(require,module,exports){
"use strict";

var math = require('mathjs/core').create();

math.import(require('mathjs/lib/type/matrix'));
math.import(require('mathjs/lib/function/arithmetic'));
/**
 * Predict the class of an unknown data point.
 * @memberof module:bcijs
 * @param {object} ldaParams - The parameters for the LDA, computed with the function ldaLearn
 * @param {number[]|number[][]} point - The data point or array of points to be projected.
 * @returns {number} value less than 0 if predicted to be in class 1, 0 if exactly inbetween, greater than 0 if class 2
 */

function ldaProject(ldaParams, point) {
  return math.add(math.multiply(point, ldaParams.theta), ldaParams.b);
}

module.exports = ldaProject;

},{"mathjs/core":47,"mathjs/lib/function/arithmetic":71,"mathjs/lib/type/matrix":197}],21:[function(require,module,exports){
"use strict";

/**
 * Returns the ceil of the log2 of the absolute value of the passed number
 * @memberof module:bcijs
 * @param {number} num
 * @returns {number} The ceil of the log2 of the absolute value of the passed number 
 * @example
 * nextpow2(8); // 3
 * nextpow2(9); // 4
 * nextpow2(16); // 4
 * nextpow2(30); // 5
 * nextpow2(0); // -Infinity
 */
function nextpow2(num) {
  return Math.ceil(Math.log2(Math.abs(num)));
}

module.exports = nextpow2;

},{}],22:[function(require,module,exports){
"use strict";

var fft = require('fft.js');

var nextpow2 = require('./nextpow2.js');

var fftCache = {};
/**
 * Compute the power spectral density of a given signal.
 * @memberof module:bcijs
 * @param {number[]} signal - The signal.
 * @param {Object} [options]
 * @param {number} [options.fftSize=Math.pow(2, bci.nextpow2(signal.length))] - Size of the fft to be used. Should be a power of 2.
 * @param {boolean} [options.truncate=false] - If true, only the first half of the PSD array is returned
 * @returns {number[]} The PSD.
 */

function psd(signal, options) {
  var _Object$assign = Object.assign({
    fftSize: Math.pow(2, nextpow2(signal.length)),
    truncate: false
  }, options),
      fftSize = _Object$assign.fftSize,
      truncate = _Object$assign.truncate;

  var f;

  if (fftCache.hasOwnProperty(fftSize)) {
    f = fftCache[fftSize];
  } else {
    f = new fft(fftSize);
    fftCache[fftSize] = f;
  } // Zero pad signal to length if needed


  if (signal.length < fftSize) {
    signal = signal.concat(Array(fftSize - signal.length).fill(0));
  }

  var freqs = f.createComplexArray();
  f.realTransform(freqs, signal);

  if (truncate) {
    var powers = getPowers(freqs, freqs.length / 2);
  } else {
    var powers = getPowers(freqs, freqs.length);
  }

  return powers;
}

function getPowers(complexArray, length) {
  var magnitudes = [];

  for (var i = 0; i < length - 1; i += 2) {
    magnitudes.push(Math.sqrt(complexArray[i] * complexArray[i] + complexArray[i + 1] * complexArray[i + 1]));
  }

  return magnitudes;
}

module.exports = psd;

},{"./nextpow2.js":21,"fft.js":44}],23:[function(require,module,exports){
"use strict";

var nextpow2 = require('./nextpow2.js');
/**
 * Compute the average power across a given frequency band given the PSD.
 * @memberof module:bcijs
 * @param {number[]} psd - Power spectral density of the signal.
 * @param {number} sampleRate - The sample rate of the signal.
 * @param {(number[]|string)} - The frequency band provided as an array [frequencyStart, frequencyStop] or a
 * string <code>delta</code> (1-3 Hz), <code>theta</code> (4-7 Hz), <code>alpha</code> (8-12 Hz), <code>beta</code> (13-30 Hz), or <code>gamma</code> (31-50 Hz).
 * While string representations
 * allow for easier prototyping, the use of a specific band passed as an array is recommended, as band string representations may change in
 * future updates.
 * @param {number} [fftSize=Math.pow(2, bci.nextpow2(psd.length))] - Size of the fourier transform used to compute the PSD.
 * @returns {number} The average power in the frequency band.
 */


function psdBandPower(psd, sampleRate, band) {
  var fftSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  if (fftSize === null) {
    fftSize = Math.pow(2, nextpow2(psd.length));
  }

  var bands = {
    // From Dan Szafir's "Pay Attention!", 2012
    'delta': [1, 3],
    'theta': [4, 7],
    'alpha': [8, 12],
    'beta': [13, 30],
    'gamma': [31, 50]
  };

  if (typeof band === 'string' || band instanceof String) {
    band = bands[band];
  }

  var startIndex = Math.floor(band[0] / sampleRate * fftSize);
  var endIndex = Math.min(Math.ceil(band[1] / sampleRate * fftSize), psd.length - 1);
  var power = 0;

  for (var i = startIndex; i < endIndex + 1; i++) {
    power += psd[i];
  }

  return power / (endIndex - startIndex + 1);
}

module.exports = psdBandPower;

},{"./nextpow2.js":21}],24:[function(require,module,exports){
"use strict";

var psd = require('./psd.js');

var psdBandPower = require('./psdBandPower.js');

var nextpow2 = require('./nextpow2.js');

var transpose = require('./transpose.js');
/**
 * Compute the average power across a given frequency band in a signal.
 * @memberof module:bcijs
 * @param {number[]|number[][]} samples - The signal (array of numbers) or a matrix of signals, where rows are samples and columns are signals.
 * @param {number} sampleRate - The sample rate of the signal.
 * @param {(Array|string)} bands - The frequency band or array of bands, where a single band is provided as an array [frequencyStart, frequencyStop] or a string <code>delta</code> (1-3 Hz), <code>theta</code> (4-7 Hz), <code>alpha</code> (8-12 Hz), <code>beta</code> (13-30 Hz), or <code>gamma</code> (31-50 Hz).<br>
 * While string representations allow for easier prototyping, the use of a specific band passed as an array is
 * recommended, as band string representations may change in future updates.
 * @param {Object} [options]
 * @param {number} [options.fftSize=Math.pow(2, bci.nextpow2(signal.length))] - Size of the fft to be used. Should be a power of 2.
 * @returns {number} The average power in the frequency band.
 * @example
 * // Example outputs are rounded
 * 
 * // Single signal examples
 * let sampleRate = 512;
 * let signal = bci.generateSignal([2,16], [10,20], sampleRate, 1);
 * // Get a single power in one band
 * console.log(bci.signalBandPower(signal, sampleRate, 'alpha')); // returns 102.4
 * // Specify a custom band as an array (Ex: 8 Hz - 12 Hz)
 * console.log(bci.signalBandPower(signal, sampleRate, [8, 12])); // returns 102.4
 * // Obtain multiple band powers
 * console.log(bci.signalBandPower(signal, sampleRate, ['alpha', 'beta'])); // returns [ 102.4, 227.6 ]
 * // Multiple band powers works with custom bands too
 * console.log(bci.signalBandPower(signal, sampleRate, [[8, 12], [13, 30]])); // returns [ 102.4, 227.6 ]
 * 
 * // Works with multiple signals too (example with 2 signals)
 * let signal2 = bci.generateSignal([16, 2], [10, 20], 512, 1);
 * let samples = bci.transpose([signal, signal2]);
 * console.log(bci.signalBandPower(samples, sampleRate, 'alpha'));
 * // Returns an array containing the alpha value for each signal
 * console.log(bci.signalBandPower(samples, sampleRate, ['alpha', 'beta', 'gamma']));
 * // Returns a 2d array with number_of_bands rows and number_of_signals columns
 */


function signalBandPower(samples, sampleRate, bands, options) {
  // Backwards compat for previous option to directly pass fftSize
  if (typeof options === 'number') {
    options = {
      fftSize: options
    };
  } // Defaults
  // TODO: Average channels option


  var _Object$assign = Object.assign({
    fftSize: Math.pow(2, nextpow2(samples.length)),
    averageChannels: false
  }, options),
      fftSize = _Object$assign.fftSize,
      averageChannels = _Object$assign.averageChannels;

  function getSignalPower(signal, band) {
    var p = psd(signal, {
      fftSize: fftSize
    });
    return psdBandPower(p, sampleRate, band, fftSize);
  } // Store if bands was passed as just a string or frequency range (not an array of bands)


  var notBandArray = typeof bands === 'string' || !Array.isArray(bands[0]) && typeof bands[0] !== 'string'; // Now convert it to an array of bands so the matrix operations will work

  if (notBandArray) bands = [bands]; // Store the resulting matrix or array of powers

  var result; // If samples is a matrix (multiple signals)

  if (Array.isArray(samples[0])) {
    var num_signals = samples[0].length;
    var channels = transpose(samples);
    result = new Array(bands.length);

    for (var r = 0; r < bands.length; r++) {
      result[r] = new Array(num_signals);

      for (var c = 0; c < num_signals; c++) {
        result[r][c] = getSignalPower(channels[c], bands[r]);
      }
    }
  } else {
    // Else, must be single signal as row vector (1d array)
    result = new Array(bands.length);

    for (var i = 0; i < bands.length; i++) {
      result[i] = getSignalPower(samples, bands[i]);
    }
  } // If bands wasn't an array of bands, return the 1d array of results for that band


  if (notBandArray) return result[0]; // If bands was multiple bands, return the result as a matrix

  return result;
}

module.exports = signalBandPower;

},{"./nextpow2.js":21,"./psd.js":22,"./psdBandPower.js":23,"./transpose.js":25}],25:[function(require,module,exports){
"use strict";

/**
 * Transpose an array
 * @memberof module:bcijs
 * @param {Array} array - The array to transpose
 * @returns {Array} The transposed array
 */
function transpose(array) {
  var rows = array.length;
  var cols = array[0].length; // Verify array dimensions

  for (var i = 0; i < rows; i++) {
    if (array[i].length != cols) {
      throw new Error('Array dimension error: must be 2d array with equal row lengths');
    }
  } // Create new array


  var transposed = new Array(cols);

  for (var c = 0; c < cols; c++) {
    transposed[c] = new Array(rows);

    for (var r = 0; r < rows; r++) {
      transposed[c][r] = array[r][c];
    }
  }

  return transposed;
}

module.exports = transpose;

},{}],26:[function(require,module,exports){
"use strict";

/**
 * Calculate the accuracy of a classifier given its confusion matrix as defined by the confusionMatrix method
 * @memberof module:bcijs
 * @param {number[][]} confusionMatrix - a confusion matrix
 * @returns {number} The accuracy
 */
function accuracy(confusionMatrix) {
  var correct = 0;

  for (var i = 0; i < confusionMatrix.length; i++) {
    correct += confusionMatrix[i][i];
  }

  var total = 0;

  for (var _i = 0; _i < confusionMatrix.length; _i++) {
    for (var j = 0; j < confusionMatrix.length; j++) {
      total += confusionMatrix[_i][j];
    }
  }

  return correct / total;
}

module.exports = accuracy;

},{}],27:[function(require,module,exports){
"use strict";

var recall = require('./recall.js');

var specificity = require('./specificity.js');
/**
 * Calculate the balanced accuracy of a classifier given its confusion matrix as defined by the confusionMatrix method
 * @memberof module:bcijs
 * @param {number[][]} confusionMatrix - a confusion matrix
 * @returns {number} The balanced accuracy
 */


function balancedAccuracy(confusionMatrix) {
  var tpr = recall(confusionMatrix);
  var tnr = specificity(confusionMatrix);
  return (tpr + tnr) / 2;
}

module.exports = balancedAccuracy;

},{"./recall.js":32,"./specificity.js":33}],28:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

/**
 * Generate a confusion matrix C where rows are actual classes and columns are predicted classes.
 * C = [
 *   [true negative, false positive],
 *   [false negative, true positive]
 * ].
 * 
 * If two classes are passed, class 0 represents the negative case, and class 1 represents the positive case.
 * If more than two classes are passed, an NxN confusion matrix is returned where N is the number of classes.
 * @memberof module:bcijs
 * @param {number[]} predictedClasses - An array of predicted classes, with class numbers starting at 0
 * @param {number[]} actualClasses - An array of the actual classes, with class numbers starting at 0
 * @returns {number[][]} The confusion matrix
 */
function confusionMatrix(predictedClasses, actualClasses) {
  if (predictedClasses.length != actualClasses.length) {
    throw new Error('predictedClasses length must equal actualClasses length');
  }

  var largestClass = Math.max.apply(Math, _toConsumableArray(predictedClasses.concat(actualClasses))); // Fill a 2d array of size (largestClass + 1) x (largestClass + 1) with zeros

  var cMatrix = Array(largestClass + 1).fill().map(function () {
    return Array(largestClass + 1).fill(0);
  });

  for (var i = 0; i < predictedClasses.length; i++) {
    var predicted = predictedClasses[i];
    var actual = actualClasses[i];
    cMatrix[actual][predicted]++;
  }

  return cMatrix;
}

module.exports = confusionMatrix;

},{}],29:[function(require,module,exports){
"use strict";

var precision = require('./precision.js');

var recall = require('./recall.js');
/**
 * Calculate the f1 score of a binary classifier given its confusion matrix as defined by the confusionMatrix method
 * @memberof module:bcijs
 * @param {number[][]} confusionMatrix - a 2x2 confusion matrix
 * @returns {number} The f1 score
 */


function f1(confusionMatrix) {
  if (confusionMatrix.length != 2 || confusionMatrix[0].length != 2 || confusionMatrix[1].length != 2) {
    throw new Error('Confusion matrix must be of size 2x2');
  }

  var p = precision(confusionMatrix);
  var r = recall(confusionMatrix);
  var f1 = 2 * p * r / (p + r);
  return f1;
}

module.exports = f1;

},{"./precision.js":31,"./recall.js":32}],30:[function(require,module,exports){
"use strict";

/**
 * Calculate the Matthews correlation coefficient (MCC) of a binary classifier given its confusion matrix as defined by the confusionMatrix method
 * @memberof module:bcijs
 * @param {number[][]} confusionMatrix - a 2x2 confusion matrix
 * @returns {number} The Matthews correlation coefficient
 */
function mcc(confusionMatrix) {
  if (confusionMatrix.length != 2 || confusionMatrix[0].length != 2 || confusionMatrix[1].length != 2) {
    throw new Error('Confusion matrix must be of size 2x2');
  }

  var TN = confusionMatrix[0][0];
  var FP = confusionMatrix[0][1];
  var FN = confusionMatrix[1][0];
  var TP = confusionMatrix[1][1];
  return (TP * TN - FP * FN) / Math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN));
}

module.exports = mcc;

},{}],31:[function(require,module,exports){
"use strict";

/**
 * Calculate the precision of a binary classifier given its confusion matrix as defined by the confusionMatrix method
 * @memberof module:bcijs
 * @param {number[][]} confusionMatrix - a 2x2 confusion matrix
 * @returns {number} The precision (positive predictive value)
 */
function precision(confusionMatrix) {
  if (confusionMatrix.length != 2 || confusionMatrix[0].length != 2 || confusionMatrix[1].length != 2) {
    throw new Error('Confusion matrix must be of size 2x2');
  }

  return confusionMatrix[1][1] / (confusionMatrix[1][1] + confusionMatrix[0][1]);
}

module.exports = precision;

},{}],32:[function(require,module,exports){
"use strict";

/**
 * Calculate the recall of a binary classifier given its confusion matrix as defined by the confusionMatrix method
 * @memberof module:bcijs
 * @param {number[][]} confusionMatrix - a 2x2 confusion matrix
 * @returns {number} The recall (true positive rate)
 */
function recall(confusionMatrix) {
  if (confusionMatrix.length != 2 || confusionMatrix[0].length != 2 || confusionMatrix[1].length != 2) {
    throw new Error('Confusion matrix must be of size 2x2');
  }

  return confusionMatrix[1][1] / (confusionMatrix[1][1] + confusionMatrix[1][0]);
}

module.exports = recall;

},{}],33:[function(require,module,exports){
"use strict";

/**
 * Calculate the specificity of a binary classifier given its confusion matrix as defined by the confusionMatrix method
 * @memberof module:bcijs
 * @param {number[][]} confusionMatrix - a 2x2 confusion matrix
 * @returns {number} The specificity (true negative rate)
 */
function specificity(confusionMatrix) {
  if (confusionMatrix.length != 2 || confusionMatrix[0].length != 2 || confusionMatrix[1].length != 2) {
    throw new Error('Confusion matrix must be of size 2x2');
  }

  return confusionMatrix[0][0] / (confusionMatrix[0][0] + confusionMatrix[0][1]);
}

module.exports = specificity;

},{}],34:[function(require,module,exports){
"use strict";

// Use setTimeout as a promise

/**
 * @memberof module:bcijs
 * @function
 * @name wait
 * @param {number} ms - Number of milliseconds to wait
 * @returns {Promise} A promise which resolves when the timeout occurs
 */
module.exports = function (ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};

},{}],35:[function(require,module,exports){
'use strict';

module.exports = function () {
  var pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)", '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))'].join('|');
  return new RegExp(pattern, 'g');
};

},{}],36:[function(require,module,exports){
'use strict';

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

  for (var i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

},{}],37:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var base64 = require('base64-js');

var ieee754 = require('ieee754');

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */

Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
}

function typedArraySupport() {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function foo() {
        return 42;
      }
    };
    return arr.foo() === 42;
  } catch (e) {
    return false;
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function get() {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.buffer;
  }
});
Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function get() {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.byteOffset;
  }
});

function createBuffer(length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"');
  } // Return an augmented `Uint8Array` instance


  var buf = new Uint8Array(length);
  buf.__proto__ = Buffer.prototype;
  return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError('The "string" argument must be of type string. Received type number');
    }

    return allocUnsafe(arg);
  }

  return from(arg, encodingOrOffset, length);
} // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97


if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  });
}

Buffer.poolSize = 8192; // not used by this implementation

function from(value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset);
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value);
  }

  if (value == null) {
    throw TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof(value));
  }

  if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }

  if (typeof value === 'number') {
    throw new TypeError('The "value" argument must not be of type number. Received type number');
  }

  var valueOf = value.valueOf && value.valueOf();

  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length);
  }

  var b = fromObject(value);
  if (b) return b;

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof(value));
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length);
}; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148


Buffer.prototype.__proto__ = Uint8Array.prototype;
Buffer.__proto__ = Uint8Array;

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number');
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"');
  }
}

function alloc(size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
  }

  return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding);
};

function allocUnsafe(size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size);
};

function fromString(string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding);
  }

  var length = byteLength(string, encoding) | 0;
  var buf = createBuffer(length);
  var actual = buf.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf;
}

function fromArrayLike(array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(length);

  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }

  return buf;
}

function fromArrayBuffer(array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds');
  }

  var buf;

  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  } // Return an augmented `Uint8Array` instance


  buf.__proto__ = Buffer.prototype;
  return buf;
}

function fromObject(obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(len);

    if (buf.length === 0) {
      return buf;
    }

    obj.copy(buf, 0, 0, len);
    return buf;
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0);
    }

    return fromArrayLike(obj);
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data);
  }
}

function checked(length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
};

Buffer.compare = function compare(a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf);
    }

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + _typeof(string));
  }

  var len = string.length;
  var mustMatch = arguments.length > 2 && arguments[2] === true;
  if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
        }

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.toLocaleString = Buffer.prototype.toString;

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
  if (this.length > max) str += ' ... ';
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength);
  }

  if (!Buffer.isBuffer(target)) {
    throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + _typeof(target));
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  }

  var strLen = string.length;

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0;

    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

  newBuf.__proto__ = Buffer.prototype;
  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset + 3] = value >>> 24;
  this[offset + 2] = value >>> 16;
  this[offset + 1] = value >>> 8;
  this[offset] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  this[offset + 2] = value >>> 16;
  this[offset + 3] = value >>> 24;
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
    var len = bytes.length;

    if (len === 0) {
      throw new TypeError('The value "' + val + '" is invalid for argument "value"');
    }

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not

  str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
} // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166


function isInstance(obj, type) {
  return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}

function numberIsNaN(obj) {
  // For IE11 support
  return obj !== obj; // eslint-disable-line no-self-compare
}

},{"base64-js":36,"ieee754":45}],38:[function(require,module,exports){
(function (Buffer){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var clone = function () {
  'use strict';
  /**
   * Clones (copies) an Object using deep copying.
   *
   * This function supports circular references by default, but if you are certain
   * there are no circular references in your object, you can save some CPU time
   * by calling clone(obj, false).
   *
   * Caution: if `circular` is false and `parent` contains circular references,
   * your program may enter an infinite loop and crash.
   *
   * @param `parent` - the object to be cloned
   * @param `circular` - set to true if the object to be cloned may contain
   *    circular references. (optional - true by default)
   * @param `depth` - set to a number if the object is only to be cloned to
   *    a particular depth. (optional - defaults to Infinity)
   * @param `prototype` - sets the prototype to be used when cloning an object.
   *    (optional - defaults to parent prototype).
  */

  function clone(parent, circular, depth, prototype) {
    var filter;

    if (_typeof(circular) === 'object') {
      depth = circular.depth;
      prototype = circular.prototype;
      filter = circular.filter;
      circular = circular.circular;
    } // maintain two arrays for circular references, where corresponding parents
    // and children have the same index


    var allParents = [];
    var allChildren = [];
    var useBuffer = typeof Buffer != 'undefined';
    if (typeof circular == 'undefined') circular = true;
    if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren

    function _clone(parent, depth) {
      // cloning null always returns null
      if (parent === null) return null;
      if (depth == 0) return parent;
      var child;
      var proto;

      if (_typeof(parent) != 'object') {
        return parent;
      }

      if (clone.__isArray(parent)) {
        child = [];
      } else if (clone.__isRegExp(parent)) {
        child = new RegExp(parent.source, __getRegExpFlags(parent));
        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
      } else if (clone.__isDate(parent)) {
        child = new Date(parent.getTime());
      } else if (useBuffer && Buffer.isBuffer(parent)) {
        if (Buffer.allocUnsafe) {
          // Node.js >= 4.5.0
          child = Buffer.allocUnsafe(parent.length);
        } else {
          // Older Node.js versions
          child = new Buffer(parent.length);
        }

        parent.copy(child);
        return child;
      } else {
        if (typeof prototype == 'undefined') {
          proto = Object.getPrototypeOf(parent);
          child = Object.create(proto);
        } else {
          child = Object.create(prototype);
          proto = prototype;
        }
      }

      if (circular) {
        var index = allParents.indexOf(parent);

        if (index != -1) {
          return allChildren[index];
        }

        allParents.push(parent);
        allChildren.push(child);
      }

      for (var i in parent) {
        var attrs;

        if (proto) {
          attrs = Object.getOwnPropertyDescriptor(proto, i);
        }

        if (attrs && attrs.set == null) {
          continue;
        }

        child[i] = _clone(parent[i], depth - 1);
      }

      return child;
    }

    return _clone(parent, depth);
  }
  /**
   * Simple flat clone using prototype, accepts only objects, usefull for property
   * override on FLAT configuration object (no nested props).
   *
   * USE WITH CAUTION! This may not behave as you wish if you do not know how this
   * works.
   */


  clone.clonePrototype = function clonePrototype(parent) {
    if (parent === null) return null;

    var c = function c() {};

    c.prototype = parent;
    return new c();
  }; // private utility functions


  function __objToStr(o) {
    return Object.prototype.toString.call(o);
  }

  ;
  clone.__objToStr = __objToStr;

  function __isDate(o) {
    return _typeof(o) === 'object' && __objToStr(o) === '[object Date]';
  }

  ;
  clone.__isDate = __isDate;

  function __isArray(o) {
    return _typeof(o) === 'object' && __objToStr(o) === '[object Array]';
  }

  ;
  clone.__isArray = __isArray;

  function __isRegExp(o) {
    return _typeof(o) === 'object' && __objToStr(o) === '[object RegExp]';
  }

  ;
  clone.__isRegExp = __isRegExp;

  function __getRegExpFlags(re) {
    var flags = '';
    if (re.global) flags += 'g';
    if (re.ignoreCase) flags += 'i';
    if (re.multiline) flags += 'm';
    return flags;
  }

  ;
  clone.__getRegExpFlags = __getRegExpFlags;
  return clone;
}();

if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object' && module.exports) {
  module.exports = clone;
}

}).call(this,require("buffer").Buffer)
},{"buffer":37}],39:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @license Complex.js v2.0.3 11/02/2016
 *
 * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/

/**
 *
 * This class allows the manipulation of complex numbers.
 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
 *
 * Object form
 * { re: <real>, im: <imaginary> }
 * { arg: <angle>, abs: <radius> }
 * { phi: <angle>, r: <radius> }
 *
 * Array / Vector form
 * [ real, imaginary ]
 *
 * Double form
 * 99.3 - Single double value
 *
 * String form
 * '23.1337' - Simple real number
 * '15+3i' - a simple complex number
 * '3-i' - a simple complex number
 *
 * Example:
 *
 * var c = new Complex('99.3+8i');
 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
 *
 */
(function (root) {
  'use strict';

  var P = {
    're': 0,
    'im': 0
  };

  var _cosh = function cosh(x) {
    return (Math.exp(x) + Math.exp(-x)) * 0.5;
  };

  var _sinh = function sinh(x) {
    return (Math.exp(x) - Math.exp(-x)) * 0.5;
  };

  var hypot = function hypot(x, y) {
    var a = Math.abs(x);
    var b = Math.abs(y);

    if (a < 3000 && b < 3000) {
      return Math.sqrt(a * a + b * b);
    }

    if (a < b) {
      a = b;
      b = x / y;
    } else {
      b = y / x;
    }

    return a * Math.sqrt(1 + b * b);
  };

  var parser_exit = function parser_exit() {
    throw SyntaxError('Invalid Param');
  };
  /**
   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
   *
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */


  function logHypot(a, b) {
    var _a = Math.abs(a);

    var _b = Math.abs(b);

    if (a === 0) {
      return Math.log(_b);
    }

    if (b === 0) {
      return Math.log(_a);
    }

    if (_a < 3000 && _b < 3000) {
      return Math.log(a * a + b * b) * 0.5;
    }
    /* I got 4 ideas to compute this property without overflow:
     *
     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
     *
     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)
      Math.log(a * a + b * b) / 2
      *
     *
     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)
      var fn = function(a, b) {
     a = Math.abs(a);
     b = Math.abs(b);
     var t = Math.min(a, b);
     a = Math.max(a, b);
     t = t / a;
      return Math.log(a) + Math.log(1 + t * t) / 2;
     };
      * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)
      Math.log(a / Math.cos(Math.atan2(b, a)))
      * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)
      Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))
      */


    return Math.log(a / Math.cos(Math.atan2(b, a)));
  }

  var parse = function parse(a, b) {
    if (a === undefined || a === null) {
      P['re'] = P['im'] = 0;
    } else if (b !== undefined) {
      P['re'] = a;
      P['im'] = b;
    } else switch (_typeof(a)) {
      case 'object':
        if ('im' in a && 're' in a) {
          P['re'] = a['re'];
          P['im'] = a['im'];
        } else if ('abs' in a && 'arg' in a) {
          P['re'] = a['abs'] * Math.cos(a['arg']);
          P['im'] = a['abs'] * Math.sin(a['arg']);
        } else if ('r' in a && 'phi' in a) {
          P['re'] = a['r'] * Math.cos(a['phi']);
          P['im'] = a['r'] * Math.sin(a['phi']);
        } else if (a.length === 2) {
          // Quick array check
          P['re'] = a[0];
          P['im'] = a[1];
        } else {
          parser_exit();
        }

        break;

      case 'string':
        P['im'] =
        /* void */
        P['re'] = 0;
        var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
        var plus = 1;
        var minus = 0;

        if (tokens === null) {
          parser_exit();
        }

        for (var i = 0; i < tokens.length; i++) {
          var c = tokens[i];

          if (c === ' ' || c === '\t' || c === '\n') {
            /* void */
          } else if (c === '+') {
            plus++;
          } else if (c === '-') {
            minus++;
          } else if (c === 'i' || c === 'I') {
            if (plus + minus === 0) {
              parser_exit();
            }

            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
              P['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
              i++;
            } else {
              P['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
            }

            plus = minus = 0;
          } else {
            if (plus + minus === 0 || isNaN(c)) {
              parser_exit();
            }

            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
              P['im'] += parseFloat((minus % 2 ? '-' : '') + c);
              i++;
            } else {
              P['re'] += parseFloat((minus % 2 ? '-' : '') + c);
            }

            plus = minus = 0;
          }
        } // Still something on the stack


        if (plus + minus > 0) {
          parser_exit();
        }

        break;

      case 'number':
        P['im'] = 0;
        P['re'] = a;
        break;

      default:
        parser_exit();
    }

    if (isNaN(P['re']) || isNaN(P['im'])) {// If a calculation is NaN, we treat it as NaN and don't throw
      //parser_exit();
    }
  };
  /**
   * @constructor
   * @returns {Complex}
   */


  function Complex(a, b) {
    if (!(this instanceof Complex)) {
      return new Complex(a, b);
    }

    parse(a, b); // mutates P

    this['re'] = P['re'];
    this['im'] = P['im'];
  }

  Complex.prototype = {
    're': 0,
    'im': 0,

    /**
     * Calculates the sign of a complex number, which is a normalized complex
     *
     * @returns {Complex}
     */
    'sign': function sign() {
      var abs = this['abs']();
      return new Complex(this['re'] / abs, this['im'] / abs);
    },

    /**
     * Adds two complex numbers
     *
     * @returns {Complex}
     */
    'add': function add(a, b) {
      parse(a, b); // mutates P

      return new Complex(this['re'] + P['re'], this['im'] + P['im']);
    },

    /**
     * Subtracts two complex numbers
     *
     * @returns {Complex}
     */
    'sub': function sub(a, b) {
      parse(a, b); // mutates P

      return new Complex(this['re'] - P['re'], this['im'] - P['im']);
    },

    /**
     * Multiplies two complex numbers
     *
     * @returns {Complex}
     */
    'mul': function mul(a, b) {
      parse(a, b); // mutates P
      // Besides the addition/subtraction, this helps having a solution for real Infinity

      if (P['im'] === 0 && this['im'] === 0) {
        return new Complex(this['re'] * P['re'], 0);
      }

      return new Complex(this['re'] * P['re'] - this['im'] * P['im'], this['re'] * P['im'] + this['im'] * P['re']);
    },

    /**
     * Divides two complex numbers
     *
     * @returns {Complex}
     */
    'div': function div(a, b) {
      parse(a, b); // mutates P

      a = this['re'];
      b = this['im'];
      var c = P['re'];
      var d = P['im'];
      var t, x;

      if (0 === d) {
        if (0 === c) {
          // Divisor is zero
          return new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? b / 0 : 0);
        } else {
          // Divisor is real
          return new Complex(a / c, b / c);
        }
      }

      if (Math.abs(c) < Math.abs(d)) {
        x = c / d;
        t = c * x + d;
        return new Complex((a * x + b) / t, (b * x - a) / t);
      } else {
        x = d / c;
        t = d * x + c;
        return new Complex((a + b * x) / t, (b - a * x) / t);
      }
    },

    /**
     * Calculate the power of two complex numbers
     *
     * @returns {Complex}
     */
    'pow': function pow(a, b) {
      parse(a, b); // mutates P

      a = this['re'];
      b = this['im'];

      if (a === 0 && b === 0) {
        return Complex['ZERO'];
      } // If the exponent is real


      if (P['im'] === 0) {
        if (b === 0 && a >= 0) {
          return new Complex(Math.pow(a, P['re']), 0);
        } else if (a === 0) {
          // If base is fully imaginary
          switch ((P['re'] % 4 + 4) % 4) {
            case 0:
              return new Complex(Math.pow(b, P['re']), 0);

            case 1:
              return new Complex(0, Math.pow(b, P['re']));

            case 2:
              return new Complex(-Math.pow(b, P['re']), 0);

            case 3:
              return new Complex(0, -Math.pow(b, P['re']));
          }
        }
      }
      /* I couldn't find a good formula, so here is a derivation and optimization
       *
       * z_1^z_2 = (a + bi)^(c + di)
       *         = exp((c + di) * log(a + bi)
       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
       * =>...
       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       *
       * =>...
       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       *
       * =>
       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
       *
       */


      var arg = Math.atan2(b, a);
      var loh = logHypot(a, b);
      a = Math.exp(P['re'] * loh - P['im'] * arg);
      b = P['im'] * loh + P['re'] * arg;
      return new Complex(a * Math.cos(b), a * Math.sin(b));
    },

    /**
     * Calculate the complex square root
     *
     * @returns {Complex}
     */
    'sqrt': function sqrt() {
      var a = this['re'];
      var b = this['im'];
      var r = this['abs']();
      var re, im;

      if (a >= 0) {
        if (b === 0) {
          return new Complex(Math.sqrt(a), 0);
        }

        re = 0.5 * Math.sqrt(2.0 * (r + a));
      } else {
        re = Math.abs(b) / Math.sqrt(2 * (r - a));
      }

      if (a <= 0) {
        im = 0.5 * Math.sqrt(2.0 * (r - a));
      } else {
        im = Math.abs(b) / Math.sqrt(2 * (r + a));
      }

      return new Complex(re, b < 0 ? -im : im);
    },

    /**
     * Calculate the complex exponent
     *
     * @returns {Complex}
     */
    'exp': function exp() {
      var tmp = Math.exp(this['re']);

      if (this['im'] === 0) {//return new Complex(tmp, 0);
      }

      return new Complex(tmp * Math.cos(this['im']), tmp * Math.sin(this['im']));
    },

    /**
     * Calculate the natural log
     *
     * @returns {Complex}
     */
    'log': function log() {
      var a = this['re'];
      var b = this['im'];

      if (b === 0 && a > 0) {//return new Complex(Math.log(a), 0);
      }

      return new Complex(logHypot(a, b), Math.atan2(b, a));
    },

    /**
     * Calculate the magnitude of the complex number
     *
     * @returns {number}
     */
    'abs': function abs() {
      return hypot(this['re'], this['im']);
    },

    /**
     * Calculate the angle of the complex number
     *
     * @returns {number}
     */
    'arg': function arg() {
      return Math.atan2(this['im'], this['re']);
    },

    /**
     * Calculate the sine of the complex number
     *
     * @returns {Complex}
     */
    'sin': function sin() {
      // sin(c) = (e^b - e^(-b)) / (2i)
      var a = this['re'];
      var b = this['im'];
      return new Complex(Math.sin(a) * _cosh(b), Math.cos(a) * _sinh(b));
    },

    /**
     * Calculate the cosine
     *
     * @returns {Complex}
     */
    'cos': function cos() {
      // cos(z) = (e^b + e^(-b)) / 2
      var a = this['re'];
      var b = this['im'];
      return new Complex(Math.cos(a) * _cosh(b), -Math.sin(a) * _sinh(b));
    },

    /**
     * Calculate the tangent
     *
     * @returns {Complex}
     */
    'tan': function tan() {
      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))
      var a = 2 * this['re'];
      var b = 2 * this['im'];

      var d = Math.cos(a) + _cosh(b);

      return new Complex(Math.sin(a) / d, _sinh(b) / d);
    },

    /**
     * Calculate the cotangent
     *
     * @returns {Complex}
     */
    'cot': function cot() {
      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))
      var a = 2 * this['re'];
      var b = 2 * this['im'];

      var d = Math.cos(a) - _cosh(b);

      return new Complex(-Math.sin(a) / d, _sinh(b) / d);
    },

    /**
     * Calculate the secant
     *
     * @returns {Complex}
     */
    'sec': function sec() {
      // sec(c) = 2 / (e^(ci) + e^(-ci))
      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * _cosh(2 * b) + 0.5 * Math.cos(2 * a);
      return new Complex(Math.cos(a) * _cosh(b) / d, Math.sin(a) * _sinh(b) / d);
    },

    /**
     * Calculate the cosecans
     *
     * @returns {Complex}
     */
    'csc': function csc() {
      // csc(c) = 2i / (e^(ci) - e^(-ci))
      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * _cosh(2 * b) - 0.5 * Math.cos(2 * a);
      return new Complex(Math.sin(a) * _cosh(b) / d, -Math.cos(a) * _sinh(b) / d);
    },

    /**
     * Calculate the complex arcus sinus
     *
     * @returns {Complex}
     */
    'asin': function asin() {
      // asin(c) = -i * log(ci + sqrt(1 - c^2))
      var a = this['re'];
      var b = this['im'];
      var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
      var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
      return new Complex(t2['im'], -t2['re']);
    },

    /**
     * Calculate the complex arcus cosinus
     *
     * @returns {Complex}
     */
    'acos': function acos() {
      // acos(c) = i * log(c - i * sqrt(1 - c^2))
      var a = this['re'];
      var b = this['im'];
      var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
      var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
      return new Complex(Math.PI / 2 - t2['im'], t2['re']);
    },

    /**
     * Calculate the complex arcus tangent
     *
     * @returns {Complex}
     */
    'atan': function atan() {
      // atan(c) = i / 2 log((i + x) / (i - x))
      var a = this['re'];
      var b = this['im'];

      if (a === 0) {
        if (b === 1) {
          return new Complex(0, Infinity);
        }

        if (b === -1) {
          return new Complex(0, -Infinity);
        }
      }

      var d = a * a + (1.0 - b) * (1.0 - b);
      var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();
      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
    },

    /**
     * Calculate the complex arcus cotangent
     *
     * @returns {Complex}
     */
    'acot': function acot() {
      // acot(c) = i / 2 log((c - i) / (c + i))
      var a = this['re'];
      var b = this['im'];

      if (b === 0) {
        return new Complex(Math.atan2(1, a), 0);
      }

      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).atan() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atan();
    },

    /**
     * Calculate the complex arcus secant
     *
     * @returns {Complex}
     */
    'asec': function asec() {
      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))
      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(0, Infinity);
      }

      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).acos() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acos();
    },

    /**
     * Calculate the complex arcus cosecans
     *
     * @returns {Complex}
     */
    'acsc': function acsc() {
      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))
      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(Math.PI / 2, Infinity);
      }

      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).asin() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asin();
    },

    /**
     * Calculate the complex sinh
     *
     * @returns {Complex}
     */
    'sinh': function sinh() {
      // sinh(c) = (e^c - e^-c) / 2
      var a = this['re'];
      var b = this['im'];
      return new Complex(_sinh(a) * Math.cos(b), _cosh(a) * Math.sin(b));
    },

    /**
     * Calculate the complex cosh
     *
     * @returns {Complex}
     */
    'cosh': function cosh() {
      // cosh(c) = (e^c + e^-c) / 2
      var a = this['re'];
      var b = this['im'];
      return new Complex(_cosh(a) * Math.cos(b), _sinh(a) * Math.sin(b));
    },

    /**
     * Calculate the complex tanh
     *
     * @returns {Complex}
     */
    'tanh': function tanh() {
      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)
      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = _cosh(a) + Math.cos(b);
      return new Complex(_sinh(a) / d, Math.sin(b) / d);
    },

    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'coth': function coth() {
      // coth(c) = (e^c + e^-c) / (e^c - e^-c)
      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = _cosh(a) - Math.cos(b);
      return new Complex(_sinh(a) / d, -Math.sin(b) / d);
    },

    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'csch': function csch() {
      // csch(c) = 2 / (e^c - e^-c)
      var a = this['re'];
      var b = this['im'];

      var d = Math.cos(2 * b) - _cosh(2 * a);

      return new Complex(-2 * _sinh(a) * Math.cos(b) / d, 2 * _cosh(a) * Math.sin(b) / d);
    },

    /**
     * Calculate the complex sech
     *
     * @returns {Complex}
     */
    'sech': function sech() {
      // sech(c) = 2 / (e^c + e^-c)
      var a = this['re'];
      var b = this['im'];

      var d = Math.cos(2 * b) + _cosh(2 * a);

      return new Complex(2 * _cosh(a) * Math.cos(b) / d, -2 * _sinh(a) * Math.sin(b) / d);
    },

    /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
    'asinh': function asinh() {
      // asinh(c) = log(c + sqrt(c^2 + 1))
      var tmp = this['im'];
      this['im'] = -this['re'];
      this['re'] = tmp;
      var res = this['asin']();
      this['re'] = -this['im'];
      this['im'] = tmp;
      tmp = res['re'];
      res['re'] = -res['im'];
      res['im'] = tmp;
      return res;
    },

    /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
    'acosh': function acosh() {
      // acosh(c) = log(c + sqrt(c^2 - 1))
      var tmp;
      var res = this['acos']();

      if (res['im'] <= 0) {
        tmp = res['re'];
        res['re'] = -res['im'];
        res['im'] = tmp;
      } else {
        tmp = res['im'];
        res['im'] = -res['re'];
        res['re'] = tmp;
      }

      return res;
    },

    /**
     * Calculate the complex atanh
     *
     * @returns {Complex}
     */
    'atanh': function atanh() {
      // atanh(c) = log((1+c) / (1-c)) / 2
      var a = this['re'];
      var b = this['im'];
      var noIM = a > 1 && b === 0;
      var oneMinus = 1 - a;
      var onePlus = 1 + a;
      var d = oneMinus * oneMinus + b * b;
      var x = d !== 0 ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex(a !== -1 ? a / 0 : 0, b !== 0 ? b / 0 : 0);
      var temp = x['re'];
      x['re'] = logHypot(x['re'], x['im']) / 2;
      x['im'] = Math.atan2(x['im'], temp) / 2;

      if (noIM) {
        x['im'] = -x['im'];
      }

      return x;
    },

    /**
     * Calculate the complex acoth
     *
     * @returns {Complex}
     */
    'acoth': function acoth() {
      // acoth(c) = log((c+1) / (c-1)) / 2
      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(0, Math.PI / 2);
      }

      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).atanh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atanh();
    },

    /**
     * Calculate the complex acsch
     *
     * @returns {Complex}
     */
    'acsch': function acsch() {
      // acsch(c) = log((1+sqrt(1+c^2))/c)
      var a = this['re'];
      var b = this['im'];

      if (b === 0) {
        return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);
      }

      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).asinh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asinh();
    },

    /**
     * Calculate the complex asech
     *
     * @returns {Complex}
     */
    'asech': function asech() {
      // asech(c) = log((1+sqrt(1-c^2))/c)
      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(Infinity, 0);
      }

      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).acosh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acosh();
    },

    /**
     * Calculate the complex inverse 1/z
     *
     * @returns {Complex}
     */
    'inverse': function inverse() {
      var a = this['re'];
      var b = this['im'];
      var d = a * a + b * b;
      return new Complex(a !== 0 ? a / d : 0, b !== 0 ? -b / d : 0);
    },

    /**
     * Returns the complex conjugate
     *
     * @returns {Complex}
     */
    'conjugate': function conjugate() {
      return new Complex(this['re'], -this['im']);
    },

    /**
     * Gets the negated complex number
     *
     * @returns {Complex}
     */
    'neg': function neg() {
      return new Complex(-this['re'], -this['im']);
    },

    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'ceil': function ceil(places) {
      places = Math.pow(10, places || 0);
      return new Complex(Math.ceil(this['re'] * places) / places, Math.ceil(this['im'] * places) / places);
    },

    /**
     * Floors the actual complex number
     *
     * @returns {Complex}
     */
    'floor': function floor(places) {
      places = Math.pow(10, places || 0);
      return new Complex(Math.floor(this['re'] * places) / places, Math.floor(this['im'] * places) / places);
    },

    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'round': function round(places) {
      places = Math.pow(10, places || 0);
      return new Complex(Math.round(this['re'] * places) / places, Math.round(this['im'] * places) / places);
    },

    /**
     * Compares two complex numbers
     *
     * @returns {boolean}
     */
    'equals': function equals(a, b) {
      parse(a, b); // mutates P

      return Math.abs(P['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(P['im'] - this['im']) <= Complex['EPSILON'];
    },

    /**
     * Clones the actual object
     *
     * @returns {Complex}
     */
    'clone': function clone() {
      return new Complex(this['re'], this['im']);
    },

    /**
     * Gets a string of the actual complex number
     *
     * @returns {string}
     */
    'toString': function toString() {
      var a = this['re'];
      var b = this['im'];
      var ret = '';

      if (isNaN(a) || isNaN(b)) {
        return 'NaN';
      }

      if (a !== 0) {
        ret += a;
      }

      if (b !== 0) {
        if (a !== 0) {
          ret += b < 0 ? ' - ' : ' + ';
        } else if (b < 0) {
          ret += '-';
        }

        b = Math.abs(b);

        if (1 !== b) {
          ret += b;
        }

        ret += 'i';
      }

      if (!ret) return '0';
      return ret;
    },

    /**
     * Returns the actual number as a vector
     *
     * @returns {Array}
     */
    'toVector': function toVector() {
      return [this['re'], this['im']];
    },

    /**
     * Returns the actual real value of the current object
     *
     * @returns {number|null}
     */
    'valueOf': function valueOf() {
      if (this['im'] === 0) {
        return this['re'];
      }

      return null;
    },

    /**
     * Checks if the given complex number is not a number
     *
     * @returns {boolean}
     */
    'isNaN': function (_isNaN) {
      function isNaN() {
        return _isNaN.apply(this, arguments);
      }

      isNaN.toString = function () {
        return _isNaN.toString();
      };

      return isNaN;
    }(function () {
      return isNaN(this['re']) || isNaN(this['im']);
    }),

    /**
     * Checks if the given complex number is finite
     *
     * @returns {boolean}
     */
    'isFinite': function (_isFinite) {
      function isFinite() {
        return _isFinite.apply(this, arguments);
      }

      isFinite.toString = function () {
        return _isFinite.toString();
      };

      return isFinite;
    }(function () {
      return isFinite(this['re']) && isFinite(this['im']);
    })
  };
  Complex['ZERO'] = new Complex(0, 0);
  Complex['ONE'] = new Complex(1, 0);
  Complex['I'] = new Complex(0, 1);
  Complex['PI'] = new Complex(Math.PI, 0);
  Complex['E'] = new Complex(Math.E, 0);
  Complex['EPSILON'] = 1e-16;

  if (typeof define === 'function' && define['amd']) {
    define([], function () {
      return Complex;
    });
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    module['exports'] = Complex;
  } else {
    root['Complex'] = Complex;
  }
})(void 0);

},{}],40:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! decimal.js v9.0.1 https://github.com/MikeMcl/decimal.js/LICENCE */
;

(function (globalScope) {
  'use strict';
  /*
   *  decimal.js v9.0.1
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   */
  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //
  // The maximum exponent magnitude.
  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.

  var EXP_LIMIT = 9e15,
      // 0 to 9e15
  // The limit on the value of `precision`, and on the value of the first argument to
  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
  MAX_DIGITS = 1e9,
      // 0 to 1e9
  // Base conversion alphabet.
  NUMERALS = '0123456789abcdef',
      // The natural logarithm of 10 (1025 digits).
  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',
      // Pi (1025 digits).
  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',
      // The initial configuration properties of the Decimal constructor.
  DEFAULTS = {
    // These values must be integers within the stated ranges (inclusive).
    // Most of these values can be changed at run-time using the `Decimal.config` method.
    // The maximum number of significant digits of the result of a calculation or base conversion.
    // E.g. `Decimal.config({ precision: 20 });`
    precision: 20,
    // 1 to MAX_DIGITS
    // The rounding mode used when rounding to `precision`.
    //
    // ROUND_UP         0 Away from zero.
    // ROUND_DOWN       1 Towards zero.
    // ROUND_CEIL       2 Towards +Infinity.
    // ROUND_FLOOR      3 Towards -Infinity.
    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    //
    // E.g.
    // `Decimal.rounding = 4;`
    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
    rounding: 4,
    // 0 to 8
    // The modulo mode used when calculating the modulus: a mod n.
    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    // The remainder (r) is calculated as: r = a - n * q.
    //
    // UP         0 The remainder is positive if the dividend is negative, else is negative.
    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
    // FLOOR      3 The remainder has the same sign as the divisor (Python %).
    // HALF_EVEN  6 The IEEE 754 remainder function.
    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
    //
    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
    // division (9) are commonly used for the modulus operation. The other rounding modes can also
    // be used, but they may not give useful results.
    modulo: 1,
    // 0 to 9
    // The exponent value at and beneath which `toString` returns exponential notation.
    // JavaScript numbers: -7
    toExpNeg: -7,
    // 0 to -EXP_LIMIT
    // The exponent value at and above which `toString` returns exponential notation.
    // JavaScript numbers: 21
    toExpPos: 21,
    // 0 to EXP_LIMIT
    // The minimum exponent value, beneath which underflow to zero occurs.
    // JavaScript numbers: -324  (5e-324)
    minE: -EXP_LIMIT,
    // -1 to -EXP_LIMIT
    // The maximum exponent value, above which overflow to Infinity occurs.
    // JavaScript numbers: 308  (1.7976931348623157e+308)
    maxE: EXP_LIMIT,
    // 1 to EXP_LIMIT
    // Whether to use cryptographically-secure random number generation, if available.
    crypto: false // true/false

  },
      // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //
  Decimal,
      inexact,
      noConflict,
      quadrant,
      external = true,
      decimalError = '[DecimalError] ',
      invalidArgument = decimalError + 'Invalid argument: ',
      precisionLimitExceeded = decimalError + 'Precision limit exceeded',
      cryptoUnavailable = decimalError + 'crypto unavailable',
      mathfloor = Math.floor,
      mathpow = Math.pow,
      isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
      isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
      isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
      isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
      BASE = 1e7,
      LOG_BASE = 7,
      MAX_SAFE_INTEGER = 9007199254740991,
      LN10_PRECISION = LN10.length - 1,
      PI_PRECISION = PI.length - 1,
      // Decimal.prototype object
  P = {
    name: '[object Decimal]'
  }; // Decimal prototype methods

  /*
   *  absoluteValue             abs
   *  ceil
   *  comparedTo                cmp
   *  cosine                    cos
   *  cubeRoot                  cbrt
   *  decimalPlaces             dp
   *  dividedBy                 div
   *  dividedToIntegerBy        divToInt
   *  equals                    eq
   *  floor
   *  greaterThan               gt
   *  greaterThanOrEqualTo      gte
   *  hyperbolicCosine          cosh
   *  hyperbolicSine            sinh
   *  hyperbolicTangent         tanh
   *  inverseCosine             acos
   *  inverseHyperbolicCosine   acosh
   *  inverseHyperbolicSine     asinh
   *  inverseHyperbolicTangent  atanh
   *  inverseSine               asin
   *  inverseTangent            atan
   *  isFinite
   *  isInteger                 isInt
   *  isNaN
   *  isNegative                isNeg
   *  isPositive                isPos
   *  isZero
   *  lessThan                  lt
   *  lessThanOrEqualTo         lte
   *  logarithm                 log
   *  [maximum]                 [max]
   *  [minimum]                 [min]
   *  minus                     sub
   *  modulo                    mod
   *  naturalExponential        exp
   *  naturalLogarithm          ln
   *  negated                   neg
   *  plus                      add
   *  precision                 sd
   *  round
   *  sine                      sin
   *  squareRoot                sqrt
   *  tangent                   tan
   *  times                     mul
   *  toBinary
   *  toDecimalPlaces           toDP
   *  toExponential
   *  toFixed
   *  toFraction
   *  toHexadecimal             toHex
   *  toNearest
   *  toNumber
   *  toOctal
   *  toPower                   pow
   *  toPrecision
   *  toSignificantDigits       toSD
   *  toString
   *  truncated                 trunc
   *  valueOf                   toJSON
   */

  /*
   * Return a new Decimal whose value is the absolute value of this Decimal.
   *
   */

  P.absoluteValue = P.abs = function () {
    var x = new this.constructor(this);
    if (x.s < 0) x.s = 1;
    return finalise(x);
  };
  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of positive Infinity.
   *
   */


  P.ceil = function () {
    return finalise(new this.constructor(this), this.e + 1, 2);
  };
  /*
   * Return
   *   1    if the value of this Decimal is greater than the value of `y`,
   *  -1    if the value of this Decimal is less than the value of `y`,
   *   0    if they have the same value,
   *   NaN  if the value of either Decimal is NaN.
   *
   */


  P.comparedTo = P.cmp = function (y) {
    var i,
        j,
        xdL,
        ydL,
        x = this,
        xd = x.d,
        yd = (y = new x.constructor(y)).d,
        xs = x.s,
        ys = y.s; // Either NaN or ±Infinity?

    if (!xd || !yd) {
      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
    } // Either zero?


    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0; // Signs differ?

    if (xs !== ys) return xs; // Compare exponents.

    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;
    xdL = xd.length;
    ydL = yd.length; // Compare digit by digit.

    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
    } // Compare lengths.


    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
  };
  /*
   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * cos(0)         = 1
   * cos(-0)        = 1
   * cos(Infinity)  = NaN
   * cos(-Infinity) = NaN
   * cos(NaN)       = NaN
   *
   */


  P.cosine = P.cos = function () {
    var pr,
        rm,
        x = this,
        Ctor = x.constructor;
    if (!x.d) return new Ctor(NaN); // cos(0) = cos(-0) = 1

    if (!x.d[0]) return new Ctor(1);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;
    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
  };
  /*
   *
   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   *  cbrt(0)  =  0
   *  cbrt(-0) = -0
   *  cbrt(1)  =  1
   *  cbrt(-1) = -1
   *  cbrt(N)  =  N
   *  cbrt(-I) = -I
   *  cbrt(I)  =  I
   *
   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
   *
   */


  P.cubeRoot = P.cbrt = function () {
    var e,
        m,
        n,
        r,
        rep,
        s,
        sd,
        t,
        t3,
        t3plusx,
        x = this,
        Ctor = x.constructor;
    if (!x.isFinite() || x.isZero()) return new Ctor(x);
    external = false; // Initial estimate.

    s = x.s * Math.pow(x.s * x, 1 / 3); // Math.cbrt underflow/overflow?
    // Pass x to Math.pow as integer, then adjust the exponent of the result.

    if (!s || Math.abs(s) == 1 / 0) {
      n = digitsToString(x.d);
      e = x.e; // Adjust n exponent so it is a multiple of 3 away from x exponent.

      if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? '0' : '00';
      s = Math.pow(n, 1 / 3); // Rarely, e may be one less than the result exponent value.

      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
      r.s = x.s;
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3; // Halley's method.
    // TODO? Compare Newton's method.

    for (;;) {
      t = r;
      t3 = t.times(t).times(t);
      t3plusx = t3.plus(x);
      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1); // TODO? Replace with for-loop and checkRoundingDigits.

      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
        // , i.e. approaching a rounding boundary, continue the iteration.

        if (n == '9999' || !rep && n == '4999') {
          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {
          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;
    return finalise(r, e, Ctor.rounding, m);
  };
  /*
   * Return the number of decimal places of the value of this Decimal.
   *
   */


  P.decimalPlaces = P.dp = function () {
    var w,
        d = this.d,
        n = NaN;

    if (d) {
      w = d.length - 1;
      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last word.

      w = d[w];
      if (w) for (; w % 10 == 0; w /= 10) {
        n--;
      }
      if (n < 0) n = 0;
    }

    return n;
  };
  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   */


  P.dividedBy = P.div = function (y) {
    return divide(this, new this.constructor(y));
  };
  /*
   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */


  P.dividedToIntegerBy = P.divToInt = function (y) {
    var x = this,
        Ctor = x.constructor;
    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
  };
  /*
   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
   *
   */


  P.equals = P.eq = function (y) {
    return this.cmp(y) === 0;
  };
  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of negative Infinity.
   *
   */


  P.floor = function () {
    return finalise(new this.constructor(this), this.e + 1, 3);
  };
  /*
   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
   * false.
   *
   */


  P.greaterThan = P.gt = function (y) {
    return this.cmp(y) > 0;
  };
  /*
   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
   * otherwise return false.
   *
   */


  P.greaterThanOrEqualTo = P.gte = function (y) {
    var k = this.cmp(y);
    return k == 1 || k === 0;
  };
  /*
   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [1, Infinity]
   *
   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
   *
   * cosh(0)         = 1
   * cosh(-0)        = 1
   * cosh(Infinity)  = Infinity
   * cosh(-Infinity) = Infinity
   * cosh(NaN)       = NaN
   *
   *  x        time taken (ms)   result
   * 1000      9                 9.8503555700852349694e+433
   * 10000     25                4.4034091128314607936e+4342
   * 100000    171               1.4033316802130615897e+43429
   * 1000000   3817              1.5166076984010437725e+434294
   * 10000000  abandoned after 2 minute wait
   *
   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
   *
   */


  P.hyperbolicCosine = P.cosh = function () {
    var k,
        n,
        pr,
        rm,
        len,
        x = this,
        Ctor = x.constructor,
        one = new Ctor(1);
    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
    if (x.isZero()) return one;
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length; // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))
    // Estimate the optimum number of times to use the argument reduction.
    // TODO? Estimation reused from cosine() and may not be optimal here.

    if (len < 32) {
      k = Math.ceil(len / 3);
      n = Math.pow(4, -k).toString();
    } else {
      k = 16;
      n = '2.3283064365386962890625e-10';
    }

    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true); // Reverse argument reduction

    var cosh2_x,
        i = k,
        d8 = new Ctor(8);

    for (; i--;) {
      cosh2_x = x.times(x);
      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
    }

    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
  };
  /*
   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
   *
   * sinh(0)         = 0
   * sinh(-0)        = -0
   * sinh(Infinity)  = Infinity
   * sinh(-Infinity) = -Infinity
   * sinh(NaN)       = NaN
   *
   * x        time taken (ms)
   * 10       2 ms
   * 100      5 ms
   * 1000     14 ms
   * 10000    82 ms
   * 100000   886 ms            1.4033316802130615897e+43429
   * 200000   2613 ms
   * 300000   5407 ms
   * 400000   8824 ms
   * 500000   13026 ms          8.7080643612718084129e+217146
   * 1000000  48543 ms
   *
   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
   *
   */


  P.hyperbolicSine = P.sinh = function () {
    var k,
        pr,
        rm,
        len,
        x = this,
        Ctor = x.constructor;
    if (!x.isFinite() || x.isZero()) return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    if (len < 3) {
      x = taylorSeries(Ctor, 2, x, x, true);
    } else {
      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
      // 3 multiplications and 1 addition
      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
      // 4 multiplications and 2 additions
      // Estimate the optimum number of times to use the argument reduction.
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;
      x = x.times(Math.pow(5, -k));
      x = taylorSeries(Ctor, 2, x, x, true); // Reverse argument reduction

      var sinh2_x,
          d5 = new Ctor(5),
          d16 = new Ctor(16),
          d20 = new Ctor(20);

      for (; k--;) {
        sinh2_x = x.times(x);
        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
      }
    }

    Ctor.precision = pr;
    Ctor.rounding = rm;
    return finalise(x, pr, rm, true);
  };
  /*
   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * tanh(x) = sinh(x) / cosh(x)
   *
   * tanh(0)         = 0
   * tanh(-0)        = -0
   * tanh(Infinity)  = 1
   * tanh(-Infinity) = -1
   * tanh(NaN)       = NaN
   *
   */


  P.hyperbolicTangent = P.tanh = function () {
    var pr,
        rm,
        x = this,
        Ctor = x.constructor;
    if (!x.isFinite()) return new Ctor(x.s);
    if (x.isZero()) return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 7;
    Ctor.rounding = 1;
    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
  };
  /*
   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
   * this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [0, pi]
   *
   * acos(x) = pi/2 - asin(x)
   *
   * acos(0)       = pi/2
   * acos(-0)      = pi/2
   * acos(1)       = 0
   * acos(-1)      = pi
   * acos(1/2)     = pi/3
   * acos(-1/2)    = 2*pi/3
   * acos(|x| > 1) = NaN
   * acos(NaN)     = NaN
   *
   */


  P.inverseCosine = P.acos = function () {
    var halfPi,
        x = this,
        Ctor = x.constructor,
        k = x.abs().cmp(1),
        pr = Ctor.precision,
        rm = Ctor.rounding;

    if (k !== -1) {
      return k === 0 // |x| is 1
      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) // |x| > 1 or x is NaN
      : new Ctor(NaN);
    }

    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5); // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;
    x = x.asin();
    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return halfPi.minus(x);
  };
  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
   * value of this Decimal.
   *
   * Domain: [1, Infinity]
   * Range: [0, Infinity]
   *
   * acosh(x) = ln(x + sqrt(x^2 - 1))
   *
   * acosh(x < 1)     = NaN
   * acosh(NaN)       = NaN
   * acosh(Infinity)  = Infinity
   * acosh(-Infinity) = NaN
   * acosh(0)         = NaN
   * acosh(-0)        = NaN
   * acosh(1)         = 0
   * acosh(-1)        = NaN
   *
   */


  P.inverseHyperbolicCosine = P.acosh = function () {
    var pr,
        rm,
        x = this,
        Ctor = x.constructor;
    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
    if (!x.isFinite()) return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
    Ctor.rounding = 1;
    external = false;
    x = x.times(x).minus(1).sqrt().plus(x);
    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return x.ln();
  };
  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * asinh(x) = ln(x + sqrt(x^2 + 1))
   *
   * asinh(NaN)       = NaN
   * asinh(Infinity)  = Infinity
   * asinh(-Infinity) = -Infinity
   * asinh(0)         = 0
   * asinh(-0)        = -0
   *
   */


  P.inverseHyperbolicSine = P.asinh = function () {
    var pr,
        rm,
        x = this,
        Ctor = x.constructor;
    if (!x.isFinite() || x.isZero()) return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
    Ctor.rounding = 1;
    external = false;
    x = x.times(x).plus(1).sqrt().plus(x);
    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return x.ln();
  };
  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
   * value of this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [-Infinity, Infinity]
   *
   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
   *
   * atanh(|x| > 1)   = NaN
   * atanh(NaN)       = NaN
   * atanh(Infinity)  = NaN
   * atanh(-Infinity) = NaN
   * atanh(0)         = 0
   * atanh(-0)        = -0
   * atanh(1)         = Infinity
   * atanh(-1)        = -Infinity
   *
   */


  P.inverseHyperbolicTangent = P.atanh = function () {
    var pr,
        rm,
        wpr,
        xsd,
        x = this,
        Ctor = x.constructor;
    if (!x.isFinite()) return new Ctor(NaN);
    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    xsd = x.sd();
    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);
    Ctor.precision = wpr = xsd - x.e;
    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
    Ctor.precision = pr + 4;
    Ctor.rounding = 1;
    x = x.ln();
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return x.times(0.5);
  };
  /*
   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
   *
   * asin(0)       = 0
   * asin(-0)      = -0
   * asin(1/2)     = pi/6
   * asin(-1/2)    = -pi/6
   * asin(1)       = pi/2
   * asin(-1)      = -pi/2
   * asin(|x| > 1) = NaN
   * asin(NaN)     = NaN
   *
   * TODO? Compare performance of Taylor series.
   *
   */


  P.inverseSine = P.asin = function () {
    var halfPi,
        k,
        pr,
        rm,
        x = this,
        Ctor = x.constructor;
    if (x.isZero()) return new Ctor(x);
    k = x.abs().cmp(1);
    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (k !== -1) {
      // |x| is 1
      if (k === 0) {
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
        halfPi.s = x.s;
        return halfPi;
      } // |x| > 1 or x is NaN


      return new Ctor(NaN);
    } // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6


    Ctor.precision = pr + 6;
    Ctor.rounding = 1;
    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return x.times(2);
  };
  /*
   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
   *
   * atan(0)         = 0
   * atan(-0)        = -0
   * atan(1)         = pi/4
   * atan(-1)        = -pi/4
   * atan(Infinity)  = pi/2
   * atan(-Infinity) = -pi/2
   * atan(NaN)       = NaN
   *
   */


  P.inverseTangent = P.atan = function () {
    var i,
        j,
        k,
        n,
        px,
        t,
        r,
        wpr,
        x2,
        x = this,
        Ctor = x.constructor,
        pr = Ctor.precision,
        rm = Ctor.rounding;

    if (!x.isFinite()) {
      if (!x.s) return new Ctor(NaN);

      if (pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.5);
        r.s = x.s;
        return r;
      }
    } else if (x.isZero()) {
      return new Ctor(x);
    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.25);
      r.s = x.s;
      return r;
    }

    Ctor.precision = wpr = pr + 10;
    Ctor.rounding = 1; // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);
    // Argument reduction
    // Ensure |x| < 0.42
    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

    k = Math.min(28, wpr / LOG_BASE + 2 | 0);

    for (i = k; i; --i) {
      x = x.div(x.times(x).plus(1).sqrt().plus(1));
    }

    external = false;
    j = Math.ceil(wpr / LOG_BASE);
    n = 1;
    x2 = x.times(x);
    r = new Ctor(x);
    px = x; // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...

    for (; i !== -1;) {
      px = px.times(x2);
      t = r.minus(px.div(n += 2));
      px = px.times(x2);
      r = t.plus(px.div(n += 2));
      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;) {
        ;
      }
    }

    if (k) r = r.times(2 << k - 1);
    external = true;
    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
  };
  /*
   * Return true if the value of this Decimal is a finite number, otherwise return false.
   *
   */


  P.isFinite = function () {
    return !!this.d;
  };
  /*
   * Return true if the value of this Decimal is an integer, otherwise return false.
   *
   */


  P.isInteger = P.isInt = function () {
    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
  };
  /*
   * Return true if the value of this Decimal is NaN, otherwise return false.
   *
   */


  P.isNaN = function () {
    return !this.s;
  };
  /*
   * Return true if the value of this Decimal is negative, otherwise return false.
   *
   */


  P.isNegative = P.isNeg = function () {
    return this.s < 0;
  };
  /*
   * Return true if the value of this Decimal is positive, otherwise return false.
   *
   */


  P.isPositive = P.isPos = function () {
    return this.s > 0;
  };
  /*
   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
   *
   */


  P.isZero = function () {
    return !!this.d && this.d[0] === 0;
  };
  /*
   * Return true if the value of this Decimal is less than `y`, otherwise return false.
   *
   */


  P.lessThan = P.lt = function (y) {
    return this.cmp(y) < 0;
  };
  /*
   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
   *
   */


  P.lessThanOrEqualTo = P.lte = function (y) {
    return this.cmp(y) < 1;
  };
  /*
   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * If no base is specified, return log[10](arg).
   *
   * log[base](arg) = ln(arg) / ln(base)
   *
   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
   * otherwise:
   *
   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
   * between the result and the correctly rounded result will be one ulp (unit in the last place).
   *
   * log[-b](a)       = NaN
   * log[0](a)        = NaN
   * log[1](a)        = NaN
   * log[NaN](a)      = NaN
   * log[Infinity](a) = NaN
   * log[b](0)        = -Infinity
   * log[b](-0)       = -Infinity
   * log[b](-a)       = NaN
   * log[b](1)        = 0
   * log[b](Infinity) = Infinity
   * log[b](NaN)      = NaN
   *
   * [base] {number|string|Decimal} The base of the logarithm.
   *
   */


  P.logarithm = P.log = function (base) {
    var isBase10,
        d,
        denominator,
        k,
        inf,
        num,
        sd,
        r,
        arg = this,
        Ctor = arg.constructor,
        pr = Ctor.precision,
        rm = Ctor.rounding,
        guard = 5; // Default base is 10.

    if (base == null) {
      base = new Ctor(10);
      isBase10 = true;
    } else {
      base = new Ctor(base);
      d = base.d; // Return NaN if base is negative, or non-finite, or is 0 or 1.

      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);
      isBase10 = base.eq(10);
    }

    d = arg.d; // Is arg negative, non-finite, 0 or 1?

    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
    } // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
    // integer power of 10.


    if (isBase10) {
      if (d.length > 1) {
        inf = true;
      } else {
        for (k = d[0]; k % 10 === 0;) {
          k /= 10;
        }

        inf = k !== 1;
      }
    }

    external = false;
    sd = pr + guard;
    num = naturalLogarithm(arg, sd);
    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd); // The result will have 5 rounding digits.

    r = divide(num, denominator, sd, 1); // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
    // calculate 10 further digits.
    //
    // If the result is known to have an infinite decimal expansion, repeat this until it is clear
    // that the result is above or below the boundary. Otherwise, if after calculating the 10
    // further digits, the last 14 are nines, round up and assume the result is exact.
    // Also assume the result is exact if the last 14 are zero.
    //
    // Example of a result that will be incorrectly rounded:
    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
    // place is still 2.6.

    if (checkRoundingDigits(r.d, k = pr, rm)) {
      do {
        sd += 10;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
        r = divide(num, denominator, sd, 1);

        if (!inf) {
          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }

          break;
        }
      } while (checkRoundingDigits(r.d, k += 10, rm));
    }

    external = true;
    return finalise(r, pr, rm);
  };
  /*
   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.max = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'lt');
  };
   */

  /*
   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.min = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'gt');
  };
   */

  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */


  P.minus = P.sub = function (y) {
    var d,
        e,
        i,
        j,
        k,
        len,
        pr,
        rm,
        xd,
        xe,
        xLTy,
        yd,
        x = this,
        Ctor = x.constructor;
    y = new Ctor(y); // If either is not finite...

    if (!x.d || !y.d) {
      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN); // Return y negated if x is finite and y is ±Infinity.
      else if (x.d) y.s = -y.s; // Return x if y is finite and x is ±Infinity.
        // Return x if both are ±Infinity with different signs.
        // Return NaN if both are ±Infinity with the same sign.
        else y = new Ctor(y.d || x.s !== y.s ? x : NaN);
      return y;
    } // If signs differ...


    if (x.s != y.s) {
      y.s = -y.s;
      return x.plus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding; // If either is zero...

    if (!xd[0] || !yd[0]) {
      // Return y negated if x is zero and y is non-zero.
      if (yd[0]) y.s = -y.s; // Return x if y is zero and x is non-zero.
      else if (xd[0]) y = new Ctor(x); // Return zero if both are zero.
        // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
        else return new Ctor(rm === 3 ? -0 : 0);
      return external ? finalise(y, pr, rm) : y;
    } // x and y are finite, non-zero numbers with the same sign.
    // Calculate base 1e7 exponents.


    e = mathfloor(y.e / LOG_BASE);
    xe = mathfloor(x.e / LOG_BASE);
    xd = xd.slice();
    k = xe - e; // If base 1e7 exponents differ...

    if (k) {
      xLTy = k < 0;

      if (xLTy) {
        d = xd;
        k = -k;
        len = yd.length;
      } else {
        d = yd;
        e = xe;
        len = xd.length;
      } // Numbers with massively different exponents would result in a very high number of
      // zeros needing to be prepended, but this can be avoided while still ensuring correct
      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.


      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

      if (k > i) {
        k = i;
        d.length = 1;
      } // Prepend zeros to equalise exponents.


      d.reverse();

      for (i = k; i--;) {
        d.push(0);
      }

      d.reverse(); // Base 1e7 exponents equal.
    } else {
      // Check digits to determine which is the bigger number.
      i = xd.length;
      len = yd.length;
      xLTy = i < len;
      if (xLTy) len = i;

      for (i = 0; i < len; i++) {
        if (xd[i] != yd[i]) {
          xLTy = xd[i] < yd[i];
          break;
        }
      }

      k = 0;
    }

    if (xLTy) {
      d = xd;
      xd = yd;
      yd = d;
      y.s = -y.s;
    }

    len = xd.length; // Append zeros to `xd` if shorter.
    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.

    for (i = yd.length - len; i > 0; --i) {
      xd[len++] = 0;
    } // Subtract yd from xd.


    for (i = yd.length; i > k;) {
      if (xd[--i] < yd[i]) {
        for (j = i; j && xd[--j] === 0;) {
          xd[j] = BASE - 1;
        }

        --xd[j];
        xd[i] += BASE;
      }

      xd[i] -= yd[i];
    } // Remove trailing zeros.


    for (; xd[--len] === 0;) {
      xd.pop();
    } // Remove leading zeros and adjust exponent accordingly.


    for (; xd[0] === 0; xd.shift()) {
      --e;
    } // Zero?


    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);
    y.d = xd;
    y.e = getBase10Exponent(xd, e);
    return external ? finalise(y, pr, rm) : y;
  };
  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * The result depends on the modulo mode.
   *
   */


  P.modulo = P.mod = function (y) {
    var q,
        x = this,
        Ctor = x.constructor;
    y = new Ctor(y); // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.

    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN); // Return x if y is ±Infinity or x is ±0.

    if (!y.d || x.d && !x.d[0]) {
      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
    } // Prevent rounding of intermediate calculations.


    external = false;

    if (Ctor.modulo == 9) {
      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // result = x - q * y    where  0 <= result < abs(y)
      q = divide(x, y.abs(), 0, 3, 1);
      q.s *= y.s;
    } else {
      q = divide(x, y, 0, Ctor.modulo, 1);
    }

    q = q.times(y);
    external = true;
    return x.minus(q);
  };
  /*
   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */


  P.naturalExponential = P.exp = function () {
    return naturalExponential(this);
  };
  /*
   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */


  P.naturalLogarithm = P.ln = function () {
    return naturalLogarithm(this);
  };
  /*
   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
   * -1.
   *
   */


  P.negated = P.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return finalise(x);
  };
  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */


  P.plus = P.add = function (y) {
    var carry,
        d,
        e,
        i,
        k,
        len,
        pr,
        rm,
        xd,
        yd,
        x = this,
        Ctor = x.constructor;
    y = new Ctor(y); // If either is not finite...

    if (!x.d || !y.d) {
      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN); // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with the same sign.
      // Return NaN if both are ±Infinity with different signs.
      // Return y if x is finite and y is ±Infinity.
      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);
      return y;
    } // If signs differ...


    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding; // If either is zero...

    if (!xd[0] || !yd[0]) {
      // Return x if y is zero.
      // Return y if y is non-zero.
      if (!yd[0]) y = new Ctor(x);
      return external ? finalise(y, pr, rm) : y;
    } // x and y are finite, non-zero numbers with the same sign.
    // Calculate base 1e7 exponents.


    k = mathfloor(x.e / LOG_BASE);
    e = mathfloor(y.e / LOG_BASE);
    xd = xd.slice();
    i = k - e; // If base 1e7 exponents differ...

    if (i) {
      if (i < 0) {
        d = xd;
        i = -i;
        len = yd.length;
      } else {
        d = yd;
        e = k;
        len = xd.length;
      } // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.


      k = Math.ceil(pr / LOG_BASE);
      len = k > len ? k + 1 : len + 1;

      if (i > len) {
        i = len;
        d.length = 1;
      } // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.


      d.reverse();

      for (; i--;) {
        d.push(0);
      }

      d.reverse();
    }

    len = xd.length;
    i = yd.length; // If yd is longer than xd, swap xd and yd so xd points to the longer array.

    if (len - i < 0) {
      i = len;
      d = yd;
      yd = xd;
      xd = d;
    } // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.


    for (carry = 0; i;) {
      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
      xd[i] %= BASE;
    }

    if (carry) {
      xd.unshift(carry);
      ++e;
    } // Remove trailing zeros.
    // No need to check for zero, as +x + +y != 0 && -x + -y != 0


    for (len = xd.length; xd[--len] == 0;) {
      xd.pop();
    }

    y.d = xd;
    y.e = getBase10Exponent(xd, e);
    return external ? finalise(y, pr, rm) : y;
  };
  /*
   * Return the number of significant digits of the value of this Decimal.
   *
   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
   *
   */


  P.precision = P.sd = function (z) {
    var k,
        x = this;
    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

    if (x.d) {
      k = getPrecision(x.d);
      if (z && x.e + 1 > k) k = x.e + 1;
    } else {
      k = NaN;
    }

    return k;
  };
  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
   * rounding mode `rounding`.
   *
   */


  P.round = function () {
    var x = this,
        Ctor = x.constructor;
    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
  };
  /*
   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * sin(x) = x - x^3/3! + x^5/5! - ...
   *
   * sin(0)         = 0
   * sin(-0)        = -0
   * sin(Infinity)  = NaN
   * sin(-Infinity) = NaN
   * sin(NaN)       = NaN
   *
   */


  P.sine = P.sin = function () {
    var pr,
        rm,
        x = this,
        Ctor = x.constructor;
    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;
    x = sine(Ctor, toLessThanHalfPi(Ctor, x));
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
  };
  /*
   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   *  sqrt(-n) =  N
   *  sqrt(N)  =  N
   *  sqrt(-I) =  N
   *  sqrt(I)  =  I
   *  sqrt(0)  =  0
   *  sqrt(-0) = -0
   *
   */


  P.squareRoot = P.sqrt = function () {
    var m,
        n,
        sd,
        r,
        rep,
        t,
        x = this,
        d = x.d,
        e = x.e,
        s = x.s,
        Ctor = x.constructor; // Negative/NaN/Infinity/zero?

    if (s !== 1 || !d || !d[0]) {
      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
    }

    external = false; // Initial estimate.

    s = Math.sqrt(+x); // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.

    if (s == 0 || s == 1 / 0) {
      n = digitsToString(d);
      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(n);
      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '1e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3; // Newton-Raphson iteration.

    for (;;) {
      t = r;
      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5); // TODO? Replace with for-loop and checkRoundingDigits.

      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
        // 4999, i.e. approaching a rounding boundary, continue the iteration.

        if (n == '9999' || !rep && n == '4999') {
          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {
          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;
    return finalise(r, e, Ctor.rounding, m);
  };
  /*
   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * tan(0)         = 0
   * tan(-0)        = -0
   * tan(Infinity)  = NaN
   * tan(-Infinity) = NaN
   * tan(NaN)       = NaN
   *
   */


  P.tangent = P.tan = function () {
    var pr,
        rm,
        x = this,
        Ctor = x.constructor;
    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);
    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 10;
    Ctor.rounding = 1;
    x = x.sin();
    x.s = 1;
    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
    Ctor.precision = pr;
    Ctor.rounding = rm;
    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
  };
  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   */


  P.times = P.mul = function (y) {
    var carry,
        e,
        i,
        k,
        r,
        rL,
        t,
        xdL,
        ydL,
        x = this,
        Ctor = x.constructor,
        xd = x.d,
        yd = (y = new Ctor(y)).d;
    y.s *= x.s; // If either is NaN, ±Infinity or ±0...

    if (!xd || !xd[0] || !yd || !yd[0]) {
      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd // Return NaN if either is NaN.
      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
      ? NaN // Return ±Infinity if either is ±Infinity.
      // Return ±0 if either is ±0.
      : !xd || !yd ? y.s / 0 : y.s * 0);
    }

    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
    xdL = xd.length;
    ydL = yd.length; // Ensure xd points to the longer array.

    if (xdL < ydL) {
      r = xd;
      xd = yd;
      yd = r;
      rL = xdL;
      xdL = ydL;
      ydL = rL;
    } // Initialise the result array with zeros.


    r = [];
    rL = xdL + ydL;

    for (i = rL; i--;) {
      r.push(0);
    } // Multiply!


    for (i = ydL; --i >= 0;) {
      carry = 0;

      for (k = xdL + i; k > i;) {
        t = r[k] + yd[i] * xd[k - i - 1] + carry;
        r[k--] = t % BASE | 0;
        carry = t / BASE | 0;
      }

      r[k] = (r[k] + carry) % BASE | 0;
    } // Remove trailing zeros.


    for (; !r[--rL];) {
      r.pop();
    }

    if (carry) ++e;else r.shift();
    y.d = r;
    y.e = getBase10Exponent(r, e);
    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
  };
  /*
   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */


  P.toBinary = function (sd, rm) {
    return toStringBinary(this, 2, sd, rm);
  };
  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
   *
   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */


  P.toDecimalPlaces = P.toDP = function (dp, rm) {
    var x = this,
        Ctor = x.constructor;
    x = new Ctor(x);
    if (dp === void 0) return x;
    checkInt32(dp, 0, MAX_DIGITS);
    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
    return finalise(x, dp + x.e + 1, rm);
  };
  /*
   * Return a string representing the value of this Decimal in exponential notation rounded to
   * `dp` fixed decimal places using rounding mode `rounding`.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */


  P.toExponential = function (dp, rm) {
    var str,
        x = this,
        Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x, true);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
      x = finalise(new Ctor(x), dp + 1, rm);
      str = finiteToString(x, true, dp + 1);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };
  /*
   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
   * omitted.
   *
   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   * (-0).toFixed(3) is '0.000'.
   * (-0.5).toFixed(0) is '-0'.
   *
   */


  P.toFixed = function (dp, rm) {
    var str,
        y,
        x = this,
        Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
      y = finalise(new Ctor(x), dp + x.e + 1, rm);
      str = finiteToString(y, false, dp + y.e + 1);
    } // To determine whether to add the minus sign look at the value before it was rounded,
    // i.e. look at `x` rather than `y`.


    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };
  /*
   * Return an array representing the value of this Decimal as a simple fraction with an integer
   * numerator and an integer denominator.
   *
   * The denominator will be a positive non-zero value less than or equal to the specified maximum
   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
   * value necessary to represent the number exactly.
   *
   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
   *
   */


  P.toFraction = function (maxD) {
    var d,
        d0,
        d1,
        d2,
        e,
        k,
        n,
        n0,
        n1,
        pr,
        q,
        r,
        x = this,
        xd = x.d,
        Ctor = x.constructor;
    if (!xd) return new Ctor(x);
    n1 = d0 = new Ctor(1);
    d1 = n0 = new Ctor(0);
    d = new Ctor(d1);
    e = d.e = getPrecision(xd) - x.e - 1;
    k = e % LOG_BASE;
    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

    if (maxD == null) {
      // d is 10**e, the minimum max-denominator needed.
      maxD = e > 0 ? d : n1;
    } else {
      n = new Ctor(maxD);
      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
      maxD = n.gt(d) ? e > 0 ? d : n1 : n;
    }

    external = false;
    n = new Ctor(digitsToString(xd));
    pr = Ctor.precision;
    Ctor.precision = e = xd.length * LOG_BASE * 2;

    for (;;) {
      q = divide(n, d, 0, 1, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.cmp(maxD) == 1) break;
      d0 = d1;
      d1 = d2;
      d2 = n1;
      n1 = n0.plus(q.times(d2));
      n0 = d2;
      d2 = d;
      d = n.minus(q.times(d2));
      n = d2;
    }

    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s; // Determine which fraction is closer to x, n0/d0 or n1/d1?

    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
    Ctor.precision = pr;
    external = true;
    return r;
  };
  /*
   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */


  P.toHexadecimal = P.toHex = function (sd, rm) {
    return toStringBinary(this, 16, sd, rm);
  };
  /*
   * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value
   * of this Decimal.
   *
   * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,
   * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.
   *
   * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0
   * (ROUND_UP), and so on.
   *
   * The return value will always have the same sign as this Decimal, unless either this Decimal
   * or `y` is NaN, in which case the return value will be also be NaN.
   *
   * The return value is not affected by the value of `precision`.
   *
   * y {number|string|Decimal} The magnitude to round to a multiple of.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toNearest() rounding mode not an integer: {rm}'
   * 'toNearest() rounding mode out of range: {rm}'
   *
   */


  P.toNearest = function (y, rm) {
    var x = this,
        Ctor = x.constructor;
    x = new Ctor(x);

    if (y == null) {
      // If x is not finite, return x.
      if (!x.d) return x;
      y = new Ctor(1);
      rm = Ctor.rounding;
    } else {
      y = new Ctor(y);
      if (rm !== void 0) checkInt32(rm, 0, 8); // If x is not finite, return x if y is not NaN, else NaN.

      if (!x.d) return y.s ? x : y; // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.

      if (!y.d) {
        if (y.s) y.s = x.s;
        return y;
      }
    } // If y is not zero, calculate the nearest multiple of y to x.


    if (y.d[0]) {
      external = false;
      if (rm < 4) rm = [4, 5, 7, 8][rm];
      x = divide(x, y, 0, rm, 1).times(y);
      external = true;
      finalise(x); // If y is zero, return zero with the sign of x.
    } else {
      y.s = x.s;
      x = y;
    }

    return x;
  };
  /*
   * Return the value of this Decimal converted to a number primitive.
   * Zero keeps its sign.
   *
   */


  P.toNumber = function () {
    return +this;
  };
  /*
   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */


  P.toOctal = function (sd, rm) {
    return toStringBinary(this, 8, sd, rm);
  };
  /*
   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
   * to `precision` significant digits using rounding mode `rounding`.
   *
   * ECMAScript compliant.
   *
   *   pow(x, NaN)                           = NaN
   *   pow(x, ±0)                            = 1
     *   pow(NaN, non-zero)                    = NaN
   *   pow(abs(x) > 1, +Infinity)            = +Infinity
   *   pow(abs(x) > 1, -Infinity)            = +0
   *   pow(abs(x) == 1, ±Infinity)           = NaN
   *   pow(abs(x) < 1, +Infinity)            = +0
   *   pow(abs(x) < 1, -Infinity)            = +Infinity
   *   pow(+Infinity, y > 0)                 = +Infinity
   *   pow(+Infinity, y < 0)                 = +0
   *   pow(-Infinity, odd integer > 0)       = -Infinity
   *   pow(-Infinity, even integer > 0)      = +Infinity
   *   pow(-Infinity, odd integer < 0)       = -0
   *   pow(-Infinity, even integer < 0)      = +0
   *   pow(+0, y > 0)                        = +0
   *   pow(+0, y < 0)                        = +Infinity
   *   pow(-0, odd integer > 0)              = -0
   *   pow(-0, even integer > 0)             = +0
   *   pow(-0, odd integer < 0)              = -Infinity
   *   pow(-0, even integer < 0)             = +Infinity
   *   pow(finite x < 0, finite non-integer) = NaN
   *
   * For non-integer or very large exponents pow(x, y) is calculated using
   *
   *   x^y = exp(y*ln(x))
   *
   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
   * probability of an incorrectly rounded result
   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
   * i.e. 1 in 250,000,000,000,000
   *
   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
   *
   * y {number|string|Decimal} The power to which to raise this Decimal.
   *
   */


  P.toPower = P.pow = function (y) {
    var e,
        k,
        pr,
        r,
        rm,
        s,
        x = this,
        Ctor = x.constructor,
        yn = +(y = new Ctor(y)); // Either ±Infinity, NaN or ±0?

    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));
    x = new Ctor(x);
    if (x.eq(1)) return x;
    pr = Ctor.precision;
    rm = Ctor.rounding;
    if (y.eq(1)) return finalise(x, pr, rm); // y exponent

    e = mathfloor(y.e / LOG_BASE); // If y is a small integer use the 'exponentiation by squaring' algorithm.

    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
      r = intPow(Ctor, x, k, pr);
      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
    }

    s = x.s; // if x is negative

    if (s < 0) {
      // if y is not an integer
      if (e < y.d.length - 1) return new Ctor(NaN); // Result is positive if x is negative and the last digit of integer y is even.

      if ((y.d[e] & 1) == 0) s = 1; // if x.eq(-1)

      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
        x.s = s;
        return x;
      }
    } // Estimate result exponent.
    // x^y = 10^e,  where e = y * log10(x)
    // log10(x) = log10(x_significand) + x_exponent
    // log10(x_significand) = ln(x_significand) / ln(10)


    k = mathpow(+x, yn);
    e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e; // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.
    // Overflow/underflow?

    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);
    external = false;
    Ctor.rounding = x.s = 1; // Estimate the extra guard digits needed to ensure five correct rounding digits from
    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
    // new Decimal(2.32456).pow('2087987436534566.46411')
    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815

    k = Math.min(12, (e + '').length); // r = x^y = exp(y*ln(x))

    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr); // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)

    if (r.d) {
      // Truncate to the required precision plus five rounding digits.
      r = finalise(r, pr + 5, 1); // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
      // the result.

      if (checkRoundingDigits(r.d, pr, rm)) {
        e = pr + 10; // Truncate to the increased precision plus five rounding digits.

        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1); // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).

        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
      }
    }

    r.s = s;
    external = true;
    Ctor.rounding = rm;
    return finalise(r, pr, rm);
  };
  /*
   * Return a string representing the value of this Decimal rounded to `sd` significant digits
   * using rounding mode `rounding`.
   *
   * Return exponential notation if `sd` is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */


  P.toPrecision = function (sd, rm) {
    var str,
        x = this,
        Ctor = x.constructor;

    if (sd === void 0) {
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    } else {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
      x = finalise(new Ctor(x), sd, rm);
      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };
  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
   * omitted.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toSD() digits out of range: {sd}'
   * 'toSD() digits not an integer: {sd}'
   * 'toSD() rounding mode not an integer: {rm}'
   * 'toSD() rounding mode out of range: {rm}'
   *
   */


  P.toSignificantDigits = P.toSD = function (sd, rm) {
    var x = this,
        Ctor = x.constructor;

    if (sd === void 0) {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    } else {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
    }

    return finalise(new Ctor(x), sd, rm);
  };
  /*
   * Return a string representing the value of this Decimal.
   *
   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
   *
   */


  P.toString = function () {
    var x = this,
        Ctor = x.constructor,
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };
  /*
   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
   *
   */


  P.truncated = P.trunc = function () {
    return finalise(new this.constructor(this), this.e + 1, 1);
  };
  /*
   * Return a string representing the value of this Decimal.
   * Unlike `toString`, negative zero will include the minus sign.
   *
   */


  P.valueOf = P.toJSON = function () {
    var x = this,
        Ctor = x.constructor,
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    return x.isNeg() ? '-' + str : str;
  };
  /*
  // Add aliases to match BigDecimal method names.
  // P.add = P.plus;
  P.subtract = P.minus;
  P.multiply = P.times;
  P.divide = P.div;
  P.remainder = P.mod;
  P.compareTo = P.cmp;
  P.negate = P.neg;
   */
  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.

  /*
   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
   *                           finiteToString, naturalExponential, naturalLogarithm
   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
   *  convertBase              toStringBinary, parseOther
   *  cos                      P.cos
   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
   *                           taylorSeries, atan2, parseOther
   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
   *                           naturalLogarithm, ceil, floor, round, trunc
   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
   *                           toStringBinary
   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
   *  getLn10                  P.logarithm, naturalLogarithm
   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
   *  getPrecision             P.precision, P.toFraction
   *  getZeroString            digitsToString, finiteToString
   *  intPow                   P.toPower, parseOther
   *  isOdd                    toLessThanHalfPi
   *  maxOrMin                 max, min
   *  naturalExponential       P.naturalExponential, P.toPower
   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
   *                           P.toPower, naturalExponential
   *  nonFiniteToString        finiteToString, toStringBinary
   *  parseDecimal             Decimal
   *  parseOther               Decimal
   *  sin                      P.sin
   *  taylorSeries             P.cosh, P.sinh, cos, sin
   *  toLessThanHalfPi         P.cos, P.sin
   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
   *  truncate                 intPow
   *
   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
   *                           naturalLogarithm, config, parseOther, random, Decimal
   */


  function digitsToString(d) {
    var i,
        k,
        ws,
        indexOfLastWord = d.length - 1,
        str = '',
        w = d[0];

    if (indexOfLastWord > 0) {
      str += w;

      for (i = 1; i < indexOfLastWord; i++) {
        ws = d[i] + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
        str += ws;
      }

      w = d[i];
      ws = w + '';
      k = LOG_BASE - ws.length;
      if (k) str += getZeroString(k);
    } else if (w === 0) {
      return '0';
    } // Remove trailing zeros of last w.


    for (; w % 10 === 0;) {
      w /= 10;
    }

    return str + w;
  }

  function checkInt32(i, min, max) {
    if (i !== ~~i || i < min || i > max) {
      throw Error(invalidArgument + i);
    }
  }
  /*
   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
   * `repeating == null` if caller is `log` or `pow`,
   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
   */


  function checkRoundingDigits(d, i, rm, repeating) {
    var di, k, r, rd; // Get the length of the first word of the array d.

    for (k = d[0]; k >= 10; k /= 10) {
      --i;
    } // Is the rounding digit in the first word of d?


    if (--i < 0) {
      i += LOG_BASE;
      di = 0;
    } else {
      di = Math.ceil((i + 1) / LOG_BASE);
      i %= LOG_BASE;
    } // i is the index (0 - 6) of the rounding digit.
    // E.g. if within the word 3487563 the first rounding digit is 5,
    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563


    k = mathpow(10, LOG_BASE - i);
    rd = d[di] % k | 0;

    if (repeating == null) {
      if (i < 3) {
        if (i == 0) rd = rd / 100 | 0;else if (i == 1) rd = rd / 10 | 0;
        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
      } else {
        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
      }
    } else {
      if (i < 4) {
        if (i == 0) rd = rd / 1000 | 0;else if (i == 1) rd = rd / 100 | 0;else if (i == 2) rd = rd / 10 | 0;
        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
      } else {
        r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
      }
    }

    return r;
  } // Convert string of `baseIn` to an array of numbers of `baseOut`.
  // Eg. convertBase('255', 10, 16) returns [15, 15].
  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].


  function convertBase(str, baseIn, baseOut) {
    var j,
        arr = [0],
        arrL,
        i = 0,
        strL = str.length;

    for (; i < strL;) {
      for (arrL = arr.length; arrL--;) {
        arr[arrL] *= baseIn;
      }

      arr[0] += NUMERALS.indexOf(str.charAt(i++));

      for (j = 0; j < arr.length; j++) {
        if (arr[j] > baseOut - 1) {
          if (arr[j + 1] === void 0) arr[j + 1] = 0;
          arr[j + 1] += arr[j] / baseOut | 0;
          arr[j] %= baseOut;
        }
      }
    }

    return arr.reverse();
  }
  /*
   * cos(x) = 1 - x^2/2! + x^4/4! - ...
   * |x| < pi/2
   *
   */


  function cosine(Ctor, x) {
    var k,
        y,
        len = x.d.length; // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1
    // Estimate the optimum number of times to use the argument reduction.

    if (len < 32) {
      k = Math.ceil(len / 3);
      y = Math.pow(4, -k).toString();
    } else {
      k = 16;
      y = '2.3283064365386962890625e-10';
    }

    Ctor.precision += k;
    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1)); // Reverse argument reduction

    for (var i = k; i--;) {
      var cos2x = x.times(x);
      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
    }

    Ctor.precision -= k;
    return x;
  }
  /*
   * Perform division in the specified base.
   */


  var divide = function () {
    // Assumes non-zero x and k, and hence non-zero result.
    function multiplyInteger(x, k, base) {
      var temp,
          carry = 0,
          i = x.length;

      for (x = x.slice(); i--;) {
        temp = x[i] * k + carry;
        x[i] = temp % base | 0;
        carry = temp / base | 0;
      }

      if (carry) x.unshift(carry);
      return x;
    }

    function compare(a, b, aL, bL) {
      var i, r;

      if (aL != bL) {
        r = aL > bL ? 1 : -1;
      } else {
        for (i = r = 0; i < aL; i++) {
          if (a[i] != b[i]) {
            r = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return r;
    }

    function subtract(a, b, aL, base) {
      var i = 0; // Subtract b from a.

      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      } // Remove leading zeros.


      for (; !a[0] && a.length > 1;) {
        a.shift();
      }
    }

    return function (x, y, pr, rm, dp, base) {
      var cmp,
          e,
          i,
          k,
          logBase,
          more,
          prod,
          prodL,
          q,
          qd,
          rem,
          remL,
          rem0,
          sd,
          t,
          xi,
          xL,
          yd0,
          yL,
          yz,
          Ctor = x.constructor,
          sign = x.s == y.s ? 1 : -1,
          xd = x.d,
          yd = y.d; // Either NaN, Infinity or 0?

      if (!xd || !xd[0] || !yd || !yd[0]) {
        return new Ctor( // Return NaN if either NaN, or both Infinity or 0.
        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
      }

      if (base) {
        logBase = 1;
        e = x.e - y.e;
      } else {
        base = BASE;
        logBase = LOG_BASE;
        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
      }

      yL = yd.length;
      xL = xd.length;
      q = new Ctor(sign);
      qd = q.d = []; // Result exponent may be one less than e.
      // The digit array of a Decimal from toStringBinary may have trailing zeros.

      for (i = 0; yd[i] == (xd[i] || 0); i++) {
        ;
      }

      if (yd[i] > (xd[i] || 0)) e--;

      if (pr == null) {
        sd = pr = Ctor.precision;
        rm = Ctor.rounding;
      } else if (dp) {
        sd = pr + (x.e - y.e) + 1;
      } else {
        sd = pr;
      }

      if (sd < 0) {
        qd.push(1);
        more = true;
      } else {
        // Convert precision in number of base 10 digits to base 1e7 digits.
        sd = sd / logBase + 2 | 0;
        i = 0; // divisor < 1e7

        if (yL == 1) {
          k = 0;
          yd = yd[0];
          sd++; // k is the carry.

          for (; (i < xL || k) && sd--; i++) {
            t = k * base + (xd[i] || 0);
            qd[i] = t / yd | 0;
            k = t % yd | 0;
          }

          more = k || i < xL; // divisor >= 1e7
        } else {
          // Normalise xd and yd so highest order digit of yd is >= base/2
          k = base / (yd[0] + 1) | 0;

          if (k > 1) {
            yd = multiplyInteger(yd, k, base);
            xd = multiplyInteger(xd, k, base);
            yL = yd.length;
            xL = xd.length;
          }

          xi = yL;
          rem = xd.slice(0, yL);
          remL = rem.length; // Add zeros to make remainder as long as divisor.

          for (; remL < yL;) {
            rem[remL++] = 0;
          }

          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];
          if (yd[1] >= base / 2) ++yd0;

          do {
            k = 0; // Compare divisor and remainder.

            cmp = compare(yd, rem, yL, remL); // If divisor < remainder.

            if (cmp < 0) {
              // Calculate trial digit, k.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // k will be how many times the divisor goes into the current remainder.

              k = rem0 / yd0 | 0; //  Algorithm:
              //  1. product = divisor * trial digit (k)
              //  2. if product > remainder: product -= divisor, k--
              //  3. remainder -= product
              //  4. if product was < remainder at 2:
              //    5. compare new remainder and divisor
              //    6. If remainder > divisor: remainder -= divisor, k++

              if (k > 1) {
                if (k >= base) k = base - 1; // product = divisor * trial digit.

                prod = multiplyInteger(yd, k, base);
                prodL = prod.length;
                remL = rem.length; // Compare product and remainder.

                cmp = compare(prod, rem, prodL, remL); // product > remainder.

                if (cmp == 1) {
                  k--; // Subtract divisor from product.

                  subtract(prod, yL < prodL ? yz : yd, prodL, base);
                }
              } else {
                // cmp is -1.
                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                if (k == 0) cmp = k = 1;
                prod = yd.slice();
              }

              prodL = prod.length;
              if (prodL < remL) prod.unshift(0); // Subtract product from remainder.

              subtract(rem, prod, remL, base); // If product was < previous remainder.

              if (cmp == -1) {
                remL = rem.length; // Compare divisor and new remainder.

                cmp = compare(yd, rem, yL, remL); // If divisor < new remainder, subtract divisor from remainder.

                if (cmp < 1) {
                  k++; // Subtract divisor from remainder.

                  subtract(rem, yL < remL ? yz : yd, remL, base);
                }
              }

              remL = rem.length;
            } else if (cmp === 0) {
              k++;
              rem = [0];
            } // if cmp === 1, k will be 0
            // Add the next digit, k, to the result array.


            qd[i++] = k; // Update the remainder.

            if (cmp && rem[0]) {
              rem[remL++] = xd[xi] || 0;
            } else {
              rem = [xd[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] !== void 0) && sd--);

          more = rem[0] !== void 0;
        } // Leading zero?


        if (!qd[0]) qd.shift();
      } // logBase is 1 when divide is being used for base conversion.


      if (logBase == 1) {
        q.e = e;
        inexact = more;
      } else {
        // To calculate q.e, first get the number of digits of qd[0].
        for (i = 1, k = qd[0]; k >= 10; k /= 10) {
          i++;
        }

        q.e = i + e * logBase - 1;
        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
      }

      return q;
    };
  }();
  /*
   * Round `x` to `sd` significant digits using rounding mode `rm`.
   * Check for over/under-flow.
   */


  function finalise(x, sd, rm, isTruncated) {
    var digits,
        i,
        j,
        k,
        rd,
        roundUp,
        w,
        xd,
        xdi,
        Ctor = x.constructor; // Don't round if sd is null or undefined.

    out: if (sd != null) {
      xd = x.d; // Infinity/NaN.

      if (!xd) return x; // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
      // w: the word of xd containing rd, a base 1e7 number.
      // xdi: the index of w within xd.
      // digits: the number of digits of w.
      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
      // they had leading zeros)
      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).
      // Get the length of the first word of the digits array xd.

      for (digits = 1, k = xd[0]; k >= 10; k /= 10) {
        digits++;
      }

      i = sd - digits; // Is the rounding digit in the first word of xd?

      if (i < 0) {
        i += LOG_BASE;
        j = sd;
        w = xd[xdi = 0]; // Get the rounding digit at index j of w.

        rd = w / mathpow(10, digits - j - 1) % 10 | 0;
      } else {
        xdi = Math.ceil((i + 1) / LOG_BASE);
        k = xd.length;

        if (xdi >= k) {
          if (isTruncated) {
            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
            for (; k++ <= xdi;) {
              xd.push(0);
            }

            w = rd = 0;
            digits = 1;
            i %= LOG_BASE;
            j = i - LOG_BASE + 1;
          } else {
            break out;
          }
        } else {
          w = k = xd[xdi]; // Get the number of digits of w.

          for (digits = 1; k >= 10; k /= 10) {
            digits++;
          } // Get the index of rd within w.


          i %= LOG_BASE; // Get the index of rd within w, adjusted for leading zeros.
          // The number of leading zeros of w is given by LOG_BASE - digits.

          j = i - LOG_BASE + digits; // Get the rounding digit at index j of w.

          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
        }
      } // Are there any non-zero digits after the rounding digit?


      isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1)); // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
      // will give 714.

      roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
      (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));

      if (sd < 1 || !xd[0]) {
        xd.length = 0;

        if (roundUp) {
          // Convert sd to decimal places.
          sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.

          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x.e = -sd || 0;
        } else {
          // Zero.
          xd[0] = x.e = 0;
        }

        return x;
      } // Remove excess digits.


      if (i == 0) {
        xd.length = xdi;
        k = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k = mathpow(10, LOG_BASE - i); // E.g. 56700 becomes 56000 if 7 is the rounding digit.
        // j > 0 means i > number of leading zeros of w.

        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
      }

      if (roundUp) {
        for (;;) {
          // Is the digit to be rounded up in the first word of xd?
          if (xdi == 0) {
            // i will be the length of xd[0] before k is added.
            for (i = 1, j = xd[0]; j >= 10; j /= 10) {
              i++;
            }

            j = xd[0] += k;

            for (k = 1; j >= 10; j /= 10) {
              k++;
            } // if i != k the length has increased.


            if (i != k) {
              x.e++;
              if (xd[0] == BASE) xd[0] = 1;
            }

            break;
          } else {
            xd[xdi] += k;
            if (xd[xdi] != BASE) break;
            xd[xdi--] = 0;
            k = 1;
          }
        }
      } // Remove trailing zeros.


      for (i = xd.length; xd[--i] === 0;) {
        xd.pop();
      }
    }

    if (external) {
      // Overflow?
      if (x.e > Ctor.maxE) {
        // Infinity.
        x.d = null;
        x.e = NaN; // Underflow?
      } else if (x.e < Ctor.minE) {
        // Zero.
        x.e = 0;
        x.d = [0]; // Ctor.underflow = true;
      } // else Ctor.underflow = false;

    }

    return x;
  }

  function finiteToString(x, isExp, sd) {
    if (!x.isFinite()) return nonFiniteToString(x);
    var k,
        e = x.e,
        str = digitsToString(x.d),
        len = str.length;

    if (isExp) {
      if (sd && (k = sd - len) > 0) {
        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
      } else if (len > 1) {
        str = str.charAt(0) + '.' + str.slice(1);
      }

      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
    } else if (e < 0) {
      str = '0.' + getZeroString(-e - 1) + str;
      if (sd && (k = sd - len) > 0) str += getZeroString(k);
    } else if (e >= len) {
      str += getZeroString(e + 1 - len);
      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
    } else {
      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);

      if (sd && (k = sd - len) > 0) {
        if (e + 1 === len) str += '.';
        str += getZeroString(k);
      }
    }

    return str;
  } // Calculate the base 10 exponent from the base 1e7 exponent.


  function getBase10Exponent(digits, e) {
    var w = digits[0]; // Add the number of digits of the first word of the digits array.

    for (e *= LOG_BASE; w >= 10; w /= 10) {
      e++;
    }

    return e;
  }

  function getLn10(Ctor, sd, pr) {
    if (sd > LN10_PRECISION) {
      // Reset global state in case the exception is caught.
      external = true;
      if (pr) Ctor.precision = pr;
      throw Error(precisionLimitExceeded);
    }

    return finalise(new Ctor(LN10), sd, 1, true);
  }

  function getPi(Ctor, sd, rm) {
    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
    return finalise(new Ctor(PI), sd, rm, true);
  }

  function getPrecision(digits) {
    var w = digits.length - 1,
        len = w * LOG_BASE + 1;
    w = digits[w]; // If non-zero...

    if (w) {
      // Subtract the number of trailing zeros of the last word.
      for (; w % 10 == 0; w /= 10) {
        len--;
      } // Add the number of digits of the first word.


      for (w = digits[0]; w >= 10; w /= 10) {
        len++;
      }
    }

    return len;
  }

  function getZeroString(k) {
    var zs = '';

    for (; k--;) {
      zs += '0';
    }

    return zs;
  }
  /*
   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
   * integer of type number.
   *
   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
   *
   */


  function intPow(Ctor, x, n, pr) {
    var isTruncated,
        r = new Ctor(1),
        // Max n of 9007199254740991 takes 53 loop iterations.
    // Maximum digits array length; leaves [28, 34] guard digits.
    k = Math.ceil(pr / LOG_BASE + 4);
    external = false;

    for (;;) {
      if (n % 2) {
        r = r.times(x);
        if (truncate(r.d, k)) isTruncated = true;
      }

      n = mathfloor(n / 2);

      if (n === 0) {
        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
        n = r.d.length - 1;
        if (isTruncated && r.d[n] === 0) ++r.d[n];
        break;
      }

      x = x.times(x);
      truncate(x.d, k);
    }

    external = true;
    return r;
  }

  function isOdd(n) {
    return n.d[n.d.length - 1] & 1;
  }
  /*
   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
   */


  function maxOrMin(Ctor, args, ltgt) {
    var y,
        x = new Ctor(args[0]),
        i = 0;

    for (; ++i < args.length;) {
      y = new Ctor(args[i]);

      if (!y.s) {
        x = y;
        break;
      } else if (x[ltgt](y)) {
        x = y;
      }
    }

    return x;
  }
  /*
   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
   * digits.
   *
   * Taylor/Maclaurin series.
   *
   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
   *
   * Argument reduction:
   *   Repeat x = x / 32, k += 5, until |x| < 0.1
   *   exp(x) = exp(x / 2^k)^(2^k)
   *
   * Previously, the argument was initially reduced by
   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
   * found to be slower than just dividing repeatedly by 32 as above.
   *
   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
   *
   *  exp(Infinity)  = Infinity
   *  exp(-Infinity) = 0
   *  exp(NaN)       = NaN
   *  exp(±0)        = 1
   *
   *  exp(x) is non-terminating for any finite, non-zero x.
   *
   *  The result will always be correctly rounded.
   *
   */


  function naturalExponential(x, sd) {
    var denominator,
        guard,
        j,
        pow,
        sum,
        t,
        wpr,
        rep = 0,
        i = 0,
        k = 0,
        Ctor = x.constructor,
        rm = Ctor.rounding,
        pr = Ctor.precision; // 0/NaN/Infinity?

    if (!x.d || !x.d[0] || x.e > 17) {
      return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    t = new Ctor(0.03125); // while abs(x) >= 0.1

    while (x.e > -2) {
      // x = x / 2^5
      x = x.times(t);
      k += 5;
    } // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
    // necessary to ensure the first 4 rounding digits are correct.


    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
    wpr += guard;
    denominator = pow = sum = new Ctor(1);
    Ctor.precision = wpr;

    for (;;) {
      pow = finalise(pow.times(x), wpr, 1);
      denominator = denominator.times(++i);
      t = sum.plus(divide(pow, denominator, wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        j = k;

        while (j--) {
          sum = finalise(sum.times(sum), wpr, 1);
        } // Check to see if the first 4 rounding digits are [49]999.
        // If so, repeat the summation with a higher precision, otherwise
        // e.g. with precision: 18, rounding: 1
        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
        // `wpr - guard` is the index of first rounding digit.


        if (sd == null) {
          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += 10;
            denominator = pow = t = new Ctor(1);
            i = 0;
            rep++;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
    }
  }
  /*
   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
   * digits.
   *
   *  ln(-n)        = NaN
   *  ln(0)         = -Infinity
   *  ln(-0)        = -Infinity
   *  ln(1)         = 0
   *  ln(Infinity)  = Infinity
   *  ln(-Infinity) = NaN
   *  ln(NaN)       = NaN
   *
   *  ln(n) (n != 1) is non-terminating.
   *
   */


  function naturalLogarithm(y, sd) {
    var c,
        c0,
        denominator,
        e,
        numerator,
        rep,
        sum,
        t,
        wpr,
        x1,
        x2,
        n = 1,
        guard = 10,
        x = y,
        xd = x.d,
        Ctor = x.constructor,
        rm = Ctor.rounding,
        pr = Ctor.precision; // Is x negative or Infinity, NaN, 0 or 1?

    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    Ctor.precision = wpr += guard;
    c = digitsToString(xd);
    c0 = c.charAt(0);

    if (Math.abs(e = x.e) < 1.5e15) {
      // Argument reduction.
      // The series converges faster the closer the argument is to 1, so using
      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
      // later be divided by this number, then separate out the power of 10 using
      // ln(a*10^b) = ln(a) + b*ln(10).
      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
      // max n is 6 (gives 0.7 - 1.3)
      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
        x = x.times(y);
        c = digitsToString(x.d);
        c0 = c.charAt(0);
        n++;
      }

      e = x.e;

      if (c0 > 1) {
        x = new Ctor('0.' + c);
        e++;
      } else {
        x = new Ctor(c0 + '.' + c.slice(1));
      }
    } else {
      // The argument reduction method above may result in overflow if the argument y is a massive
      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
      // function using ln(x*10^e) = ln(x) + e*ln(10).
      t = getLn10(Ctor, wpr + 2, pr).times(e + '');
      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
      Ctor.precision = pr;
      return sd == null ? finalise(x, pr, rm, external = true) : x;
    } // x1 is x reduced to a value near 1.


    x1 = x; // Taylor series.
    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
    // where x = (y - 1)/(y + 1)    (|x| < 1)

    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
    x2 = finalise(x.times(x), wpr, 1);
    denominator = 3;

    for (;;) {
      numerator = finalise(numerator.times(x2), wpr, 1);
      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        sum = sum.times(2); // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.

        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
        sum = divide(sum, new Ctor(n), wpr, 1); // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
        // been repeated previously) and the first 4 rounding digits 9999?
        // If so, restart the summation with a higher precision, otherwise
        // e.g. with precision: 12, rounding: 1
        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
        // `wpr - guard` is the index of first rounding digit.

        if (sd == null) {
          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += guard;
            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
            x2 = finalise(x.times(x), wpr, 1);
            denominator = rep = 1;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
      denominator += 2;
    }
  } // ±Infinity, NaN.


  function nonFiniteToString(x) {
    // Unsigned.
    return String(x.s * x.s / 0);
  }
  /*
   * Parse the value of a new Decimal `x` from string `str`.
   */


  function parseDecimal(x, str) {
    var e, i, len; // Decimal point?

    if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?

    if ((i = str.search(/e/i)) > 0) {
      // Determine exponent.
      if (e < 0) e = i;
      e += +str.slice(i + 1);
      str = str.substring(0, i);
    } else if (e < 0) {
      // Integer.
      e = str.length;
    } // Determine leading zeros.


    for (i = 0; str.charCodeAt(i) === 48; i++) {
      ;
    } // Determine trailing zeros.


    for (len = str.length; str.charCodeAt(len - 1) === 48; --len) {
      ;
    }

    str = str.slice(i, len);

    if (str) {
      len -= i;
      x.e = e = e - i - 1;
      x.d = []; // Transform base
      // e is the base 10 exponent.
      // i is where to slice str to get the first word of the digits array.

      i = (e + 1) % LOG_BASE;
      if (e < 0) i += LOG_BASE;

      if (i < len) {
        if (i) x.d.push(+str.slice(0, i));

        for (len -= LOG_BASE; i < len;) {
          x.d.push(+str.slice(i, i += LOG_BASE));
        }

        str = str.slice(i);
        i = LOG_BASE - str.length;
      } else {
        i -= len;
      }

      for (; i--;) {
        str += '0';
      }

      x.d.push(+str);

      if (external) {
        // Overflow?
        if (x.e > x.constructor.maxE) {
          // Infinity.
          x.d = null;
          x.e = NaN; // Underflow?
        } else if (x.e < x.constructor.minE) {
          // Zero.
          x.e = 0;
          x.d = [0]; // x.constructor.underflow = true;
        } // else x.constructor.underflow = false;

      }
    } else {
      // Zero.
      x.e = 0;
      x.d = [0];
    }

    return x;
  }
  /*
   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
   */


  function parseOther(x, str) {
    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

    if (str === 'Infinity' || str === 'NaN') {
      if (!+str) x.s = NaN;
      x.e = NaN;
      x.d = null;
      return x;
    }

    if (isHex.test(str)) {
      base = 16;
      str = str.toLowerCase();
    } else if (isBinary.test(str)) {
      base = 2;
    } else if (isOctal.test(str)) {
      base = 8;
    } else {
      throw Error(invalidArgument + str);
    } // Is there a binary exponent part?


    i = str.search(/p/i);

    if (i > 0) {
      p = +str.slice(i + 1);
      str = str.substring(2, i);
    } else {
      str = str.slice(2);
    } // Convert `str` as an integer then divide the result by `base` raised to a power such that the
    // fraction part will be restored.


    i = str.indexOf('.');
    isFloat = i >= 0;
    Ctor = x.constructor;

    if (isFloat) {
      str = str.replace('.', '');
      len = str.length;
      i = len - i; // log[10](16) = 1.2041... , log[10](88) = 1.9444....

      divisor = intPow(Ctor, new Ctor(base), i, i * 2);
    }

    xd = convertBase(str, base, BASE);
    xe = xd.length - 1; // Remove trailing zeros.

    for (i = xe; xd[i] === 0; --i) {
      xd.pop();
    }

    if (i < 0) return new Ctor(x.s * 0);
    x.e = getBase10Exponent(xd, xe);
    x.d = xd;
    external = false; // At what precision to perform the division to ensure exact conversion?
    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
    // Therefore using 4 * the number of digits of str will always be enough.

    if (isFloat) x = divide(x, divisor, len * 4); // Multiply by the binary exponent part if present.

    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));
    external = true;
    return x;
  }
  /*
   * sin(x) = x - x^3/3! + x^5/5! - ...
   * |x| < pi/2
   *
   */


  function sine(Ctor, x) {
    var k,
        len = x.d.length;
    if (len < 3) return taylorSeries(Ctor, 2, x, x); // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))
    // Estimate the optimum number of times to use the argument reduction.

    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0; // Max k before Math.pow precision loss is 22

    x = x.times(Math.pow(5, -k));
    x = taylorSeries(Ctor, 2, x, x); // Reverse argument reduction

    var sin2_x,
        d5 = new Ctor(5),
        d16 = new Ctor(16),
        d20 = new Ctor(20);

    for (; k--;) {
      sin2_x = x.times(x);
      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
    }

    return x;
  } // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.


  function taylorSeries(Ctor, n, x, y, isHyperbolic) {
    var j,
        t,
        u,
        x2,
        i = 1,
        pr = Ctor.precision,
        k = Math.ceil(pr / LOG_BASE);
    external = false;
    x2 = x.times(x);
    u = new Ctor(y);

    for (;;) {
      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
      u = isHyperbolic ? y.plus(t) : y.minus(t);
      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
      t = u.plus(y);

      if (t.d[k] !== void 0) {
        for (j = k; t.d[j] === u.d[j] && j--;) {
          ;
        }

        if (j == -1) break;
      }

      j = u;
      u = y;
      y = t;
      t = j;
      i++;
    }

    external = true;
    t.d.length = k + 1;
    return t;
  } // Return the absolute value of `x` reduced to less than or equal to half pi.


  function toLessThanHalfPi(Ctor, x) {
    var t,
        isNeg = x.s < 0,
        pi = getPi(Ctor, Ctor.precision, 1),
        halfPi = pi.times(0.5);
    x = x.abs();

    if (x.lte(halfPi)) {
      quadrant = isNeg ? 4 : 1;
      return x;
    }

    t = x.divToInt(pi);

    if (t.isZero()) {
      quadrant = isNeg ? 3 : 2;
    } else {
      x = x.minus(t.times(pi)); // 0 <= x < pi

      if (x.lte(halfPi)) {
        quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;
        return x;
      }

      quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;
    }

    return x.minus(pi).abs();
  }
  /*
   * Return the value of Decimal `x` as a string in base `baseOut`.
   *
   * If the optional `sd` argument is present include a binary exponent suffix.
   */


  function toStringBinary(x, baseOut, sd, rm) {
    var base,
        e,
        i,
        k,
        len,
        roundUp,
        str,
        xd,
        y,
        Ctor = x.constructor,
        isExp = sd !== void 0;

    if (isExp) {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
    } else {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    }

    if (!x.isFinite()) {
      str = nonFiniteToString(x);
    } else {
      str = finiteToString(x);
      i = str.indexOf('.'); // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
      // minBinaryExponent = floor(decimalExponent * log[2](10))
      // log[2](10) = 3.321928094887362347870319429489390175864

      if (isExp) {
        base = 2;

        if (baseOut == 16) {
          sd = sd * 4 - 3;
        } else if (baseOut == 8) {
          sd = sd * 3 - 2;
        }
      } else {
        base = baseOut;
      } // Convert the number as an integer then divide the result by its base raised to a power such
      // that the fraction part will be restored.
      // Non-integer.


      if (i >= 0) {
        str = str.replace('.', '');
        y = new Ctor(1);
        y.e = str.length - i;
        y.d = convertBase(finiteToString(y), 10, base);
        y.e = y.d.length;
      }

      xd = convertBase(str, 10, base);
      e = len = xd.length; // Remove trailing zeros.

      for (; xd[--len] == 0;) {
        xd.pop();
      }

      if (!xd[0]) {
        str = isExp ? '0p+0' : '0';
      } else {
        if (i < 0) {
          e--;
        } else {
          x = new Ctor(x);
          x.d = xd;
          x.e = e;
          x = divide(x, y, sd, rm, 0, base);
          xd = x.d;
          e = x.e;
          roundUp = inexact;
        } // The rounding digit, i.e. the digit after the digit that may be rounded up.


        i = xd[sd];
        k = base / 2;
        roundUp = roundUp || xd[sd + 1] !== void 0;
        roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
        xd.length = sd;

        if (roundUp) {
          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (; ++xd[--sd] > base - 1;) {
            xd[sd] = 0;

            if (!sd) {
              ++e;
              xd.unshift(1);
            }
          }
        } // Determine trailing zeros.


        for (len = xd.length; !xd[len - 1]; --len) {
          ;
        } // E.g. [4, 11, 15] becomes 4bf.


        for (i = 0, str = ''; i < len; i++) {
          str += NUMERALS.charAt(xd[i]);
        } // Add binary exponent suffix?


        if (isExp) {
          if (len > 1) {
            if (baseOut == 16 || baseOut == 8) {
              i = baseOut == 16 ? 4 : 3;

              for (--len; len % i; len++) {
                str += '0';
              }

              xd = convertBase(str, base, baseOut);

              for (len = xd.length; !xd[len - 1]; --len) {
                ;
              } // xd[0] will always be be 1


              for (i = 1, str = '1.'; i < len; i++) {
                str += NUMERALS.charAt(xd[i]);
              }
            } else {
              str = str.charAt(0) + '.' + str.slice(1);
            }
          }

          str = str + (e < 0 ? 'p' : 'p+') + e;
        } else if (e < 0) {
          for (; ++e;) {
            str = '0' + str;
          }

          str = '0.' + str;
        } else {
          if (++e > len) for (e -= len; e--;) {
            str += '0';
          } else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
        }
      }

      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
    }

    return x.s < 0 ? '-' + str : str;
  } // Does not strip trailing zeros.


  function truncate(arr, len) {
    if (arr.length > len) {
      arr.length = len;
      return true;
    }
  } // Decimal methods

  /*
   *  abs
   *  acos
   *  acosh
   *  add
   *  asin
   *  asinh
   *  atan
   *  atanh
   *  atan2
   *  cbrt
   *  ceil
   *  clone
   *  config
   *  cos
   *  cosh
   *  div
   *  exp
   *  floor
   *  hypot
   *  ln
   *  log
   *  log2
   *  log10
   *  max
   *  min
   *  mod
   *  mul
   *  pow
   *  random
   *  round
   *  set
   *  sign
   *  sin
   *  sinh
   *  sqrt
   *  sub
   *  tan
   *  tanh
   *  trunc
   */

  /*
   * Return a new Decimal whose value is the absolute value of `x`.
   *
   * x {number|string|Decimal}
   *
   */


  function abs(x) {
    return new this(x).abs();
  }
  /*
   * Return a new Decimal whose value is the arccosine in radians of `x`.
   *
   * x {number|string|Decimal}
   *
   */


  function acos(x) {
    return new this(x).acos();
  }
  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */


  function acosh(x) {
    return new this(x).acosh();
  }
  /*
   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */


  function add(x, y) {
    return new this(x).plus(y);
  }
  /*
   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */


  function asin(x) {
    return new this(x).asin();
  }
  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */


  function asinh(x) {
    return new this(x).asinh();
  }
  /*
   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */


  function atan(x) {
    return new this(x).atan();
  }
  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */


  function atanh(x) {
    return new this(x).atanh();
  }
  /*
   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi, pi]
   *
   * y {number|string|Decimal} The y-coordinate.
   * x {number|string|Decimal} The x-coordinate.
   *
   * atan2(±0, -0)               = ±pi
   * atan2(±0, +0)               = ±0
   * atan2(±0, -x)               = ±pi for x > 0
   * atan2(±0, x)                = ±0 for x > 0
   * atan2(-y, ±0)               = -pi/2 for y > 0
   * atan2(y, ±0)                = pi/2 for y > 0
   * atan2(±y, -Infinity)        = ±pi for finite y > 0
   * atan2(±y, +Infinity)        = ±0 for finite y > 0
   * atan2(±Infinity, x)         = ±pi/2 for finite x
   * atan2(±Infinity, -Infinity) = ±3*pi/4
   * atan2(±Infinity, +Infinity) = ±pi/4
   * atan2(NaN, x) = NaN
   * atan2(y, NaN) = NaN
   *
   */


  function atan2(y, x) {
    y = new this(y);
    x = new this(x);
    var r,
        pr = this.precision,
        rm = this.rounding,
        wpr = pr + 4; // Either NaN

    if (!y.s || !x.s) {
      r = new this(NaN); // Both ±Infinity
    } else if (!y.d && !x.d) {
      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
      r.s = y.s; // x is ±Infinity or y is ±0
    } else if (!x.d || y.isZero()) {
      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
      r.s = y.s; // y is ±Infinity or x is ±0
    } else if (!y.d || x.isZero()) {
      r = getPi(this, wpr, 1).times(0.5);
      r.s = y.s; // Both non-zero and finite
    } else if (x.s < 0) {
      this.precision = wpr;
      this.rounding = 1;
      r = this.atan(divide(y, x, wpr, 1));
      x = getPi(this, wpr, 1);
      this.precision = pr;
      this.rounding = rm;
      r = y.s < 0 ? r.minus(x) : r.plus(x);
    } else {
      r = this.atan(divide(y, x, wpr, 1));
    }

    return r;
  }
  /*
   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */


  function cbrt(x) {
    return new this(x).cbrt();
  }
  /*
   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
   *
   * x {number|string|Decimal}
   *
   */


  function ceil(x) {
    return finalise(x = new this(x), x.e + 1, 2);
  }
  /*
   * Configure global settings for a Decimal constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *   maxE       {number}
   *   minE       {number}
   *   modulo     {number}
   *   crypto     {boolean|number}
   *   defaults   {true}
   *
   * E.g. Decimal.config({ precision: 20, rounding: 4 })
   *
   */


  function config(obj) {
    if (!obj || _typeof(obj) !== 'object') throw Error(decimalError + 'Object expected');
    var i,
        p,
        v,
        useDefaults = obj.defaults === true,
        ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];

    for (i = 0; i < ps.length; i += 3) {
      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];

      if ((v = obj[p]) !== void 0) {
        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);
      }
    }

    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];

    if ((v = obj[p]) !== void 0) {
      if (v === true || v === false || v === 0 || v === 1) {
        if (v) {
          if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
            this[p] = true;
          } else {
            throw Error(cryptoUnavailable);
          }
        } else {
          this[p] = false;
        }
      } else {
        throw Error(invalidArgument + p + ': ' + v);
      }
    }

    return this;
  }
  /*
   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */


  function cos(x) {
    return new this(x).cos();
  }
  /*
   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */


  function cosh(x) {
    return new this(x).cosh();
  }
  /*
   * Create and return a Decimal constructor with the same configuration properties as this Decimal
   * constructor.
   *
   */


  function clone(obj) {
    var i, p, ps;
    /*
     * The Decimal constructor and exported function.
     * Return a new Decimal instance.
     *
     * v {number|string|Decimal} A numeric value.
     *
     */

    function Decimal(v) {
      var e,
          i,
          t,
          x = this; // Decimal called without new.

      if (!(x instanceof Decimal)) return new Decimal(v); // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
      // which points to Object.

      x.constructor = Decimal; // Duplicate.

      if (v instanceof Decimal) {
        x.s = v.s;
        x.e = v.e;
        x.d = (v = v.d) ? v.slice() : v;
        return;
      }

      t = _typeof(v);

      if (t === 'number') {
        if (v === 0) {
          x.s = 1 / v < 0 ? -1 : 1;
          x.e = 0;
          x.d = [0];
          return;
        }

        if (v < 0) {
          v = -v;
          x.s = -1;
        } else {
          x.s = 1;
        } // Fast path for small integers.


        if (v === ~~v && v < 1e7) {
          for (e = 0, i = v; i >= 10; i /= 10) {
            e++;
          }

          x.e = e;
          x.d = [v];
          return; // Infinity, NaN.
        } else if (v * 0 !== 0) {
          if (!v) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return;
        }

        return parseDecimal(x, v.toString());
      } else if (t !== 'string') {
        throw Error(invalidArgument + v);
      } // Minus sign?


      if (v.charCodeAt(0) === 45) {
        v = v.slice(1);
        x.s = -1;
      } else {
        x.s = 1;
      }

      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
    }

    Decimal.prototype = P;
    Decimal.ROUND_UP = 0;
    Decimal.ROUND_DOWN = 1;
    Decimal.ROUND_CEIL = 2;
    Decimal.ROUND_FLOOR = 3;
    Decimal.ROUND_HALF_UP = 4;
    Decimal.ROUND_HALF_DOWN = 5;
    Decimal.ROUND_HALF_EVEN = 6;
    Decimal.ROUND_HALF_CEIL = 7;
    Decimal.ROUND_HALF_FLOOR = 8;
    Decimal.EUCLID = 9;
    Decimal.config = Decimal.set = config;
    Decimal.clone = clone;
    Decimal.isDecimal = isDecimalInstance;
    Decimal.abs = abs;
    Decimal.acos = acos;
    Decimal.acosh = acosh; // ES6

    Decimal.add = add;
    Decimal.asin = asin;
    Decimal.asinh = asinh; // ES6

    Decimal.atan = atan;
    Decimal.atanh = atanh; // ES6

    Decimal.atan2 = atan2;
    Decimal.cbrt = cbrt; // ES6

    Decimal.ceil = ceil;
    Decimal.cos = cos;
    Decimal.cosh = cosh; // ES6

    Decimal.div = div;
    Decimal.exp = exp;
    Decimal.floor = floor;
    Decimal.hypot = hypot; // ES6

    Decimal.ln = ln;
    Decimal.log = log;
    Decimal.log10 = log10; // ES6

    Decimal.log2 = log2; // ES6

    Decimal.max = max;
    Decimal.min = min;
    Decimal.mod = mod;
    Decimal.mul = mul;
    Decimal.pow = pow;
    Decimal.random = random;
    Decimal.round = round;
    Decimal.sign = sign; // ES6

    Decimal.sin = sin;
    Decimal.sinh = sinh; // ES6

    Decimal.sqrt = sqrt;
    Decimal.sub = sub;
    Decimal.tan = tan;
    Decimal.tanh = tanh; // ES6

    Decimal.trunc = trunc; // ES6

    if (obj === void 0) obj = {};

    if (obj) {
      if (obj.defaults !== true) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];

        for (i = 0; i < ps.length;) {
          if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
        }
      }
    }

    Decimal.config(obj);
    return Decimal;
  }
  /*
   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */


  function div(x, y) {
    return new this(x).div(y);
  }
  /*
   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The power to which to raise the base of the natural log.
   *
   */


  function exp(x) {
    return new this(x).exp();
  }
  /*
   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
   *
   * x {number|string|Decimal}
   *
   */


  function floor(x) {
    return finalise(x = new this(x), x.e + 1, 3);
  }
  /*
   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
   *
   */


  function hypot() {
    var i,
        n,
        t = new this(0);
    external = false;

    for (i = 0; i < arguments.length;) {
      n = new this(arguments[i++]);

      if (!n.d) {
        if (n.s) {
          external = true;
          return new this(1 / 0);
        }

        t = n;
      } else if (t.d) {
        t = t.plus(n.times(n));
      }
    }

    external = true;
    return t.sqrt();
  }
  /*
   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
   * otherwise return false.
   *
   */


  function isDecimalInstance(obj) {
    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
  }
  /*
   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */


  function ln(x) {
    return new this(x).ln();
  }
  /*
   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * log[y](x)
   *
   * x {number|string|Decimal} The argument of the logarithm.
   * y {number|string|Decimal} The base of the logarithm.
   *
   */


  function log(x, y) {
    return new this(x).log(y);
  }
  /*
   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */


  function log2(x) {
    return new this(x).log(2);
  }
  /*
   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */


  function log10(x) {
    return new this(x).log(10);
  }
  /*
   * Return a new Decimal whose value is the maximum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */


  function max() {
    return maxOrMin(this, arguments, 'lt');
  }
  /*
   * Return a new Decimal whose value is the minimum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */


  function min() {
    return maxOrMin(this, arguments, 'gt');
  }
  /*
   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */


  function mod(x, y) {
    return new this(x).mod(y);
  }
  /*
   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */


  function mul(x, y) {
    return new this(x).mul(y);
  }
  /*
   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The base.
   * y {number|string|Decimal} The exponent.
   *
   */


  function pow(x, y) {
    return new this(x).pow(y);
  }
  /*
   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
   * are produced).
   *
   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
   *
   */


  function random(sd) {
    var d,
        e,
        k,
        n,
        i = 0,
        r = new this(1),
        rd = [];
    if (sd === void 0) sd = this.precision;else checkInt32(sd, 1, MAX_DIGITS);
    k = Math.ceil(sd / LOG_BASE);

    if (!this.crypto) {
      for (; i < k;) {
        rd[i++] = Math.random() * 1e7 | 0;
      } // Browsers supporting crypto.getRandomValues.

    } else if (crypto.getRandomValues) {
      d = crypto.getRandomValues(new Uint32Array(k));

      for (; i < k;) {
        n = d[i]; // 0 <= n < 4294967296
        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).

        if (n >= 4.29e9) {
          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
        } else {
          // 0 <= n <= 4289999999
          // 0 <= (n % 1e7) <= 9999999
          rd[i++] = n % 1e7;
        }
      } // Node.js supporting crypto.randomBytes.

    } else if (crypto.randomBytes) {
      // buffer
      d = crypto.randomBytes(k *= 4);

      for (; i < k;) {
        // 0 <= n < 2147483648
        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24); // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).

        if (n >= 2.14e9) {
          crypto.randomBytes(4).copy(d, i);
        } else {
          // 0 <= n <= 2139999999
          // 0 <= (n % 1e7) <= 9999999
          rd.push(n % 1e7);
          i += 4;
        }
      }

      i = k / 4;
    } else {
      throw Error(cryptoUnavailable);
    }

    k = rd[--i];
    sd %= LOG_BASE; // Convert trailing digits to zeros according to sd.

    if (k && sd) {
      n = mathpow(10, LOG_BASE - sd);
      rd[i] = (k / n | 0) * n;
    } // Remove trailing words which are zero.


    for (; rd[i] === 0; i--) {
      rd.pop();
    } // Zero?


    if (i < 0) {
      e = 0;
      rd = [0];
    } else {
      e = -1; // Remove leading words which are zero and adjust exponent accordingly.

      for (; rd[0] === 0; e -= LOG_BASE) {
        rd.shift();
      } // Count the digits of the first word of rd to determine leading zeros.


      for (k = 1, n = rd[0]; n >= 10; n /= 10) {
        k++;
      } // Adjust the exponent for leading zeros of the first word of rd.


      if (k < LOG_BASE) e -= LOG_BASE - k;
    }

    r.e = e;
    r.d = rd;
    return r;
  }
  /*
   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
   *
   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
   *
   * x {number|string|Decimal}
   *
   */


  function round(x) {
    return finalise(x = new this(x), x.e + 1, this.rounding);
  }
  /*
   * Return
   *   1    if x > 0,
   *  -1    if x < 0,
   *   0    if x is 0,
   *  -0    if x is -0,
   *   NaN  otherwise
   *
   */


  function sign(x) {
    x = new this(x);
    return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;
  }
  /*
   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */


  function sin(x) {
    return new this(x).sin();
  }
  /*
   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */


  function sinh(x) {
    return new this(x).sinh();
  }
  /*
   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */


  function sqrt(x) {
    return new this(x).sqrt();
  }
  /*
   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */


  function sub(x, y) {
    return new this(x).sub(y);
  }
  /*
   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */


  function tan(x) {
    return new this(x).tan();
  }
  /*
   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */


  function tanh(x) {
    return new this(x).tanh();
  }
  /*
   * Return a new Decimal whose value is `x` truncated to an integer.
   *
   * x {number|string|Decimal}
   *
   */


  function trunc(x) {
    return finalise(x = new this(x), x.e + 1, 1);
  } // Create and configure initial Decimal constructor.


  Decimal = clone(DEFAULTS);
  Decimal['default'] = Decimal.Decimal = Decimal; // Create the internal constants from their string values.

  LN10 = new Decimal(LN10);
  PI = new Decimal(PI); // Export.
  // AMD.

  if (typeof define == 'function' && define.amd) {
    define(function () {
      return Decimal;
    }); // Node and other environments that support module.exports.
  } else if (typeof module != 'undefined' && module.exports) {
    module.exports = Decimal; // Browser.
  } else {
    if (!globalScope) {
      globalScope = typeof self != 'undefined' && self && self.self == self ? self : Function('return this')();
    }

    noConflict = globalScope.Decimal;

    Decimal.noConflict = function () {
      globalScope.Decimal = noConflict;
      return Decimal;
    };

    globalScope.Decimal = Decimal;
  }
})(void 0);

},{}],41:[function(require,module,exports){
"use strict";

var clone = require('clone');

module.exports = function (options, defaults) {
  options = options || {};
  Object.keys(defaults).forEach(function (key) {
    if (typeof options[key] === 'undefined') {
      options[key] = clone(defaults[key]);
    }
  });
  return options;
};

},{"clone":38}],42:[function(require,module,exports){
"use strict";

var ansiRegex = require('ansi-regex');

var wcwidth;

try {
  wcwidth = require('wcwidth');
} catch (e) {}

module.exports = Table;

function Table() {
  this.rows = [];
  this.row = {
    __printers: {}
  };
}
/**
 * Push the current row to the table and start a new one
 *
 * @returns {Table} `this`
 */


Table.prototype.newRow = function () {
  this.rows.push(this.row);
  this.row = {
    __printers: {}
  };
  return this;
};
/**
 * Write cell in the current row
 *
 * @param {String} col          - Column name
 * @param {Any} val             - Cell value
 * @param {Function} [printer]  - Printer function to format the value
 * @returns {Table} `this`
 */


Table.prototype.cell = function (col, val, printer) {
  this.row[col] = val;
  this.row.__printers[col] = printer || string;
  return this;
};
/**
 * String to separate columns
 */


Table.prototype.separator = '  ';

function string(val) {
  return val === undefined ? '' : '' + val;
}

function length(str) {
  var s = str.replace(ansiRegex(), '');
  return wcwidth == null ? s.length : wcwidth(s);
}
/**
 * Default printer
 */


Table.string = string;
/**
 * Create a printer which right aligns the content by padding with `ch` on the left
 *
 * @param {String} ch
 * @returns {Function}
 */

Table.leftPadder = leftPadder;

function leftPadder(ch) {
  return function (val, width) {
    var str = string(val);
    var len = length(str);
    var pad = width > len ? Array(width - len + 1).join(ch) : '';
    return pad + str;
  };
}
/**
 * Printer which right aligns the content
 */


var padLeft = Table.padLeft = leftPadder(' ');
/**
 * Create a printer which pads with `ch` on the right
 *
 * @param {String} ch
 * @returns {Function}
 */

Table.rightPadder = rightPadder;

function rightPadder(ch) {
  return function padRight(val, width) {
    var str = string(val);
    var len = length(str);
    var pad = width > len ? Array(width - len + 1).join(ch) : '';
    return str + pad;
  };
}

var padRight = rightPadder(' ');
/**
 * Create a printer for numbers
 *
 * Will do right alignment and optionally fix the number of digits after decimal point
 *
 * @param {Number} [digits] - Number of digits for fixpoint notation
 * @returns {Function}
 */

Table.number = function (digits) {
  return function (val, width) {
    if (val == null) return '';
    if (typeof val != 'number') throw new Error('' + val + ' is not a number');
    var str = digits == null ? val + '' : val.toFixed(digits);
    return padLeft(str, width);
  };
};

function each(row, fn) {
  for (var key in row) {
    if (key == '__printers') continue;
    fn(key, row[key]);
  }
}
/**
 * Get list of columns in printing order
 *
 * @returns {string[]}
 */


Table.prototype.columns = function () {
  var cols = {};

  for (var i = 0; i < 2; i++) {
    // do 2 times
    this.rows.forEach(function (row) {
      var idx = 0;
      each(row, function (key) {
        idx = Math.max(idx, cols[key] || 0);
        cols[key] = idx;
        idx++;
      });
    });
  }

  return Object.keys(cols).sort(function (a, b) {
    return cols[a] - cols[b];
  });
};
/**
 * Format just rows, i.e. print the table without headers and totals
 *
 * @returns {String} String representaion of the table
 */


Table.prototype.print = function () {
  var cols = this.columns();
  var separator = this.separator;
  var widths = {};
  var out = ''; // Calc widths

  this.rows.forEach(function (row) {
    each(row, function (key, val) {
      var str = row.__printers[key].call(row, val);

      widths[key] = Math.max(length(str), widths[key] || 0);
    });
  }); // Now print

  this.rows.forEach(function (row) {
    var line = '';
    cols.forEach(function (key) {
      var width = widths[key];
      var str = row.hasOwnProperty(key) ? '' + row.__printers[key].call(row, row[key], width) : '';
      line += padRight(str, width) + separator;
    });
    line = line.slice(0, -separator.length);
    out += line + '\n';
  });
  return out;
};
/**
 * Format the table
 *
 * @returns {String}
 */


Table.prototype.toString = function () {
  var cols = this.columns();
  var out = new Table(); // copy options

  out.separator = this.separator; // Write header

  cols.forEach(function (col) {
    out.cell(col, col);
  });
  out.newRow();
  out.pushDelimeter(cols); // Write body

  out.rows = out.rows.concat(this.rows); // Totals

  if (this.totals && this.rows.length) {
    out.pushDelimeter(cols);
    this.forEachTotal(out.cell.bind(out));
    out.newRow();
  }

  return out.print();
};
/**
 * Push delimeter row to the table (with each cell filled with dashs during printing)
 *
 * @param {String[]} [cols]
 * @returns {Table} `this`
 */


Table.prototype.pushDelimeter = function (cols) {
  cols = cols || this.columns();
  cols.forEach(function (col) {
    this.cell(col, undefined, leftPadder('-'));
  }, this);
  return this.newRow();
};
/**
 * Compute all totals and yield the results to `cb`
 *
 * @param {Function} cb - Callback function with signature `(column, value, printer)`
 */


Table.prototype.forEachTotal = function (cb) {
  for (var key in this.totals) {
    var aggr = this.totals[key];
    var acc = aggr.init;
    var len = this.rows.length;
    this.rows.forEach(function (row, idx) {
      acc = aggr.reduce.call(row, acc, row[key], idx, len);
    });
    cb(key, acc, aggr.printer);
  }
};
/**
 * Format the table so that each row represents column and each column represents row
 *
 * @param {Object} [opts]
 * @param {String} [ops.separator] - Column separation string
 * @param {Function} [opts.namePrinter] - Printer to format column names
 * @returns {String}
 */


Table.prototype.printTransposed = function (opts) {
  opts = opts || {};
  var out = new Table();
  out.separator = opts.separator || this.separator;
  this.columns().forEach(function (col) {
    out.cell(0, col, opts.namePrinter);
    this.rows.forEach(function (row, idx) {
      out.cell(idx + 1, row[col], row.__printers[col]);
    });
    out.newRow();
  }, this);
  return out.print();
};
/**
 * Sort the table
 *
 * @param {Function|string[]} [cmp] - Either compare function or a list of columns to sort on
 * @returns {Table} `this`
 */


Table.prototype.sort = function (cmp) {
  if (typeof cmp == 'function') {
    this.rows.sort(cmp);
    return this;
  }

  var keys = Array.isArray(cmp) ? cmp : this.columns();
  var comparators = keys.map(function (key) {
    var order = 'asc';
    var m = /(.*)\|\s*(asc|des)\s*$/.exec(key);

    if (m) {
      key = m[1];
      order = m[2];
    }

    return function (a, b) {
      return order == 'asc' ? compare(a[key], b[key]) : compare(b[key], a[key]);
    };
  });
  return this.sort(function (a, b) {
    for (var i = 0; i < comparators.length; i++) {
      var order = comparators[i](a, b);
      if (order != 0) return order;
    }

    return 0;
  });
};

function compare(a, b) {
  if (a === b) return 0;
  if (a === undefined) return 1;
  if (b === undefined) return -1;
  if (a === null) return 1;
  if (b === null) return -1;
  if (a > b) return 1;
  if (a < b) return -1;
  return compare(String(a), String(b));
}
/**
 * Add a total for the column
 *
 * @param {String} col - column name
 * @param {Object} [opts]
 * @param {Function} [opts.reduce = sum] - reduce(acc, val, idx, length) function to compute the total value
 * @param {Function} [opts.printer = padLeft] - Printer to format the total cell
 * @param {Any} [opts.init = 0] - Initial value for reduction
 * @returns {Table} `this`
 */


Table.prototype.total = function (col, opts) {
  opts = opts || {};
  this.totals = this.totals || {};
  this.totals[col] = {
    reduce: opts.reduce || Table.aggr.sum,
    printer: opts.printer || padLeft,
    init: opts.init == null ? 0 : opts.init
  };
  return this;
};
/**
 * Predefined helpers for totals
 */


Table.aggr = {};
/**
 * Create a printer which formats the value with `printer`,
 * adds the `prefix` to it and right aligns the whole thing
 *
 * @param {String} prefix
 * @param {Function} printer
 * @returns {printer}
 */

Table.aggr.printer = function (prefix, printer) {
  printer = printer || string;
  return function (val, width) {
    return padLeft(prefix + printer(val), width);
  };
};
/**
 * Sum reduction
 */


Table.aggr.sum = function (acc, val) {
  return acc + val;
};
/**
 * Average reduction
 */


Table.aggr.avg = function (acc, val, idx, len) {
  acc = acc + val;
  return idx + 1 == len ? acc / len : acc;
};
/**
 * Print the array or object
 *
 * @param {Array|Object} obj - Object to print
 * @param {Function|Object} [format] - Format options
 * @param {Function} [cb] - Table post processing and formating
 * @returns {String}
 */


Table.print = function (obj, format, cb) {
  var opts = format || {};
  format = typeof format == 'function' ? format : function (obj, cell) {
    for (var key in obj) {
      if (!obj.hasOwnProperty(key)) continue;
      var params = opts[key] || {};
      cell(params.name || key, obj[key], params.printer);
    }
  };
  var t = new Table();
  var cell = t.cell.bind(t);

  if (Array.isArray(obj)) {
    cb = cb || function (t) {
      return t.toString();
    };

    obj.forEach(function (item) {
      format(item, cell);
      t.newRow();
    });
  } else {
    cb = cb || function (t) {
      return t.printTransposed({
        separator: ' : '
      });
    };

    format(obj, cell);
    t.newRow();
  }

  return cb(t);
};
/**
 * Same as `Table.print()` but yields the result to `console.log()`
 */


Table.log = function (obj, format, cb) {
  console.log(Table.print(obj, format, cb));
};
/**
 * Same as `.toString()` but yields the result to `console.log()`
 */


Table.prototype.log = function () {
  console.log(this.toString());
};

},{"ansi-regex":35,"wcwidth":241}],43:[function(require,module,exports){
"use strict"; // Map the characters to escape to their escaped values. The list is derived
// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var defaultEscapes = {
  "{": "\\{",
  "}": "\\}",
  "\\": "\\textbackslash{}",
  "#": "\\#",
  $: "\\$",
  "%": "\\%",
  "&": "\\&",
  "^": "\\textasciicircum{}",
  _: "\\_",
  "~": "\\textasciitilde{}"
};
var formatEscapes = {
  "–": "\\--",
  "—": "\\---",
  " ": "~",
  "\t": "\\qquad{}",
  "\r\n": "\\\\newline{}",
  "\n": "\\\\newline{}"
};

var defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {
  return _extends({}, defaultEscapes, formatEscapes);
};
/**
 * Escape a string to be used in LaTeX documents.
 * @param {string} str the string to be escaped.
 * @param {boolean} params.preserveFormatting whether formatting escapes should
 *  be performed (default: false).
 * @param {function} params.escapeMapFn the function to modify the escape maps.
 * @return {string} the escaped string, ready to be used in LaTeX.
 */


module.exports = function (str) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$preserveFormatti = _ref.preserveFormatting,
      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,
      _ref$escapeMapFn = _ref.escapeMapFn,
      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;

  var runningStr = String(str);
  var result = "";
  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});
  var escapeKeys = Object.keys(escapes); // as it is reused later on
  // Algorithm: Go through the string character by character, if it matches
  // with one of the special characters then we'll replace it with the escaped
  // version.

  var _loop = function _loop() {
    var specialCharFound = false;
    escapeKeys.forEach(function (key, index) {
      if (specialCharFound) {
        return;
      }

      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {
        result += escapes[escapeKeys[index]];
        runningStr = runningStr.slice(key.length, runningStr.length);
        specialCharFound = true;
      }
    });

    if (!specialCharFound) {
      result += runningStr.slice(0, 1);
      runningStr = runningStr.slice(1, runningStr.length);
    }
  };

  while (runningStr) {
    _loop();
  }

  return result;
};

},{}],44:[function(require,module,exports){
'use strict';

function FFT(size) {
  this.size = size | 0;
  if (this.size <= 1 || (this.size & this.size - 1) !== 0) throw new Error('FFT size must be a power of two and bigger than 1');
  this._csize = size << 1; // NOTE: Use of `var` is intentional for old V8 versions

  var table = new Array(this.size * 2);

  for (var i = 0; i < table.length; i += 2) {
    var angle = Math.PI * i / this.size;
    table[i] = Math.cos(angle);
    table[i + 1] = -Math.sin(angle);
  }

  this.table = table; // Find size's power of two

  var power = 0;

  for (var t = 1; this.size > t; t <<= 1) {
    power++;
  } // Calculate initial step's width:
  //   * If we are full radix-4 - it is 2x smaller to give inital len=8
  //   * Otherwise it is the same as `power` to give len=4


  this._width = power % 2 === 0 ? power - 1 : power; // Pre-compute bit-reversal patterns

  this._bitrev = new Array(1 << this._width);

  for (var j = 0; j < this._bitrev.length; j++) {
    this._bitrev[j] = 0;

    for (var shift = 0; shift < this._width; shift += 2) {
      var revShift = this._width - shift - 2;
      this._bitrev[j] |= (j >>> shift & 3) << revShift;
    }
  }

  this._out = null;
  this._data = null;
  this._inv = 0;
}

module.exports = FFT;

FFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {
  var res = storage || new Array(complex.length >>> 1);

  for (var i = 0; i < complex.length; i += 2) {
    res[i >>> 1] = complex[i];
  }

  return res;
};

FFT.prototype.createComplexArray = function createComplexArray() {
  var res = new Array(this._csize);

  for (var i = 0; i < res.length; i++) {
    res[i] = 0;
  }

  return res;
};

FFT.prototype.toComplexArray = function toComplexArray(input, storage) {
  var res = storage || this.createComplexArray();

  for (var i = 0; i < res.length; i += 2) {
    res[i] = input[i >>> 1];
    res[i + 1] = 0;
  }

  return res;
};

FFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {
  var size = this._csize;
  var half = size >>> 1;

  for (var i = 2; i < half; i += 2) {
    spectrum[size - i] = spectrum[i];
    spectrum[size - i + 1] = -spectrum[i + 1];
  }
};

FFT.prototype.transform = function transform(out, data) {
  if (out === data) throw new Error('Input and output buffers must be different');
  this._out = out;
  this._data = data;
  this._inv = 0;

  this._transform4();

  this._out = null;
  this._data = null;
};

FFT.prototype.realTransform = function realTransform(out, data) {
  if (out === data) throw new Error('Input and output buffers must be different');
  this._out = out;
  this._data = data;
  this._inv = 0;

  this._realTransform4();

  this._out = null;
  this._data = null;
};

FFT.prototype.inverseTransform = function inverseTransform(out, data) {
  if (out === data) throw new Error('Input and output buffers must be different');
  this._out = out;
  this._data = data;
  this._inv = 1;

  this._transform4();

  for (var i = 0; i < out.length; i++) {
    out[i] /= this.size;
  }

  this._out = null;
  this._data = null;
}; // radix-4 implementation
//
// NOTE: Uses of `var` are intentional for older V8 version that do not
// support both `let compound assignments` and `const phi`


FFT.prototype._transform4 = function _transform4() {
  var out = this._out;
  var size = this._csize; // Initial step (permute and transform)

  var width = this._width;
  var step = 1 << width;
  var len = size / step << 1;
  var outOff;
  var t;
  var bitrev = this._bitrev;

  if (len === 4) {
    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {
      var off = bitrev[t];

      this._singleTransform2(outOff, off, step);
    }
  } else {
    // len === 8
    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {
      var _off = bitrev[t];

      this._singleTransform4(outOff, _off, step);
    }
  } // Loop through steps in decreasing order


  var inv = this._inv ? -1 : 1;
  var table = this.table;

  for (step >>= 2; step >= 2; step >>= 2) {
    len = size / step << 1;
    var quarterLen = len >>> 2; // Loop through offsets in the data

    for (outOff = 0; outOff < size; outOff += len) {
      // Full case
      var limit = outOff + quarterLen;

      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {
        var A = i;
        var B = A + quarterLen;
        var C = B + quarterLen;
        var D = C + quarterLen; // Original values

        var Ar = out[A];
        var Ai = out[A + 1];
        var Br = out[B];
        var Bi = out[B + 1];
        var Cr = out[C];
        var Ci = out[C + 1];
        var Dr = out[D];
        var Di = out[D + 1]; // Middle values

        var MAr = Ar;
        var MAi = Ai;
        var tableBr = table[k];
        var tableBi = inv * table[k + 1];
        var MBr = Br * tableBr - Bi * tableBi;
        var MBi = Br * tableBi + Bi * tableBr;
        var tableCr = table[2 * k];
        var tableCi = inv * table[2 * k + 1];
        var MCr = Cr * tableCr - Ci * tableCi;
        var MCi = Cr * tableCi + Ci * tableCr;
        var tableDr = table[3 * k];
        var tableDi = inv * table[3 * k + 1];
        var MDr = Dr * tableDr - Di * tableDi;
        var MDi = Dr * tableDi + Di * tableDr; // Pre-Final values

        var T0r = MAr + MCr;
        var T0i = MAi + MCi;
        var T1r = MAr - MCr;
        var T1i = MAi - MCi;
        var T2r = MBr + MDr;
        var T2i = MBi + MDi;
        var T3r = inv * (MBr - MDr);
        var T3i = inv * (MBi - MDi); // Final values

        var FAr = T0r + T2r;
        var FAi = T0i + T2i;
        var FCr = T0r - T2r;
        var FCi = T0i - T2i;
        var FBr = T1r + T3i;
        var FBi = T1i - T3r;
        var FDr = T1r - T3i;
        var FDi = T1i + T3r;
        out[A] = FAr;
        out[A + 1] = FAi;
        out[B] = FBr;
        out[B + 1] = FBi;
        out[C] = FCr;
        out[C + 1] = FCi;
        out[D] = FDr;
        out[D + 1] = FDi;
      }
    }
  }
}; // radix-2 implementation
//
// NOTE: Only called for len=4


FFT.prototype._singleTransform2 = function _singleTransform2(outOff, off, step) {
  var out = this._out;
  var data = this._data;
  var evenR = data[off];
  var evenI = data[off + 1];
  var oddR = data[off + step];
  var oddI = data[off + step + 1];
  var leftR = evenR + oddR;
  var leftI = evenI + oddI;
  var rightR = evenR - oddR;
  var rightI = evenI - oddI;
  out[outOff] = leftR;
  out[outOff + 1] = leftI;
  out[outOff + 2] = rightR;
  out[outOff + 3] = rightI;
}; // radix-4
//
// NOTE: Only called for len=8


FFT.prototype._singleTransform4 = function _singleTransform4(outOff, off, step) {
  var out = this._out;
  var data = this._data;
  var inv = this._inv ? -1 : 1;
  var step2 = step * 2;
  var step3 = step * 3; // Original values

  var Ar = data[off];
  var Ai = data[off + 1];
  var Br = data[off + step];
  var Bi = data[off + step + 1];
  var Cr = data[off + step2];
  var Ci = data[off + step2 + 1];
  var Dr = data[off + step3];
  var Di = data[off + step3 + 1]; // Pre-Final values

  var T0r = Ar + Cr;
  var T0i = Ai + Ci;
  var T1r = Ar - Cr;
  var T1i = Ai - Ci;
  var T2r = Br + Dr;
  var T2i = Bi + Di;
  var T3r = inv * (Br - Dr);
  var T3i = inv * (Bi - Di); // Final values

  var FAr = T0r + T2r;
  var FAi = T0i + T2i;
  var FBr = T1r + T3i;
  var FBi = T1i - T3r;
  var FCr = T0r - T2r;
  var FCi = T0i - T2i;
  var FDr = T1r - T3i;
  var FDi = T1i + T3r;
  out[outOff] = FAr;
  out[outOff + 1] = FAi;
  out[outOff + 2] = FBr;
  out[outOff + 3] = FBi;
  out[outOff + 4] = FCr;
  out[outOff + 5] = FCi;
  out[outOff + 6] = FDr;
  out[outOff + 7] = FDi;
}; // Real input radix-4 implementation


FFT.prototype._realTransform4 = function _realTransform4() {
  var out = this._out;
  var size = this._csize; // Initial step (permute and transform)

  var width = this._width;
  var step = 1 << width;
  var len = size / step << 1;
  var outOff;
  var t;
  var bitrev = this._bitrev;

  if (len === 4) {
    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {
      var off = bitrev[t];

      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);
    }
  } else {
    // len === 8
    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {
      var _off2 = bitrev[t];

      this._singleRealTransform4(outOff, _off2 >>> 1, step >>> 1);
    }
  } // Loop through steps in decreasing order


  var inv = this._inv ? -1 : 1;
  var table = this.table;

  for (step >>= 2; step >= 2; step >>= 2) {
    len = size / step << 1;
    var halfLen = len >>> 1;
    var quarterLen = halfLen >>> 1;
    var hquarterLen = quarterLen >>> 1; // Loop through offsets in the data

    for (outOff = 0; outOff < size; outOff += len) {
      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {
        var A = outOff + i;
        var B = A + quarterLen;
        var C = B + quarterLen;
        var D = C + quarterLen; // Original values

        var Ar = out[A];
        var Ai = out[A + 1];
        var Br = out[B];
        var Bi = out[B + 1];
        var Cr = out[C];
        var Ci = out[C + 1];
        var Dr = out[D];
        var Di = out[D + 1]; // Middle values

        var MAr = Ar;
        var MAi = Ai;
        var tableBr = table[k];
        var tableBi = inv * table[k + 1];
        var MBr = Br * tableBr - Bi * tableBi;
        var MBi = Br * tableBi + Bi * tableBr;
        var tableCr = table[2 * k];
        var tableCi = inv * table[2 * k + 1];
        var MCr = Cr * tableCr - Ci * tableCi;
        var MCi = Cr * tableCi + Ci * tableCr;
        var tableDr = table[3 * k];
        var tableDi = inv * table[3 * k + 1];
        var MDr = Dr * tableDr - Di * tableDi;
        var MDi = Dr * tableDi + Di * tableDr; // Pre-Final values

        var T0r = MAr + MCr;
        var T0i = MAi + MCi;
        var T1r = MAr - MCr;
        var T1i = MAi - MCi;
        var T2r = MBr + MDr;
        var T2i = MBi + MDi;
        var T3r = inv * (MBr - MDr);
        var T3i = inv * (MBi - MDi); // Final values

        var FAr = T0r + T2r;
        var FAi = T0i + T2i;
        var FBr = T1r + T3i;
        var FBi = T1i - T3r;
        out[A] = FAr;
        out[A + 1] = FAi;
        out[B] = FBr;
        out[B + 1] = FBi; // Output final middle point

        if (i === 0) {
          var FCr = T0r - T2r;
          var FCi = T0i - T2i;
          out[C] = FCr;
          out[C + 1] = FCi;
          continue;
        } // Do not overwrite ourselves


        if (i === hquarterLen) continue; // In the flipped case:
        // MAi = -MAi
        // MBr=-MBi, MBi=-MBr
        // MCr=-MCr
        // MDr=MDi, MDi=MDr

        var ST0r = T1r;
        var ST0i = -T1i;
        var ST1r = T0r;
        var ST1i = -T0i;
        var ST2r = -inv * T3i;
        var ST2i = -inv * T3r;
        var ST3r = -inv * T2i;
        var ST3i = -inv * T2r;
        var SFAr = ST0r + ST2r;
        var SFAi = ST0i + ST2i;
        var SFBr = ST1r + ST3i;
        var SFBi = ST1i - ST3r;
        var SA = outOff + quarterLen - i;
        var SB = outOff + halfLen - i;
        out[SA] = SFAr;
        out[SA + 1] = SFAi;
        out[SB] = SFBr;
        out[SB + 1] = SFBi;
      }
    }
  }
}; // radix-2 implementation
//
// NOTE: Only called for len=4


FFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff, off, step) {
  var out = this._out;
  var data = this._data;
  var evenR = data[off];
  var oddR = data[off + step];
  var leftR = evenR + oddR;
  var rightR = evenR - oddR;
  out[outOff] = leftR;
  out[outOff + 1] = 0;
  out[outOff + 2] = rightR;
  out[outOff + 3] = 0;
}; // radix-4
//
// NOTE: Only called for len=8


FFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff, off, step) {
  var out = this._out;
  var data = this._data;
  var inv = this._inv ? -1 : 1;
  var step2 = step * 2;
  var step3 = step * 3; // Original values

  var Ar = data[off];
  var Br = data[off + step];
  var Cr = data[off + step2];
  var Dr = data[off + step3]; // Pre-Final values

  var T0r = Ar + Cr;
  var T1r = Ar - Cr;
  var T2r = Br + Dr;
  var T3r = inv * (Br - Dr); // Final values

  var FAr = T0r + T2r;
  var FBr = T1r;
  var FBi = -T3r;
  var FCr = T0r - T2r;
  var FDr = T1r;
  var FDi = T3r;
  out[outOff] = FAr;
  out[outOff + 1] = 0;
  out[outOff + 2] = FBr;
  out[outOff + 3] = FBi;
  out[outOff + 4] = FCr;
  out[outOff + 5] = 0;
  out[outOff + 6] = FDr;
  out[outOff + 7] = FDi;
};

},{}],45:[function(require,module,exports){
"use strict";

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

},{}],46:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
 * Author: Jim Palmer (based on chunking idea from Dave Koelle)
 */

/*jshint unused:false */
module.exports = function naturalSort(a, b) {
  "use strict";

  var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
      sre = /(^[ ]*|[ ]*$)/g,
      dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
      hre = /^0x[0-9a-f]+$/i,
      ore = /^0/,
      i = function i(s) {
    return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s;
  },
      // convert all to strings strip whitespace
  x = i(a).replace(sre, '') || '',
      y = i(b).replace(sre, '') || '',
      // chunk/tokenize
  xN = x.replace(re, '\0$1\0').replace(/\0$/, '').replace(/^\0/, '').split('\0'),
      yN = y.replace(re, '\0$1\0').replace(/\0$/, '').replace(/^\0/, '').split('\0'),
      // numeric, hex or date detection
  xD = parseInt(x.match(hre), 16) || xN.length !== 1 && x.match(dre) && Date.parse(x),
      yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
      oFxNcL,
      oFyNcL; // first try and sort Hex codes or Dates


  if (yD) {
    if (xD < yD) {
      return -1;
    } else if (xD > yD) {
      return 1;
    }
  } // natural sorting through split numeric strings and default strings


  for (var cLoc = 0, numS = Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
    // find floats not starting with '0', string or 0 if not defined (Clint Priest)
    oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
    oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0; // handle numeric vs string comparison - number < string - (Kyle Adams)

    if (isNaN(oFxNcL) !== isNaN(oFyNcL)) {
      return isNaN(oFxNcL) ? 1 : -1;
    } // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
    else if (_typeof(oFxNcL) !== _typeof(oFyNcL)) {
        oFxNcL += '';
        oFyNcL += '';
      }

    if (oFxNcL < oFyNcL) {
      return -1;
    }

    if (oFxNcL > oFyNcL) {
      return 1;
    }
  }

  return 0;
};

},{}],47:[function(require,module,exports){
"use strict";

module.exports = require('./lib/core/core');

},{"./lib/core/core":48}],48:[function(require,module,exports){
"use strict";

var isFactory = require('./../utils/object').isFactory;

var typedFactory = require('./typed');

var emitter = require('./../utils/emitter');

var importFactory = require('./function/import');

var configFactory = require('./function/config');
/**
 * Math.js core. Creates a new, empty math.js instance
 * @param {Object} [options] Available options:
 *                            {number} epsilon
 *                              Minimum relative difference between two
 *                              compared values, used by all comparison functions.
 *                            {string} matrix
 *                              A string 'Matrix' (default) or 'Array'.
 *                            {string} number
 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
 *                            {number} precision
 *                              The number of significant digits for BigNumbers.
 *                              Not applicable for Numbers.
 *                            {boolean} predictable
 *                              Predictable output type of functions. When true,
 *                              output type depends only on the input types. When
 *                              false (default), output type can vary depending
 *                              on input values. For example `math.sqrt(-4)`
 *                              returns `complex('2i')` when predictable is false, and
 *                              returns `NaN` when true.
 *                            {string} randomSeed
 *                              Random seed for seeded pseudo random number generator.
 *                              Set to null to randomly seed.
 * @returns {Object} Returns a bare-bone math.js instance containing
 *                   functions:
 *                   - `import` to add new functions
 *                   - `config` to change configuration
 *                   - `on`, `off`, `once`, `emit` for events
 */


exports.create = function create(options) {
  // simple test for ES5 support
  if (typeof Object.create !== 'function') {
    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
  } // cached factories and instances


  var factories = [];
  var instances = []; // create a namespace for the mathjs instance, and attach emitter functions

  var math = emitter.mixin({});
  math.type = {};
  math.expression = {
    transform: {},
    mathWithTransform: {}
  }; // create a new typed instance

  math.typed = typedFactory.create(math.type); // create configuration options. These are private

  var _config = {
    // minimum relative difference between two compared values,
    // used by all comparison functions
    epsilon: 1e-12,
    // type of default matrix output. Choose 'matrix' (default) or 'array'
    matrix: 'Matrix',
    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
    number: 'number',
    // number of significant digits in BigNumbers
    precision: 64,
    // predictable output type of functions. When true, output type depends only
    // on the input types. When false (default), output type can vary depending
    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
    // predictable is false, and returns `NaN` when true.
    predictable: false,
    // random seed for seeded pseudo random number generation
    // null = randomly seed
    randomSeed: null
  };
  /**
   * Load a function or data type from a factory.
   * If the function or data type already exists, the existing instance is
   * returned.
   * @param {{type: string, name: string, factory: Function}} factory
   * @returns {*}
   */

  function load(factory) {
    if (!isFactory(factory)) {
      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
    }

    var index = factories.indexOf(factory);
    var instance;

    if (index === -1) {
      // doesn't yet exist
      if (factory.math === true) {
        // pass with math namespace
        instance = factory.factory(math.type, _config, load, math.typed, math);
      } else {
        instance = factory.factory(math.type, _config, load, math.typed);
      } // append to the cache


      factories.push(factory);
      instances.push(instance);
    } else {
      // already existing function, return the cached instance
      instance = instances[index];
    }

    return instance;
  } // load the import and config functions


  math['import'] = load(importFactory);
  math['config'] = load(configFactory);
  math.expression.mathWithTransform['config'] = math['config']; // apply options

  if (options) {
    math.config(options);
  }

  return math;
};

},{"./../utils/emitter":225,"./../utils/object":230,"./function/config":49,"./function/import":50,"./typed":51}],49:[function(require,module,exports){
'use strict';

var object = require('../../utils/object');

function factory(type, config, load, typed, math) {
  var MATRIX = ['Matrix', 'Array']; // valid values for option matrix

  var NUMBER = ['number', 'BigNumber', 'Fraction']; // valid values for option number

  /**
   * Set configuration options for math.js, and get current options.
   * Will emit a 'config' event, with arguments (curr, prev, changes).
   *
   * Syntax:
   *
   *     math.config(config: Object): Object
   *
   * Examples:
   *
   *     math.config().number;                // outputs 'number'
   *     math.eval('0.4');                    // outputs number 0.4
   *     math.config({number: 'Fraction'});
   *     math.eval('0.4');                    // outputs Fraction 2/5
   *
   * @param {Object} [options] Available options:
   *                            {number} epsilon
   *                              Minimum relative difference between two
   *                              compared values, used by all comparison functions.
   *                            {string} matrix
   *                              A string 'Matrix' (default) or 'Array'.
   *                            {string} number
   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
   *                            {number} precision
   *                              The number of significant digits for BigNumbers.
   *                              Not applicable for Numbers.
   *                            {string} parenthesis
   *                              How to display parentheses in LaTeX and string
   *                              output.
   *                            {string} randomSeed
   *                              Random seed for seeded pseudo random number generator.
   *                              Set to null to randomly seed.
   * @return {Object} Returns the current configuration
   */

  function _config(options) {
    if (options) {
      var prev = object.map(config, object.clone); // validate some of the options

      validateOption(options, 'matrix', MATRIX);
      validateOption(options, 'number', NUMBER); // merge options

      object.deepExtend(config, options);
      var curr = object.map(config, object.clone);
      var changes = object.map(options, object.clone); // emit 'config' event

      math.emit('config', curr, prev, changes);
      return curr;
    } else {
      return object.map(config, object.clone);
    }
  } // attach the valid options to the function so they can be extended


  _config.MATRIX = MATRIX;
  _config.NUMBER = NUMBER;
  return _config;
}
/**
 * Test whether an Array contains a specific item.
 * @param {Array.<string>} array
 * @param {string} item
 * @return {boolean}
 */


function contains(array, item) {
  return array.indexOf(item) !== -1;
}
/**
 * Find a string in an array. Case insensitive search
 * @param {Array.<string>} array
 * @param {string} item
 * @return {number} Returns the index when found. Returns -1 when not found
 */


function findIndex(array, item) {
  return array.map(function (i) {
    return i.toLowerCase();
  }).indexOf(item.toLowerCase());
}
/**
 * Validate an option
 * @param {Object} options         Object with options
 * @param {string} name            Name of the option to validate
 * @param {Array.<string>} values  Array with valid values for this option
 */


function validateOption(options, name, values) {
  if (options[name] !== undefined && !contains(values, options[name])) {
    var index = findIndex(values, options[name]);

    if (index !== -1) {
      // right value, wrong casing
      // TODO: lower case values are deprecated since v3, remove this warning some day.
      console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');
      options[name] = values[index]; // change the option to the right casing
    } else {
      // unknown value
      console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
    }
  }
}

exports.name = 'config';
exports.math = true; // request the math namespace as fifth argument

exports.factory = factory;

},{"../../utils/object":230}],50:[function(require,module,exports){
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var lazy = require('../../utils/object').lazy;

var isFactory = require('../../utils/object').isFactory;

var traverse = require('../../utils/object').traverse;

var ArgumentsError = require('../../error/ArgumentsError');

function factory(type, config, load, typed, math) {
  /**
   * Import functions from an object or a module
   *
   * Syntax:
   *
   *    math.import(object)
   *    math.import(object, options)
   *
   * Where:
   *
   * - `object: Object`
   *   An object with functions to be imported.
   * - `options: Object` An object with import options. Available options:
   *   - `override: boolean`
   *     If true, existing functions will be overwritten. False by default.
   *   - `silent: boolean`
   *     If true, the function will not throw errors on duplicates or invalid
   *     types. False by default.
   *   - `wrap: boolean`
   *     If true, the functions will be wrapped in a wrapper function
   *     which converts data types like Matrix to primitive data types like Array.
   *     The wrapper is needed when extending math.js with libraries which do not
   *     support these data type. False by default.
   *
   * Examples:
   *
   *    // define new functions and variables
   *    math.import({
   *      myvalue: 42,
   *      hello: function (name) {
   *        return 'hello, ' + name + '!';
   *      }
   *    });
   *
   *    // use the imported function and variable
   *    math.myvalue * 2;               // 84
   *    math.hello('user');             // 'hello, user!'
   *
   *    // import the npm module 'numbers'
   *    // (must be installed first with `npm install numbers`)
   *    math.import(require('numbers'), {wrap: true});
   *
   *    math.fibonacci(7); // returns 13
   *
   * @param {Object | Array} object   Object with functions to be imported.
   * @param {Object} [options]        Import options.
   */
  function math_import(object, options) {
    var num = arguments.length;

    if (num !== 1 && num !== 2) {
      throw new ArgumentsError('import', num, 1, 2);
    }

    if (!options) {
      options = {};
    }

    if (isFactory(object)) {
      _importFactory(object, options);
    } // TODO: allow a typed-function with name too
    else if (Array.isArray(object)) {
        object.forEach(function (entry) {
          math_import(entry, options);
        });
      } else if (_typeof(object) === 'object') {
        // a map with functions
        for (var name in object) {
          if (object.hasOwnProperty(name)) {
            var value = object[name];

            if (isSupportedType(value)) {
              _import(name, value, options);
            } else if (isFactory(object)) {
              _importFactory(object, options);
            } else {
              math_import(value, options);
            }
          }
        }
      } else {
        if (!options.silent) {
          throw new TypeError('Factory, Object, or Array expected');
        }
      }
  }
  /**
   * Add a property to the math namespace and create a chain proxy for it.
   * @param {string} name
   * @param {*} value
   * @param {Object} options  See import for a description of the options
   * @private
   */


  function _import(name, value, options) {
    // TODO: refactor this function, it's to complicated and contains duplicate code
    if (options.wrap && typeof value === 'function') {
      // create a wrapper around the function
      value = _wrap(value);
    }

    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
      if (options.override) {
        // give the typed function the right name
        value = typed(name, value.signatures);
      } else {
        // merge the existing and typed function
        value = typed(math[name], value);
      }

      math[name] = value;

      _importTransform(name, value);

      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }

    if (math[name] === undefined || options.override) {
      math[name] = value;

      _importTransform(name, value);

      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }

    if (!options.silent) {
      throw new Error('Cannot import "' + name + '": already exists');
    }
  }

  function _importTransform(name, value) {
    if (value && typeof value.transform === 'function') {
      math.expression.transform[name] = value.transform;

      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value.transform;
      }
    } else {
      // remove existing transform
      delete math.expression.transform[name];

      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value;
      }
    }
  }
  /**
   * Create a wrapper a round an function which converts the arguments
   * to their primitive values (like convert a Matrix to Array)
   * @param {Function} fn
   * @return {Function} Returns the wrapped function
   * @private
   */


  function _wrap(fn) {
    var wrapper = function wrapper() {
      var args = [];

      for (var i = 0, len = arguments.length; i < len; i++) {
        var arg = arguments[i];
        args[i] = arg && arg.valueOf();
      }

      return fn.apply(math, args);
    };

    if (fn.transform) {
      wrapper.transform = fn.transform;
    }

    return wrapper;
  }
  /**
   * Import an instance of a factory into math.js
   * @param {{factory: Function, name: string, path: string, math: boolean}} factory
   * @param {Object} options  See import for a description of the options
   * @private
   */


  function _importFactory(factory, options) {
    if (typeof factory.name === 'string') {
      var name = factory.name;
      var existingTransform = name in math.expression.transform;
      var namespace = factory.path ? traverse(math, factory.path) : math;
      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;

      var resolver = function resolver() {
        var instance = load(factory);

        if (instance && typeof instance.transform === 'function') {
          throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
        }

        if (isTypedFunction(existing) && isTypedFunction(instance)) {
          if (options.override) {// replace the existing typed function (nothing to do)
          } else {
            // merge the existing and new typed function
            instance = typed(existing, instance);
          }

          return instance;
        }

        if (existing === undefined || options.override) {
          return instance;
        }

        if (!options.silent) {
          throw new Error('Cannot import "' + name + '": already exists');
        }
      };

      if (factory.lazy !== false) {
        lazy(namespace, name, resolver);

        if (!existingTransform) {
          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {
            lazy(math.expression.mathWithTransform, name, resolver);
          }
        }
      } else {
        namespace[name] = resolver();

        if (!existingTransform) {
          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {
            math.expression.mathWithTransform[name] = resolver();
          }
        }
      }

      math.emit('import', name, resolver, factory.path);
    } else {
      // unnamed factory.
      // no lazy loading
      load(factory);
    }
  }
  /**
   * Check whether given object is a type which can be imported
   * @param {Function | number | string | boolean | null | Unit | Complex} object
   * @return {boolean}
   * @private
   */


  function isSupportedType(object) {
    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || object && type.isUnit(object) || object && type.isComplex(object) || object && type.isBigNumber(object) || object && type.isFraction(object) || object && type.isMatrix(object) || object && Array.isArray(object);
  }
  /**
   * Test whether a given thing is a typed-function
   * @param {*} fn
   * @return {boolean} Returns true when `fn` is a typed-function
   */


  function isTypedFunction(fn) {
    return typeof fn === 'function' && _typeof(fn.signatures) === 'object';
  }

  function allowedInExpressions(name) {
    return !unsafe.hasOwnProperty(name);
  }

  function factoryAllowedInExpressions(factory) {
    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);
  } // namespaces and functions not available in the parser for safety reasons


  var unsafe = {
    'expression': true,
    'type': true,
    'docs': true,
    'error': true,
    'json': true,
    'chain': true // chain method not supported. Note that there is a unit chain too.

  };
  return math_import;
}

exports.math = true; // request access to the math namespace as 5th argument of the factory function

exports.name = 'import';
exports.factory = factory;
exports.lazy = true;

},{"../../error/ArgumentsError":52,"../../utils/object":230}],51:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var typedFunction = require('typed-function');

var digits = require('./../utils/number').digits;

var isBigNumber = require('./../utils/bignumber/isBigNumber');

var isMatrix = require('./../utils/collection/isMatrix'); // returns a new instance of typed-function


var _createTyped = function createTyped() {
  // initially, return the original instance of typed-function
  // consecutively, return a new instance from typed.create.
  _createTyped = typedFunction.create;
  return typedFunction;
};
/**
 * Factory function for creating a new typed instance
 * @param {Object} type   Object with data types like Complex and BigNumber
 * @returns {Function}
 */


exports.create = function create(type) {
  // TODO: typed-function must be able to silently ignore signatures with unknown data types
  // type checks for all known types
  //
  // note that:
  //
  // - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
  //   instanceof cannot be used because that would not allow to pass data from
  //   one instance of math.js to another since each has it's own instance of Unit.
  // - check the `isUnit` property via the constructor, so there will be no
  //   matches for "fake" instances like plain objects with a property `isUnit`.
  //   That is important for security reasons.
  // - It must not be possible to override the type checks used internally,
  //   for security reasons, so these functions are not exposed in the expression
  //   parser.
  type.isNumber = function (x) {
    return typeof x === 'number';
  };

  type.isComplex = function (x) {
    return type.Complex && x instanceof type.Complex || false;
  };

  type.isBigNumber = isBigNumber;

  type.isFraction = function (x) {
    return type.Fraction && x instanceof type.Fraction || false;
  };

  type.isUnit = function (x) {
    return x && x.constructor.prototype.isUnit || false;
  };

  type.isString = function (x) {
    return typeof x === 'string';
  };

  type.isArray = Array.isArray;
  type.isMatrix = isMatrix;

  type.isDenseMatrix = function (x) {
    return x && x.isDenseMatrix && x.constructor.prototype.isMatrix || false;
  };

  type.isSparseMatrix = function (x) {
    return x && x.isSparseMatrix && x.constructor.prototype.isMatrix || false;
  };

  type.isRange = function (x) {
    return x && x.constructor.prototype.isRange || false;
  };

  type.isIndex = function (x) {
    return x && x.constructor.prototype.isIndex || false;
  };

  type.isBoolean = function (x) {
    return typeof x === 'boolean';
  };

  type.isResultSet = function (x) {
    return x && x.constructor.prototype.isResultSet || false;
  };

  type.isHelp = function (x) {
    return x && x.constructor.prototype.isHelp || false;
  };

  type.isFunction = function (x) {
    return typeof x === 'function';
  };

  type.isDate = function (x) {
    return x instanceof Date;
  };

  type.isRegExp = function (x) {
    return x instanceof RegExp;
  };

  type.isObject = function (x) {
    return _typeof(x) === 'object';
  };

  type.isNull = function (x) {
    return x === null;
  };

  type.isUndefined = function (x) {
    return x === undefined;
  };

  type.isAccessorNode = function (x) {
    return x && x.isAccessorNode && x.constructor.prototype.isNode || false;
  };

  type.isArrayNode = function (x) {
    return x && x.isArrayNode && x.constructor.prototype.isNode || false;
  };

  type.isAssignmentNode = function (x) {
    return x && x.isAssignmentNode && x.constructor.prototype.isNode || false;
  };

  type.isBlockNode = function (x) {
    return x && x.isBlockNode && x.constructor.prototype.isNode || false;
  };

  type.isConditionalNode = function (x) {
    return x && x.isConditionalNode && x.constructor.prototype.isNode || false;
  };

  type.isConstantNode = function (x) {
    return x && x.isConstantNode && x.constructor.prototype.isNode || false;
  };

  type.isFunctionAssignmentNode = function (x) {
    return x && x.isFunctionAssignmentNode && x.constructor.prototype.isNode || false;
  };

  type.isFunctionNode = function (x) {
    return x && x.isFunctionNode && x.constructor.prototype.isNode || false;
  };

  type.isIndexNode = function (x) {
    return x && x.isIndexNode && x.constructor.prototype.isNode || false;
  };

  type.isNode = function (x) {
    return x && x.isNode && x.constructor.prototype.isNode || false;
  };

  type.isObjectNode = function (x) {
    return x && x.isObjectNode && x.constructor.prototype.isNode || false;
  };

  type.isOperatorNode = function (x) {
    return x && x.isOperatorNode && x.constructor.prototype.isNode || false;
  };

  type.isParenthesisNode = function (x) {
    return x && x.isParenthesisNode && x.constructor.prototype.isNode || false;
  };

  type.isRangeNode = function (x) {
    return x && x.isRangeNode && x.constructor.prototype.isNode || false;
  };

  type.isSymbolNode = function (x) {
    return x && x.isSymbolNode && x.constructor.prototype.isNode || false;
  };

  type.isChain = function (x) {
    return x && x.constructor.prototype.isChain || false;
  }; // get a new instance of typed-function


  var typed = _createTyped(); // define all types. The order of the types determines in which order function
  // arguments are type-checked (so for performance it's important to put the
  // most used types first).


  typed.types = [{
    name: 'number',
    test: type.isNumber
  }, {
    name: 'Complex',
    test: type.isComplex
  }, {
    name: 'BigNumber',
    test: type.isBigNumber
  }, {
    name: 'Fraction',
    test: type.isFraction
  }, {
    name: 'Unit',
    test: type.isUnit
  }, {
    name: 'string',
    test: type.isString
  }, {
    name: 'Array',
    test: type.isArray
  }, {
    name: 'Matrix',
    test: type.isMatrix
  }, {
    name: 'DenseMatrix',
    test: type.isDenseMatrix
  }, {
    name: 'SparseMatrix',
    test: type.isSparseMatrix
  }, {
    name: 'Range',
    test: type.isRange
  }, {
    name: 'Index',
    test: type.isIndex
  }, {
    name: 'boolean',
    test: type.isBoolean
  }, {
    name: 'ResultSet',
    test: type.isResultSet
  }, {
    name: 'Help',
    test: type.isHelp
  }, {
    name: 'function',
    test: type.isFunction
  }, {
    name: 'Date',
    test: type.isDate
  }, {
    name: 'RegExp',
    test: type.isRegExp
  }, {
    name: 'Object',
    test: type.isObject
  }, {
    name: 'null',
    test: type.isNull
  }, {
    name: 'undefined',
    test: type.isUndefined
  }, {
    name: 'OperatorNode',
    test: type.isOperatorNode
  }, {
    name: 'ConstantNode',
    test: type.isConstantNode
  }, {
    name: 'SymbolNode',
    test: type.isSymbolNode
  }, {
    name: 'ParenthesisNode',
    test: type.isParenthesisNode
  }, {
    name: 'FunctionNode',
    test: type.isFunctionNode
  }, {
    name: 'FunctionAssignmentNode',
    test: type.isFunctionAssignmentNode
  }, {
    name: 'ArrayNode',
    test: type.isArrayNode
  }, {
    name: 'AssignmentNode',
    test: type.isAssignmentNode
  }, {
    name: 'BlockNode',
    test: type.isBlockNode
  }, {
    name: 'ConditionalNode',
    test: type.isConditionalNode
  }, {
    name: 'IndexNode',
    test: type.isIndexNode
  }, {
    name: 'RangeNode',
    test: type.isRangeNode
  }, {
    name: 'Node',
    test: type.isNode
  }]; // TODO: add conversion from BigNumber to number?

  typed.conversions = [{
    from: 'number',
    to: 'BigNumber',
    convert: function convert(x) {
      // note: conversion from number to BigNumber can fail if x has >15 digits
      if (digits(x) > 15) {
        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
      }

      return new type.BigNumber(x);
    }
  }, {
    from: 'number',
    to: 'Complex',
    convert: function convert(x) {
      return new type.Complex(x, 0);
    }
  }, {
    from: 'number',
    to: 'string',
    convert: function convert(x) {
      return x + '';
    }
  }, {
    from: 'BigNumber',
    to: 'Complex',
    convert: function convert(x) {
      return new type.Complex(x.toNumber(), 0);
    }
  }, {
    from: 'Fraction',
    to: 'BigNumber',
    convert: function convert(x) {
      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
    }
  }, {
    from: 'Fraction',
    to: 'Complex',
    convert: function convert(x) {
      return new type.Complex(x.valueOf(), 0);
    }
  }, {
    from: 'number',
    to: 'Fraction',
    convert: function convert(x) {
      var f = new type.Fraction(x);

      if (f.valueOf() !== x) {
        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
      }

      return new type.Fraction(x);
    }
  }, {
    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
    //  from: 'Fraction',
    //  to: 'number',
    //  convert: function (x) {
    //    return x.valueOf();
    //  }
    //}, {
    from: 'string',
    to: 'number',
    convert: function convert(x) {
      var n = Number(x);

      if (isNaN(n)) {
        throw new Error('Cannot convert "' + x + '" to a number');
      }

      return n;
    }
  }, {
    from: 'string',
    to: 'BigNumber',
    convert: function convert(x) {
      try {
        return new type.BigNumber(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to BigNumber');
      }
    }
  }, {
    from: 'string',
    to: 'Fraction',
    convert: function convert(x) {
      try {
        return new type.Fraction(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Fraction');
      }
    }
  }, {
    from: 'string',
    to: 'Complex',
    convert: function convert(x) {
      try {
        return new type.Complex(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Complex');
      }
    }
  }, {
    from: 'boolean',
    to: 'number',
    convert: function convert(x) {
      return +x;
    }
  }, {
    from: 'boolean',
    to: 'BigNumber',
    convert: function convert(x) {
      return new type.BigNumber(+x);
    }
  }, {
    from: 'boolean',
    to: 'Fraction',
    convert: function convert(x) {
      return new type.Fraction(+x);
    }
  }, {
    from: 'boolean',
    to: 'string',
    convert: function convert(x) {
      return +x;
    }
  }, {
    from: 'null',
    to: 'number',
    convert: function convert() {
      return 0;
    }
  }, {
    from: 'null',
    to: 'string',
    convert: function convert() {
      return 'null';
    }
  }, {
    from: 'null',
    to: 'BigNumber',
    convert: function convert() {
      return new type.BigNumber(0);
    }
  }, {
    from: 'null',
    to: 'Fraction',
    convert: function convert() {
      return new type.Fraction(0);
    }
  }, {
    from: 'Array',
    to: 'Matrix',
    convert: function convert(array) {
      // TODO: how to decide on the right type of matrix to create?
      return new type.DenseMatrix(array);
    }
  }, {
    from: 'Matrix',
    to: 'Array',
    convert: function convert(matrix) {
      return matrix.valueOf();
    }
  }];
  return typed;
};

},{"./../utils/bignumber/isBigNumber":214,"./../utils/collection/isMatrix":221,"./../utils/number":229,"typed-function":239}],52:[function(require,module,exports){
'use strict';
/**
 * Create a syntax error with the message:
 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
 * @param {string} fn     Function name
 * @param {number} count  Actual argument count
 * @param {number} min    Minimum required argument count
 * @param {number} [max]  Maximum required argument count
 * @extends Error
 */

function ArgumentsError(fn, count, min, max) {
  if (!(this instanceof ArgumentsError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.fn = fn;
  this.count = count;
  this.min = min;
  this.max = max;
  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max != undefined ? '-' + max : '') + ' expected)';
  this.stack = new Error().stack;
}

ArgumentsError.prototype = new Error();
ArgumentsError.prototype.constructor = Error;
ArgumentsError.prototype.name = 'ArgumentsError';
ArgumentsError.prototype.isArgumentsError = true;
module.exports = ArgumentsError;

},{}],53:[function(require,module,exports){
'use strict';
/**
 * Create a range error with the message:
 *     'Dimension mismatch (<actual size> != <expected size>)'
 * @param {number | number[]} actual        The actual size
 * @param {number | number[]} expected      The expected size
 * @param {string} [relation='!=']          Optional relation between actual
 *                                          and expected size: '!=', '<', etc.
 * @extends RangeError
 */

function DimensionError(actual, expected, relation) {
  if (!(this instanceof DimensionError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.actual = actual;
  this.expected = expected;
  this.relation = relation;
  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
  this.stack = new Error().stack;
}

DimensionError.prototype = new RangeError();
DimensionError.prototype.constructor = RangeError;
DimensionError.prototype.name = 'DimensionError';
DimensionError.prototype.isDimensionError = true;
module.exports = DimensionError;

},{}],54:[function(require,module,exports){
'use strict';
/**
 * Create a range error with the message:
 *     'Index out of range (index < min)'
 *     'Index out of range (index < max)'
 *
 * @param {number} index     The actual index
 * @param {number} [min=0]   Minimum index (included)
 * @param {number} [max]     Maximum index (excluded)
 * @extends RangeError
 */

function IndexError(index, min, max) {
  if (!(this instanceof IndexError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.index = index;

  if (arguments.length < 3) {
    this.min = 0;
    this.max = min;
  } else {
    this.min = min;
    this.max = max;
  }

  if (this.min !== undefined && this.index < this.min) {
    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
  } else if (this.max !== undefined && this.index >= this.max) {
    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
  } else {
    this.message = 'Index out of range (' + this.index + ')';
  }

  this.stack = new Error().stack;
}

IndexError.prototype = new RangeError();
IndexError.prototype.constructor = RangeError;
IndexError.prototype.name = 'IndexError';
IndexError.prototype.isIndexError = true;
module.exports = IndexError;

},{}],55:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the absolute value of a number. For matrices, the function is
   * evaluated element wise.
   *
   * Syntax:
   *
   *    math.abs(x)
   *
   * Examples:
   *
   *    math.abs(3.5);                // returns number 3.5
   *    math.abs(-4.2);               // returns number 4.2
   *
   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]
   *
   * See also:
   *
   *    sign
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            A number or matrix for which to get the absolute value
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Absolute value of `x`
   */
  var abs = typed('abs', {
    'number': Math.abs,
    'Complex': function Complex(x) {
      return x.abs();
    },
    'BigNumber': function BigNumber(x) {
      return x.abs();
    },
    'Fraction': function Fraction(x) {
      return x.abs();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since abs(0) = 0
      return deepMap(x, abs, true);
    },
    'Unit': function Unit(x) {
      return x.abs();
    }
  });
  abs.toTex = {
    1: '\\left|${args[0]}\\right|'
  };
  return abs;
}

exports.name = 'abs';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],56:[function(require,module,exports){
'use strict';

var extend = require('../../utils/object').extend;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var addScalar = load(require('./addScalar'));

  var latex = require('../../utils/latex.js');

  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));
  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Add two or more values, `x + y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.add(x, y)
   *    math.add(x, y, z, ...)
   *
   * Examples:
   *
   *    math.add(2, 3);               // returns number 5
   *    math.add(2, 3, 4);            // returns number 9
   *
   *    var a = math.complex(2, 3);
   *    var b = math.complex(-4, 1);
   *    math.add(a, b);               // returns Complex -2 + 4i
   *
   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]
   *
   *    var c = math.unit('5 cm');
   *    var d = math.unit('2.1 mm');
   *    math.add(c, d);               // returns Unit 52.1 mm
   *
   *    math.add("2.3", "4");         // returns number 6.3
   *
   * See also:
   *
   *    subtract, sum
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
   */

  var add = typed('add', extend({
    // we extend the signatures of addScalar with signatures dealing with matrices
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm04(x, y, addScalar);
              break;

            default:
              // sparse + dense
              c = algorithm01(y, x, addScalar, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm01(x, y, addScalar, false);
              break;

            default:
              // dense + dense
              c = algorithm13(x, y, addScalar);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return add(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return add(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return add(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm10(x, y, addScalar, false);
          break;

        default:
          c = algorithm14(x, y, addScalar, false);
          break;
      }

      return c;
    },
    'any, Matrix': function anyMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm10(y, x, addScalar, true);
          break;

        default:
          c = algorithm14(y, x, addScalar, true);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, addScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, addScalar, true).valueOf();
    },
    'any, any': addScalar,
    'Array | Matrix | any, Array | Matrix | any, ...any': function ArrayMatrixAnyArrayMatrixAnyAny(x, y, rest) {
      var result = add(x, y);

      for (var i = 0; i < rest.length; i++) {
        result = add(result, rest[i]);
      }

      return result;
    }
  }, addScalar.signatures));
  add.toTex = {
    2: '\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\right)'
  };
  return add;
}

exports.name = 'add';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm01":198,"../../type/matrix/utils/algorithm04":201,"../../type/matrix/utils/algorithm10":206,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/latex.js":228,"../../utils/object":230,"./addScalar":57}],57:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  /**
   * Add two scalar values, `x + y`.
   * This function is meant for internal use: it is used by the public function
   * `add`
   *
   * This function does not support collections (Array or Matrix), and does
   * not validate the number of of inputs.
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`
   * @private
   */
  var add = typed('add', {
    'number, number': function numberNumber(x, y) {
      return x + y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.add(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.plus(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.add(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (x.value == null) throw new Error('Parameter x contains a unit with undefined value');
      if (y.value == null) throw new Error('Parameter y contains a unit with undefined value');
      if (!x.equalBase(y)) throw new Error('Units do not match');
      var res = x.clone();
      res.value = add(res.value, y.value);
      res.fixPrefix = false;
      return res;
    }
  });
  return add;
}

exports.factory = factory;

},{}],58:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  var unaryMinus = load(require('./unaryMinus'));
  var isNegative = load(require('../utils/isNegative'));
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Calculate the cubic root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cbrt(x)
   *    math.cbrt(x, allRoots)
   *
   * Examples:
   *
   *    math.cbrt(27);                  // returns 3
   *    math.cube(3);                   // returns 27
   *    math.cbrt(-64);                 // returns -4
   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m
   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]
   *
   *    var x = math.complex('8i');
   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i
   *    math.cbrt(x, true);             // returns Matrix [
   *                                    //    1.7320508075689 + i
   *                                    //   -1.7320508075689 + i
   *                                    //   -2i
   *                                    // ]
   *
   * See also:
   *
   *    square, sqrt, cube
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
   *            Value for which to calculate the cubic root.
   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
   *            when `x` is a number or complex number. If true, all complex
   *            roots are returned, if false (default) the principal root is
   *            returned.
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
   *            Returns the cubic root of `x`
   */

  var cbrt = typed('cbrt', {
    'number': _cbrtNumber,
    // note: signature 'number, boolean' is also supported,
    //       created by typed as it knows how to convert number to Complex
    'Complex': _cbrtComplex,
    'Complex, boolean': _cbrtComplex,
    'BigNumber': function BigNumber(x) {
      return x.cbrt();
    },
    'Unit': _cbrtUnit,
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since cbrt(0) = 0
      return deepMap(x, cbrt, true);
    }
  });
  /**
   * Calculate the cubic root for a complex number
   * @param {Complex} x
   * @param {boolean} [allRoots]   If true, the function will return an array
   *                               with all three roots. If false or undefined,
   *                               the principal root is returned.
   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
   * @private
   */

  function _cbrtComplex(x, allRoots) {
    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
    var arg_3 = x.arg() / 3;
    var abs = x.abs(); // principal root:

    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3).exp());

    if (allRoots) {
      var all = [principal, new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()), new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())];
      return config.matrix === 'Array' ? all : matrix(all);
    } else {
      return principal;
    }
  }
  /**
   * Calculate the cubic root for a Unit
   * @param {Unit} x
   * @return {Unit} Returns the cubic root of x
   * @private
   */


  function _cbrtUnit(x) {
    if (x.value && type.isComplex(x.value)) {
      var result = x.clone();
      result.value = 1.0;
      result = result.pow(1.0 / 3); // Compute the units

      result.value = _cbrtComplex(x.value); // Compute the value

      return result;
    } else {
      var negate = isNegative(x.value);

      if (negate) {
        x.value = unaryMinus(x.value);
      } // TODO: create a helper function for this


      var third;

      if (type.isBigNumber(x.value)) {
        third = new type.BigNumber(1).div(3);
      } else if (type.isFraction(x.value)) {
        third = new type.Fraction(1, 3);
      } else {
        third = 1 / 3;
      }

      var result = x.pow(third);

      if (negate) {
        result.value = unaryMinus(result.value);
      }

      return result;
    }
  }

  cbrt.toTex = {
    1: '\\sqrt[3]{${args[0]}}'
  };
  return cbrt;
}
/**
 * Calculate cbrt for a number
 *
 * Code from es6-shim.js:
 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
 *
 * @param {number} x
 * @returns {number | Complex} Returns the cubic root of x
 * @private
 */


var _cbrtNumber = Math.cbrt || function (x) {
  if (x === 0) {
    return x;
  }

  var negate = x < 0;
  var result;

  if (negate) {
    x = -x;
  }

  if (isFinite(x)) {
    result = Math.exp(Math.log(x) / 3); // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods

    result = (x / (result * result) + 2 * result) / 3;
  } else {
    result = x;
  }

  return negate ? -result : result;
};

exports.name = 'cbrt';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/collection/deepMap":219,"../utils/isNegative":173,"./unaryMinus":86}],59:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Round a value towards plus infinity
   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.ceil(x)
   *
   * Examples:
   *
   *    math.ceil(3.2);               // returns number 4
   *    math.ceil(3.8);               // returns number 4
   *    math.ceil(-4.2);              // returns number -4
   *    math.ceil(-4.7);              // returns number -4
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.ceil(c);                 // returns Complex 4 - 2i
   *
   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]
   *
   * See also:
   *
   *    floor, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
  var ceil = typed('ceil', {
    'number': Math.ceil,
    'Complex': function Complex(x) {
      return x.ceil();
    },
    'BigNumber': function BigNumber(x) {
      return x.ceil();
    },
    'Fraction': function Fraction(x) {
      return x.ceil();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since ceil(0) = 0
      return deepMap(x, ceil, true);
    }
  });
  ceil.toTex = {
    1: '\\left\\lceil${args[0]}\\right\\rceil'
  };
  return ceil;
}

exports.name = 'ceil';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],60:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Compute the cube of a value, `x * x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cube(x)
   *
   * Examples:
   *
   *    math.cube(2);            // returns number 8
   *    math.pow(2, 3);          // returns number 8
   *    math.cube(4);            // returns number 64
   *    4 * 4 * 4;               // returns number 64
   *
   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]
   *
   * See also:
   *
   *    multiply, square, pow, cbrt
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
   */
  var cube = typed('cube', {
    'number': function number(x) {
      return x * x * x;
    },
    'Complex': function Complex(x) {
      return x.mul(x).mul(x); // Is faster than pow(x, 3)
    },
    'BigNumber': function BigNumber(x) {
      return x.times(x).times(x);
    },
    'Fraction': function Fraction(x) {
      return x.pow(3); // Is faster than mul()mul()mul()
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since cube(0) = 0
      return deepMap(x, cube, true);
    },
    'Unit': function Unit(x) {
      return x.pow(3);
    }
  });
  cube.toTex = {
    1: '\\left(${args[0]}\\right)^3'
  };
  return cube;
}

exports.name = 'cube';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],61:[function(require,module,exports){
'use strict';

var extend = require('../../utils/object').extend;

function factory(type, config, load, typed) {
  var divideScalar = load(require('./divideScalar'));
  var multiply = load(require('./multiply'));
  var inv = load(require('../matrix/inv'));
  var matrix = load(require('../../type/matrix/function/matrix'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Divide two values, `x / y`.
   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
   *
   * Syntax:
   *
   *    math.divide(x, y)
   *
   * Examples:
   *
   *    math.divide(2, 3);            // returns number 0.6666666666666666
   *
   *    var a = math.complex(5, 14);
   *    var b = math.complex(4, 1);
   *    math.divide(a, b);            // returns Complex 2 + 3i
   *
   *    var c = [[7, -6], [13, -4]];
   *    var d = [[1, 2], [4, 3]];
   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]
   *
   *    var e = math.unit('18 km');
   *    math.divide(e, 4.5);          // returns Unit 4 km
   *
   * See also:
   *
   *    multiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
   */

  var divide = typed('divide', extend({
    // we extend the signatures of divideScalar with signatures dealing with matrices
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
      // TODO: implement matrix right division using pseudo inverse
      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html
      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
      return multiply(x, inv(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // process storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, divideScalar, false);
          break;

        case 'dense':
          c = algorithm14(x, y, divideScalar, false);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array | Matrix': function anyArrayMatrix(x, y) {
      return multiply(x, inv(y));
    }
  }, divideScalar.signatures));
  divide.toTex = {
    2: '\\frac{${args[0]}}{${args[1]}}'
  };
  return divide;
}

exports.name = 'divide';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm11":207,"../../type/matrix/utils/algorithm14":210,"../../utils/object":230,"../matrix/inv":99,"./divideScalar":62,"./multiply":76}],62:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var multiplyScalar = load(require('./multiplyScalar'));
  /**
   * Divide two scalar values, `x / y`.
   * This function is meant for internal use: it is used by the public functions
   * `divide` and `inv`.
   *
   * This function does not support collections (Array or Matrix), and does
   * not validate the number of of inputs.
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`
   * @private
   */

  var divideScalar = typed('divide', {
    'number, number': function numberNumber(x, y) {
      return x / y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.div(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.div(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.div(y);
    },
    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit

      res.value = divideScalar(res.value === null ? res._normalize(1) : res.value, y);
      return res;
    },
    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
      var res = y.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit

      res.value = multiplyScalar(res.value === null ? res._normalize(1) : res.value, x);
      return res;
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return x.divide(y);
    }
  });
  return divideScalar;
}

exports.factory = factory;

},{"./multiplyScalar":77}],63:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var divideScalar = load(require('./divideScalar'));

  var latex = require('../../utils/latex');

  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Divide two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotDivide(x, y)
   *
   * Examples:
   *
   *    math.dotDivide(2, 4);   // returns 0.5
   *
   *    a = [[9, 5], [6, 1]];
   *    b = [[3, 2], [5, 2]];
   *
   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]
   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]
   *
   * See also:
   *
   *    divide, multiply, dotMultiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
   */

  var dotDivide = typed('dotDivide', {
    'any, any': divideScalar,
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse ./ sparse
              c = algorithm07(x, y, divideScalar, false);
              break;

            default:
              // sparse ./ dense
              c = algorithm02(y, x, divideScalar, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense ./ sparse
              c = algorithm03(x, y, divideScalar, false);
              break;

            default:
              // dense ./ dense
              c = algorithm13(x, y, divideScalar);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return dotDivide(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return dotDivide(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return dotDivide(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, divideScalar, false);
          break;

        default:
          c = algorithm14(x, y, divideScalar, false);
          break;
      }

      return c;
    },
    'any, Matrix': function anyMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, divideScalar, true);
          break;

        default:
          c = algorithm14(y, x, divideScalar, true);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, divideScalar, true).valueOf();
    }
  });
  dotDivide.toTex = {
    2: '\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\right)'
  };
  return dotDivide;
}

exports.name = 'dotDivide';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm02":199,"../../type/matrix/utils/algorithm03":200,"../../type/matrix/utils/algorithm07":204,"../../type/matrix/utils/algorithm11":207,"../../type/matrix/utils/algorithm12":208,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/latex":228,"./divideScalar":62}],64:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var multiplyScalar = load(require('./multiplyScalar'));

  var latex = require('../../utils/latex');

  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Multiply two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotMultiply(x, y)
   *
   * Examples:
   *
   *    math.dotMultiply(2, 4); // returns 8
   *
   *    a = [[9, 5], [6, 1]];
   *    b = [[3, 2], [5, 2]];
   *
   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]
   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]
   *
   * See also:
   *
   *    multiply, divide, dotDivide
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
   */

  var dotMultiply = typed('dotMultiply', {
    'any, any': multiplyScalar,
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse .* sparse
              c = algorithm09(x, y, multiplyScalar, false);
              break;

            default:
              // sparse .* dense
              c = algorithm02(y, x, multiplyScalar, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense .* sparse
              c = algorithm02(x, y, multiplyScalar, false);
              break;

            default:
              // dense .* dense
              c = algorithm13(x, y, multiplyScalar);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return dotMultiply(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return dotMultiply(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return dotMultiply(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, multiplyScalar, false);
          break;

        default:
          c = algorithm14(x, y, multiplyScalar, false);
          break;
      }

      return c;
    },
    'any, Matrix': function anyMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm11(y, x, multiplyScalar, true);
          break;

        default:
          c = algorithm14(y, x, multiplyScalar, true);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    }
  });
  dotMultiply.toTex = {
    2: '\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\right)'
  };
  return dotMultiply;
}

exports.name = 'dotMultiply';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm02":199,"../../type/matrix/utils/algorithm09":205,"../../type/matrix/utils/algorithm11":207,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/latex":228,"./multiplyScalar":77}],65:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var pow = load(require('./pow'));

  var latex = require('../../utils/latex');

  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Calculates the power of x to y element wise.
   *
   * Syntax:
   *
   *    math.dotPow(x, y)
   *
   * Examples:
   *
   *    math.dotPow(2, 3);            // returns number 8
   *
   *    var a = [[1, 2], [4, 3]];
   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]
   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    pow, sqrt, multiply
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
   */

  var dotPow = typed('dotPow', {
    'any, any': pow,
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse .^ sparse
              c = algorithm07(x, y, pow, false);
              break;

            default:
              // sparse .^ dense
              c = algorithm03(y, x, pow, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense .^ sparse
              c = algorithm03(x, y, pow, false);
              break;

            default:
              // dense .^ dense
              c = algorithm13(x, y, pow);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return dotPow(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return dotPow(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return dotPow(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, dotPow, false);
          break;

        default:
          c = algorithm14(x, y, dotPow, false);
          break;
      }

      return c;
    },
    'any, Matrix': function anyMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, dotPow, true);
          break;

        default:
          c = algorithm14(y, x, dotPow, true);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, dotPow, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, dotPow, true).valueOf();
    }
  });
  dotPow.toTex = {
    2: '\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\right)'
  };
  return dotPow;
}

exports.name = 'dotPow';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm03":200,"../../type/matrix/utils/algorithm07":204,"../../type/matrix/utils/algorithm11":207,"../../type/matrix/utils/algorithm12":208,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/latex":228,"./pow":80}],66:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the exponent of a value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.exp(x)
   *
   * Examples:
   *
   *    math.exp(2);                  // returns number 7.3890560989306495
   *    math.pow(math.e, 2);          // returns number 7.3890560989306495
   *    math.log(math.exp(2));        // returns number 2
   *
   *    math.exp([1, 2, 3]);
   *    // returns Array [
   *    //   2.718281828459045,
   *    //   7.3890560989306495,
   *    //   20.085536923187668
   *    // ]
   *
   * See also:
   *
   *    log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  var exp = typed('exp', {
    'number': Math.exp,
    'Complex': function Complex(x) {
      return x.exp();
    },
    'BigNumber': function BigNumber(x) {
      return x.exp();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
      return deepMap(x, exp);
    }
  });
  exp.toTex = {
    1: '\\exp\\left(${args[0]}\\right)'
  };
  return exp;
}

exports.name = 'exp';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],67:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Round a value towards zero.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.fix(x)
   *
   * Examples:
   *
   *    math.fix(3.2);                // returns number 3
   *    math.fix(3.8);                // returns number 3
   *    math.fix(-4.2);               // returns number -4
   *    math.fix(-4.7);               // returns number -4
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.fix(c);                  // returns Complex 3 - 2i
   *
   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]
   *
   * See also:
   *
   *    ceil, floor, round
   *
   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
   */
  var fix = typed('fix', {
    'number': function number(x) {
      return x > 0 ? Math.floor(x) : Math.ceil(x);
    },
    'Complex': function Complex(x) {
      return new type.Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
    },
    'BigNumber': function BigNumber(x) {
      return x.isNegative() ? x.ceil() : x.floor();
    },
    'Fraction': function Fraction(x) {
      return x.s < 0 ? x.ceil() : x.floor();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since fix(0) = 0
      return deepMap(x, fix, true);
    }
  });
  fix.toTex = {
    1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
  };
  return fix;
}

exports.name = 'fix';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],68:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Round a value towards minus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.floor(x)
   *
   * Examples:
   *
   *    math.floor(3.2);              // returns number 3
   *    math.floor(3.8);              // returns number 3
   *    math.floor(-4.2);             // returns number -5
   *    math.floor(-4.7);             // returns number -5
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.floor(c);                // returns Complex 3 - 3i
   *
   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]
   *
   * See also:
   *
   *    ceil, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
  var floor = typed('floor', {
    'number': Math.floor,
    'Complex': function Complex(x) {
      return x.floor();
    },
    'BigNumber': function BigNumber(x) {
      return x.floor();
    },
    'Fraction': function Fraction(x) {
      return x.floor();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since floor(0) = 0
      return deepMap(x, floor, true);
    }
  });
  floor.toTex = {
    1: '\\left\\lfloor${args[0]}\\right\\rfloor'
  };
  return floor;
}

exports.name = 'floor';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],69:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));
  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Calculate the greatest common divisor for two or more values or arrays.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gcd(a, b)
   *    math.gcd(a, b, c, ...)
   *
   * Examples:
   *
   *    math.gcd(8, 12);              // returns 4
   *    math.gcd(-4, 6);              // returns 2
   *    math.gcd(25, 15, -10);        // returns 5
   *
   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]
   *
   * See also:
   *
   *    lcm, xgcd
   *
   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
   */

  var gcd = typed('gcd', {
    'number, number': _gcd,
    'BigNumber, BigNumber': _gcdBigNumber,
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.gcd(y);
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm04(x, y, gcd);
              break;

            default:
              // sparse + dense
              c = algorithm01(y, x, gcd, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm01(x, y, gcd, false);
              break;

            default:
              // dense + dense
              c = algorithm13(x, y, gcd);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return gcd(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return gcd(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return gcd(x, matrix(y));
    },
    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm10(x, y, gcd, false);
          break;

        default:
          c = algorithm14(x, y, gcd, false);
          break;
      }

      return c;
    },
    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm10(y, x, gcd, true);
          break;

        default:
          c = algorithm14(y, x, gcd, true);
          break;
      }

      return c;
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, gcd, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, gcd, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
      var res = gcd(a, b);

      for (var i = 0; i < args.length; i++) {
        res = gcd(res, args[i]);
      }

      return res;
    }
  });
  gcd.toTex = '\\gcd\\left(${args}\\right)';
  return gcd;
  /**
   * Calculate gcd for BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns greatest common denominator of a and b
   * @private
   */

  function _gcdBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function gcd must be integer numbers');
    } // http://en.wikipedia.org/wiki/Euclidean_algorithm


    var zero = new type.BigNumber(0);

    while (!b.isZero()) {
      var r = a.mod(b);
      a = b;
      b = r;
    }

    return a.lt(zero) ? a.neg() : a;
  }
}
/**
 * Calculate gcd for numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the greatest common denominator of a and b
 * @private
 */


function _gcd(a, b) {
  if (!isInteger(a) || !isInteger(b)) {
    throw new Error('Parameters in function gcd must be integer numbers');
  } // http://en.wikipedia.org/wiki/Euclidean_algorithm


  var r;

  while (b != 0) {
    r = a % b;
    a = b;
    b = r;
  }

  return a < 0 ? -a : a;
}

exports.name = 'gcd';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm01":198,"../../type/matrix/utils/algorithm04":201,"../../type/matrix/utils/algorithm10":206,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/number":229}],70:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory(type, config, load, typed) {
  var abs = load(require('./abs'));
  var add = load(require('./addScalar'));
  var divide = load(require('./divideScalar'));
  var multiply = load(require('./multiplyScalar'));
  var sqrt = load(require('./sqrt'));
  var smaller = load(require('../relational/smaller'));
  var isPositive = load(require('../utils/isPositive'));
  /**
   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
   *
   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
   *
   * For matrix input, the hypotenusa is calculated for all values in the matrix.
   *
   * Syntax:
   *
   *     math.hypot(a, b, ...)
   *     math.hypot([a, b, c, ...])
   *
   * Examples:
   *
   *     math.hypot(3, 4);      // 5
   *     math.hypot(3, 4, 5);   // 7.0710678118654755
   *     math.hypot([3, 4, 5]); // 7.0710678118654755
   *     math.hypot(-2);        // 2
   *
   * See also:
   *
   *     abs, norm
   *
   * @param {... number | BigNumber} args
   * @return {number | BigNumber} Returns the hypothenusa of the input values.
   */

  var hypot = typed('hypot', {
    '... number | BigNumber': _hypot,
    'Array': function Array(x) {
      return hypot.apply(hypot, flatten(x));
    },
    'Matrix': function Matrix(x) {
      return hypot.apply(hypot, flatten(x.toArray()));
    }
  });
  /**
   * Calculate the hypotenusa for an Array with values
   * @param {Array.<number | BigNumber>} args
   * @return {number | BigNumber} Returns the result
   * @private
   */

  function _hypot(args) {
    // code based on `hypot` from es6-shim:
    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
    var result = 0;
    var largest = 0;

    for (var i = 0; i < args.length; i++) {
      var value = abs(args[i]);

      if (smaller(largest, value)) {
        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));
        result = add(result, 1);
        largest = value;
      } else {
        result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);
      }
    }

    return multiply(largest, sqrt(result));
  }

  hypot.toTex = '\\hypot\\left(${args}\\right)';
  return hypot;
}

exports.name = 'hypot';
exports.factory = factory;

},{"../../utils/array":212,"../relational/smaller":130,"../utils/isPositive":175,"./abs":55,"./addScalar":57,"./divideScalar":62,"./multiplyScalar":77,"./sqrt":83}],71:[function(require,module,exports){
"use strict";

module.exports = [require('./abs'), require('./add'), require('./addScalar'), require('./cbrt'), require('./ceil'), require('./cube'), require('./divide'), require('./dotDivide'), require('./dotMultiply'), require('./dotPow'), require('./exp'), require('./fix'), require('./floor'), require('./gcd'), require('./hypot'), require('./lcm'), require('./log'), require('./log10'), require('./mod'), require('./multiply'), require('./norm'), require('./nthRoot'), require('./pow'), require('./round'), require('./sign'), require('./sqrt'), require('./square'), require('./subtract'), require('./unaryMinus'), require('./unaryPlus'), require('./xgcd')];

},{"./abs":55,"./add":56,"./addScalar":57,"./cbrt":58,"./ceil":59,"./cube":60,"./divide":61,"./dotDivide":63,"./dotMultiply":64,"./dotPow":65,"./exp":66,"./fix":67,"./floor":68,"./gcd":69,"./hypot":70,"./lcm":72,"./log":73,"./log10":74,"./mod":75,"./multiply":76,"./norm":78,"./nthRoot":79,"./pow":80,"./round":81,"./sign":82,"./sqrt":83,"./square":84,"./subtract":85,"./unaryMinus":86,"./unaryPlus":87,"./xgcd":88}],72:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Calculate the least common multiple for two or more values or arrays.
   *
   * lcm is defined as:
   *
   *     lcm(a, b) = abs(a * b) / gcd(a, b)
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.lcm(a, b)
   *    math.lcm(a, b, c, ...)
   *
   * Examples:
   *
   *    math.lcm(4, 6);               // returns 12
   *    math.lcm(6, 21);              // returns 42
   *    math.lcm(6, 21, 5);           // returns 210
   *
   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]
   *
   * See also:
   *
   *    gcd, xgcd
   *
   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
   */

  var lcm = typed('lcm', {
    'number, number': _lcm,
    'BigNumber, BigNumber': _lcmBigNumber,
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.lcm(y);
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm06(x, y, lcm);
              break;

            default:
              // sparse + dense
              c = algorithm02(y, x, lcm, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm02(x, y, lcm, false);
              break;

            default:
              // dense + dense
              c = algorithm13(x, y, lcm);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return lcm(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return lcm(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return lcm(x, matrix(y));
    },
    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, lcm, false);
          break;

        default:
          c = algorithm14(x, y, lcm, false);
          break;
      }

      return c;
    },
    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm11(y, x, lcm, true);
          break;

        default:
          c = algorithm14(y, x, lcm, true);
          break;
      }

      return c;
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, lcm, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, lcm, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
      var res = lcm(a, b);

      for (var i = 0; i < args.length; i++) {
        res = lcm(res, args[i]);
      }

      return res;
    }
  });
  lcm.toTex = undefined; // use default template

  return lcm;
  /**
   * Calculate lcm for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns the least common multiple of a and b
   * @private
   */

  function _lcmBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function lcm must be integer numbers');
    }

    if (a.isZero() || b.isZero()) {
      return new type.BigNumber(0);
    } // http://en.wikipedia.org/wiki/Euclidean_algorithm
    // evaluate lcm here inline to reduce overhead


    var prod = a.times(b);

    while (!b.isZero()) {
      var t = b;
      b = a.mod(t);
      a = t;
    }

    return prod.div(a).abs();
  }
}
/**
 * Calculate lcm for two numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the least common multiple of a and b
 * @private
 */


function _lcm(a, b) {
  if (!isInteger(a) || !isInteger(b)) {
    throw new Error('Parameters in function lcm must be integer numbers');
  }

  if (a == 0 || b == 0) {
    return 0;
  } // http://en.wikipedia.org/wiki/Euclidean_algorithm
  // evaluate lcm here inline to reduce overhead


  var t;
  var prod = a * b;

  while (b != 0) {
    t = b;
    b = a % t;
    a = t;
  }

  return Math.abs(prod / a);
}

exports.name = 'lcm';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm02":199,"../../type/matrix/utils/algorithm06":203,"../../type/matrix/utils/algorithm11":207,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/number":229}],73:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  var divideScalar = load(require('./divideScalar'));
  /**
   * Calculate the logarithm of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log(x)
   *    math.log(x, base)
   *
   * Examples:
   *
   *    math.log(3.5);                  // returns 1.252762968495368
   *    math.exp(math.log(2.4));        // returns 2.4
   *
   *    math.pow(10, 4);                // returns 10000
   *    math.log(10000, 10);            // returns 4
   *    math.log(10000) / math.log(10); // returns 4
   *
   *    math.log(1024, 2);              // returns 10
   *    math.pow(2, 10);                // returns 1024
   *
   * See also:
   *
   *    exp, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x`
   */

  var log = typed('log', {
    'number': function number(x) {
      if (x >= 0 || config.predictable) {
        return Math.log(x);
      } else {
        // negative value -> complex value computation
        return new type.Complex(x, 0).log();
      }
    },
    'Complex': function Complex(x) {
      return x.log();
    },
    'BigNumber': function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.ln();
      } else {
        // downgrade to number, return Complex valued result
        return new type.Complex(x.toNumber(), 0).log();
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, log);
    },
    'any, any': function anyAny(x, base) {
      // calculate logarithm for a specified base, log(x, base)
      return divideScalar(log(x), log(base));
    }
  });
  log.toTex = {
    1: '\\ln\\left(${args[0]}\\right)',
    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
  };
  return log;
}

exports.name = 'log';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"./divideScalar":62}],74:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log10(x)
   *
   * Examples:
   *
   *    math.log10(0.00001);            // returns -5
   *    math.log10(10000);              // returns 4
   *    math.log(10000) / math.log(10); // returns 4
   *    math.pow(10, 4);                // returns 10000
   *
   * See also:
   *
   *    exp, log
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 10-base logarithm of `x`
   */
  var log10 = typed('log10', {
    'number': function number(x) {
      if (x >= 0 || config.predictable) {
        return _log10(x);
      } else {
        // negative value -> complex value computation
        return new type.Complex(x, 0).log().div(Math.LN10);
      }
    },
    'Complex': function Complex(x) {
      return new type.Complex(x).log().div(Math.LN10);
    },
    'BigNumber': function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.log();
      } else {
        // downgrade to number, return Complex valued result
        return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, log10);
    }
  });
  log10.toTex = {
    1: '\\log_{10}\\left(${args[0]}\\right)'
  };
  return log10;
}
/**
 * Calculate the 10-base logarithm of a number
 * @param {number} x
 * @return {number}
 * @private
 */


var _log10 = Math.log10 || function (x) {
  return Math.log(x) / Math.LN10;
};

exports.name = 'log10';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],75:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  var latex = require('../../utils/latex');

  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Calculates the modulus, the remainder of an integer division.
   *
   * For matrices, the function is evaluated element wise.
   *
   * The modulus is defined as:
   *
   *     x - y * floor(x / y)
   *
   * See http://en.wikipedia.org/wiki/Modulo_operation.
   *
   * Syntax:
   *
   *    math.mod(x, y)
   *
   * Examples:
   *
   *    math.mod(8, 3);                // returns 2
   *    math.mod(11, 2);               // returns 1
   *
   *    function isOdd(x) {
   *      return math.mod(x, 2) != 0;
   *    }
   *
   *    isOdd(2);                      // returns false
   *    isOdd(3);                      // returns true
   *
   * See also:
   *
   *    divide
   *
   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
   */

  var mod = typed('mod', {
    'number, number': _mod,
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return y.isZero() ? x : x.mod(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.mod(y);
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // mod(sparse, sparse)
              c = algorithm05(x, y, mod, false);
              break;

            default:
              // mod(sparse, dense)
              c = algorithm02(y, x, mod, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // mod(dense, sparse)
              c = algorithm03(x, y, mod, false);
              break;

            default:
              // mod(dense, dense)
              c = algorithm13(x, y, mod);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return mod(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return mod(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return mod(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, mod, false);
          break;

        default:
          c = algorithm14(x, y, mod, false);
          break;
      }

      return c;
    },
    'any, Matrix': function anyMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, mod, true);
          break;

        default:
          c = algorithm14(y, x, mod, true);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, mod, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, mod, true).valueOf();
    }
  });
  mod.toTex = {
    2: '\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\right)'
  };
  return mod;
  /**
   * Calculate the modulus of two numbers
   * @param {number} x
   * @param {number} y
   * @returns {number} res
   * @private
   */

  function _mod(x, y) {
    if (y > 0) {
      // We don't use JavaScript's % operator here as this doesn't work
      // correctly for x < 0 and x == 0
      // see http://en.wikipedia.org/wiki/Modulo_operation
      return x - y * Math.floor(x / y);
    } else if (y === 0) {
      return x;
    } else {
      // y < 0
      // TODO: implement mod for a negative divisor
      throw new Error('Cannot calculate mod for a negative divisor');
    }
  }
}

exports.name = 'mod';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm02":199,"../../type/matrix/utils/algorithm03":200,"../../type/matrix/utils/algorithm05":202,"../../type/matrix/utils/algorithm11":207,"../../type/matrix/utils/algorithm12":208,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/latex":228}],76:[function(require,module,exports){
'use strict';

var extend = require('../../utils/object').extend;

var array = require('../../utils/array');

function factory(type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));
  var addScalar = load(require('./addScalar'));
  var multiplyScalar = load(require('./multiplyScalar'));
  var equalScalar = load(require('../relational/equalScalar'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  var DenseMatrix = type.DenseMatrix;
  var SparseMatrix = type.SparseMatrix;
  /**
   * Multiply two or more values, `x * y`.
   * For matrices, the matrix product is calculated.
   *
   * Syntax:
   *
   *    math.multiply(x, y)
   *    math.multiply(x, y, z, ...)
   *
   * Examples:
   *
   *    math.multiply(4, 5.2);        // returns number 20.8
   *    math.multiply(2, 3, 4);       // returns number 24
   *
   *    var a = math.complex(2, 3);
   *    var b = math.complex(4, 1);
   *    math.multiply(a, b);          // returns Complex 5 + 14i
   *
   *    var c = [[1, 2], [4, 3]];
   *    var d = [[1, 2, 3], [3, -4, 7]];
   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]
   *
   *    var e = math.unit('2.1 km');
   *    math.multiply(3, e);          // returns Unit 6.3 km
   *
   * See also:
   *
   *    divide, prod, cross, dot
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
   */

  var multiply = typed('multiply', extend({
    // we extend the signatures of multiplyScalar with signatures dealing with matrices
    'Array, Array': function ArrayArray(x, y) {
      // check dimensions
      _validateMatrixDimensions(array.size(x), array.size(y)); // use dense matrix implementation


      var m = multiply(matrix(x), matrix(y)); // return array or scalar

      return type.isMatrix(m) ? m.valueOf() : m;
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // dimensions
      var xsize = x.size();
      var ysize = y.size(); // check dimensions

      _validateMatrixDimensions(xsize, ysize); // process dimensions


      if (xsize.length === 1) {
        // process y dimensions
        if (ysize.length === 1) {
          // Vector * Vector
          return _multiplyVectorVector(x, y, xsize[0]);
        } // Vector * Matrix


        return _multiplyVectorMatrix(x, y);
      } // process y dimensions


      if (ysize.length === 1) {
        // Matrix * Vector
        return _multiplyMatrixVector(x, y);
      } // Matrix * Matrix


      return _multiplyMatrixMatrix(x, y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use Matrix * Matrix implementation
      return multiply(x, matrix(y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use Matrix * Matrix implementation
      return multiply(matrix(x, y.storage()), y);
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // process storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, multiplyScalar, false);
          break;

        case 'dense':
          c = algorithm14(x, y, multiplyScalar, false);
          break;
      }

      return c;
    },
    'any, Matrix': function anyMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm11(y, x, multiplyScalar, true);
          break;

        case 'dense':
          c = algorithm14(y, x, multiplyScalar, true);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    },
    'any, any': multiplyScalar,
    'Array | Matrix | any, Array | Matrix | any, ...any': function ArrayMatrixAnyArrayMatrixAnyAny(x, y, rest) {
      var result = multiply(x, y);

      for (var i = 0; i < rest.length; i++) {
        result = multiply(result, rest[i]);
      }

      return result;
    }
  }, multiplyScalar.signatures));

  var _validateMatrixDimensions = function _validateMatrixDimensions(size1, size2) {
    // check left operand dimensions
    switch (size1.length) {
      case 1:
        // check size2
        switch (size2.length) {
          case 1:
            // Vector x Vector
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
            }

            break;

          case 2:
            // Vector x Matrix
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }

        break;

      case 2:
        // check size2
        switch (size2.length) {
          case 1:
            // Matrix x Vector
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
            }

            break;

          case 2:
            // Matrix x Matrix
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }

        break;

      default:
        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
    }
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (N)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {number}             Scalar value
   */


  var _multiplyVectorVector = function _multiplyVectorVector(a, b, n) {
    // check empty vector
    if (n === 0) throw new Error('Cannot multiply two empty vectors'); // a dense

    var adata = a._data;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bdt = b._datatype; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result (do not initialize it with zero)


    var c = mf(adata[0], bdata[0]); // loop data

    for (var i = 1; i < n; i++) {
      // multiply and accumulate
      c = af(c, mf(adata[i], bdata[i]));
    }

    return c;
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Matrix         (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */


  var _multiplyVectorMatrix = function _multiplyVectorMatrix(a, b) {
    // process storage
    switch (b.storage()) {
      case 'dense':
        return _multiplyVectorDenseMatrix(a, b);
    }

    throw new Error('Not implemented');
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Dense Matrix   (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */


  var _multiplyVectorDenseMatrix = function _multiplyVectorDenseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // rows & columns

    var alength = asize[0];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix columns

    for (var j = 0; j < bcolumns; j++) {
      // sum (do not initialize it with zero)
      var sum = mf(adata[0], bdata[0][j]); // loop vector

      for (var i = 1; i < alength; i++) {
        // multiply & accumulate
        sum = af(sum, mf(adata[i], bdata[i][j]));
      }

      c[j] = sum;
    } // return matrix


    return new DenseMatrix({
      data: c,
      size: [bcolumns],
      datatype: dt
    });
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {Matrix}             Dense Vector   (M)
   */


  var _multiplyMatrixVector = function _multiplyMatrixVector(a, b) {
    // process storage
    switch (a.storage()) {
      case 'dense':
        return _multiplyDenseMatrixVector(a, b);

      case 'sparse':
        return _multiplySparseMatrixVector(a, b);
    }
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Matrix         (NxC)
   *
   * @return {Matrix}             Matrix         (MxC)
   */


  var _multiplyMatrixMatrix = function _multiplyMatrixMatrix(a, b) {
    // process storage
    switch (a.storage()) {
      case 'dense':
        // process storage
        switch (b.storage()) {
          case 'dense':
            return _multiplyDenseMatrixDenseMatrix(a, b);

          case 'sparse':
            return _multiplyDenseMatrixSparseMatrix(a, b);
        }

        break;

      case 'sparse':
        // process storage
        switch (b.storage()) {
          case 'dense':
            return _multiplySparseMatrixDenseMatrix(a, b);

          case 'sparse':
            return _multiplySparseMatrixSparseMatrix(a, b);
        }

        break;
    }
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix  (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             Dense Vector (M) 
   */


  var _multiplyDenseMatrixVector = function _multiplyDenseMatrixVector(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = asize[0];
    var acolumns = asize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix a rows

    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i]; // sum (do not initialize it with zero)

      var sum = mf(row[0], bdata[0]); // loop matrix a columns

      for (var j = 1; j < acolumns; j++) {
        // multiply & accumulate
        sum = af(sum, mf(row[j], bdata[j]));
      }

      c[i] = sum;
    } // return matrix


    return new DenseMatrix({
      data: c,
      size: [arows],
      datatype: dt
    });
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            DenseMatrix    (NxC)
   *
   * @return {Matrix}             DenseMatrix    (MxC)
   */


  var _multiplyDenseMatrixDenseMatrix = function _multiplyDenseMatrixDenseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // rows & columns

    var arows = asize[0];
    var acolumns = asize[1];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var c = []; // loop matrix a rows

    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i]; // initialize row array

      c[i] = []; // loop matrix b columns

      for (var j = 0; j < bcolumns; j++) {
        // sum (avoid initializing sum to zero)
        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns

        for (var x = 1; x < acolumns; x++) {
          // multiply & accumulate
          sum = af(sum, mf(row[x], bdata[x][j]));
        }

        c[i][j] = sum;
      }
    } // return matrix


    return new DenseMatrix({
      data: c,
      size: [arows, bcolumns],
      datatype: dt
    });
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            SparseMatrix   (NxC)
   *
   * @return {Matrix}             SparseMatrix   (MxC)
   */


  var _multiplyDenseMatrixSparseMatrix = function _multiplyDenseMatrixSparseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b sparse

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate b matrix

    if (!bvalues) throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix'); // rows & columns

    var arows = asize[0];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result


    var cvalues = [];
    var cindex = [];
    var cptr = []; // c matrix

    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // indeces in column jb

      var kb0 = bptr[jb];
      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists

      if (kb1 > kb0) {
        // last row mark processed
        var last = 0; // loop a rows

        for (var i = 0; i < arows; i++) {
          // column mark
          var mark = i + 1; // C[i, jb]

          var cij; // values in b column j

          for (var kb = kb0; kb < kb1; kb++) {
            // row
            var ib = bindex[kb]; // check value has been initialized

            if (last !== mark) {
              // first value in column jb
              cij = mf(adata[i][ib], bvalues[kb]); // update mark

              last = mark;
            } else {
              // accumulate value
              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
            }
          } // check column has been processed and value != 0


          if (last === mark && !eq(cij, zero)) {
            // push row & value
            cindex.push(i);
            cvalues.push(cij);
          }
        }
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix    (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             SparseMatrix    (M, 1) 
   */


  var _multiplySparseMatrixVector = function _multiplySparseMatrixVector(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // validate a matrix

    if (!avalues) throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix'); // b dense

    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var brows = b._size[0]; // result

    var cvalues = [];
    var cindex = [];
    var cptr = []; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // workspace


    var x = []; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // update ptr

    cptr[0] = 0; // rows in b

    for (var ib = 0; ib < brows; ib++) {
      // b[ib]
      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops

      if (!eq(vbi, zero)) {
        // A values & index in ib column
        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
          // a row
          var ia = aindex[ka]; // check value exists in current j

          if (!w[ia]) {
            // ia is new entry in j
            w[ia] = true; // add i to pattern of C

            cindex.push(ia); // x(ia) = A

            x[ia] = mf(vbi, avalues[ka]);
          } else {
            // i exists in C already
            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
          }
        }
      }
    } // copy values from x to column jb of c


    for (var p1 = cindex.length, p = 0; p < p1; p++) {
      // row
      var ic = cindex[p]; // copy value

      cvalues[p] = x[ic];
    } // update ptr


    cptr[1] = cindex.length; // return sparse matrix

    return new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, 1],
      datatype: dt
    });
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            DenseMatrix       (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */


  var _multiplySparseMatrixDenseMatrix = function _multiplySparseMatrixDenseMatrix(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // validate a matrix

    if (!avalues) throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix'); // b dense

    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var brows = b._size[0];
    var bcolumns = b._size[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result


    var cvalues = [];
    var cindex = [];
    var cptr = []; // c matrix

    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    var x = []; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      var mark = jb + 1; // rows in jb

      for (var ib = 0; ib < brows; ib++) {
        // b[ib, jb]
        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops

        if (!eq(vbij, zero)) {
          // A values & index in ib column
          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // a row
            var ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(vbij, avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
            }
          }
        }
      } // copy values from x to column jb of c


      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
        // row
        var ic = cindex[p]; // copy value

        cvalues[p] = x[ic];
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  };
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            SparseMatrix      (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */


  var _multiplySparseMatrixSparseMatrix = function _multiplySparseMatrixSparseMatrix(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // b sparse

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data

    var values = avalues && bvalues; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = []; // c matrix

    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // variables

    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      var mark = jb + 1; // B values & index in j

      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
        // b row
        ib = bindex[kb]; // check we need to process values

        if (values) {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(bvalues[kb], avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
            }
          }
        } else {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia);
            }
          }
        }
      } // check we need to process matrix values (pattern matrix)


      if (values) {
        // copy values from x to column jb of c
        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
          // row
          var ic = cindex[p]; // copy value

          cvalues[p] = x[ic];
        }
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  };

  multiply.toTex = {
    2: '\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\right)'
  };
  return multiply;
}

exports.name = 'multiply';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm11":207,"../../type/matrix/utils/algorithm14":210,"../../utils/array":212,"../../utils/latex":228,"../../utils/object":230,"../relational/equalScalar":128,"./addScalar":57,"./multiplyScalar":77}],77:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  /**
   * Multiply two scalar values, `x * y`.
   * This function is meant for internal use: it is used by the public function
   * `multiply`
   *
   * This function does not support collections (Array or Matrix), and does
   * not validate the number of of inputs.
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`
   * @private
   */
  var multiplyScalar = typed('multiplyScalar', {
    'number, number': function numberNumber(x, y) {
      return x * y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.mul(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.times(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.mul(y);
    },
    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
      var res = y.clone();
      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);
      return res;
    },
    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
      var res = x.clone();
      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);
      return res;
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return x.multiply(y);
    }
  });
  return multiplyScalar;
}

exports.factory = factory;

},{}],78:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var abs = load(require('../arithmetic/abs'));
  var add = load(require('../arithmetic/add'));
  var pow = load(require('../arithmetic/pow'));
  var sqrt = load(require('../arithmetic/sqrt'));
  var multiply = load(require('../arithmetic/multiply'));
  var equalScalar = load(require('../relational/equalScalar'));
  var larger = load(require('../relational/larger'));
  var smaller = load(require('../relational/smaller'));
  var matrix = load(require('../../type/matrix/function/matrix'));
  var trace = load(require('../matrix/trace'));
  var transpose = load(require('../matrix/transpose'));
  /**
   * Calculate the norm of a number, vector or matrix.
   *
   * The second parameter p is optional. If not provided, it defaults to 2.
   *
   * Syntax:
   *
   *    math.norm(x)
   *    math.norm(x, p)
   *
   * Examples:
   *
   *    math.abs(-3.5);                         // returns 3.5
   *    math.norm(-3.5);                        // returns 3.5
   *
   *    math.norm(math.complex(3, -4));         // returns 5
   *
   *    math.norm([1, 2, -3], Infinity);        // returns 3
   *    math.norm([1, 2, -3], -Infinity);       // returns 1
   *
   *    math.norm([3, 4], 2);                   // returns 5
   *
   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7
   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661
   *
   * See also:
   *
   *    abs, hypot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the norm
   * @param  {number | BigNumber | string} [p=2]
   *            Vector space.
   *            Supported numbers include Infinity and -Infinity.
   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
   * @return {number | BigNumber} the p-norm
   */

  var norm = typed('norm', {
    'number': Math.abs,
    'Complex': function Complex(x) {
      return x.abs();
    },
    'BigNumber': function BigNumber(x) {
      // norm(x) = abs(x)
      return x.abs();
    },
    'boolean | null': function booleanNull(x) {
      // norm(x) = abs(x)
      return Math.abs(x);
    },
    'Array': function Array(x) {
      return _norm(matrix(x), 2);
    },
    'Matrix': function Matrix(x) {
      return _norm(x, 2);
    },
    'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function numberComplexBigNumberBooleanNullNumberBigNumberString(x) {
      // ignore second parameter, TODO: remove the option of second parameter for these types
      return norm(x);
    },
    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
      return _norm(matrix(x), p);
    },
    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
      return _norm(x, p);
    }
  });
  /**
   * Calculate the norm for an array
   * @param {Array} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */

  function _norm(x, p) {
    // size
    var sizeX = x.size(); // check if it is a vector

    if (sizeX.length == 1) {
      // check p
      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
        // norm(x, Infinity) = max(abs(x))
        var pinf = 0; // skip zeros since abs(0) == 0

        x.forEach(function (value) {
          var v = abs(value);
          if (larger(v, pinf)) pinf = v;
        }, true);
        return pinf;
      }

      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
        // norm(x, -Infinity) = min(abs(x))
        var ninf; // skip zeros since abs(0) == 0

        x.forEach(function (value) {
          var v = abs(value);
          if (!ninf || smaller(v, ninf)) ninf = v;
        }, true);
        return ninf || 0;
      }

      if (p === 'fro') {
        return _norm(x, 2);
      }

      if (typeof p === 'number' && !isNaN(p)) {
        // check p != 0
        if (!equalScalar(p, 0)) {
          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
          var n = 0; // skip zeros since abs(0) == 0

          x.forEach(function (value) {
            n = add(pow(abs(value), p), n);
          }, true);
          return pow(n, 1 / p);
        }

        return Number.POSITIVE_INFINITY;
      } // invalid parameter value


      throw new Error('Unsupported parameter value');
    } // MxN matrix


    if (sizeX.length == 2) {
      // check p
      if (p === 1) {
        // norm(x) = the largest column sum
        var c = []; // result

        var maxc = 0; // skip zeros since abs(0) == 0

        x.forEach(function (value, index) {
          var j = index[1];
          var cj = add(c[j] || 0, abs(value));
          if (larger(cj, maxc)) maxc = cj;
          c[j] = cj;
        }, true);
        return maxc;
      }

      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
        // norm(x) = the largest row sum
        var r = []; // result

        var maxr = 0; // skip zeros since abs(0) == 0

        x.forEach(function (value, index) {
          var i = index[0];
          var ri = add(r[i] || 0, abs(value));
          if (larger(ri, maxr)) maxr = ri;
          r[i] = ri;
        }, true);
        return maxr;
      }

      if (p === 'fro') {
        // norm(x) = sqrt(sum(diag(x'x)))
        return sqrt(trace(multiply(transpose(x), x)));
      }

      if (p === 2) {
        // not implemented
        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
      } // invalid parameter value


      throw new Error('Unsupported parameter value');
    }
  }

  norm.toTex = {
    1: '\\left\\|${args[0]}\\right\\|',
    2: undefined // use default template

  };
  return norm;
}

exports.name = 'norm';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../arithmetic/abs":55,"../arithmetic/add":56,"../arithmetic/multiply":76,"../arithmetic/pow":80,"../arithmetic/sqrt":83,"../matrix/trace":111,"../matrix/transpose":112,"../relational/equalScalar":128,"../relational/larger":129,"../relational/smaller":130}],79:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Calculate the nth root of a value.
   * The principal nth root of a positive real number A, is the positive real
   * solution of the equation
   *
   *     x^root = A
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *     math.nthRoot(a)
   *     math.nthRoot(a, root)
   *
   * Examples:
   *
   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9
   *     math.sqrt(9);          // returns 3, as 3^2 == 9
   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param {number | BigNumber | Array | Matrix | Complex} a
   *              Value for which to calculate the nth root
   * @param {number | BigNumber} [root=2]    The root.
   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
   */

  var nthRoot = typed('nthRoot', {
    'number': function number(x) {
      return _nthRoot(x, 2);
    },
    'number, number': _nthRoot,
    'BigNumber': function BigNumber(x) {
      return _bigNthRoot(x, new type.BigNumber(2));
    },
    'Complex': function Complex(x) {
      return _nthComplexRoot(x, 2);
    },
    'Complex, number': _nthComplexRoot,
    'BigNumber, BigNumber': _bigNthRoot,
    'Array | Matrix': function ArrayMatrix(x) {
      return nthRoot(x, 2);
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // density must be one (no zeros in matrix)
              if (y.density() === 1) {
                // sparse + sparse
                c = algorithm06(x, y, nthRoot);
              } else {
                // throw exception
                throw new Error('Root must be non-zero');
              }

              break;

            default:
              // sparse + dense
              c = algorithm02(y, x, nthRoot, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // density must be one (no zeros in matrix)
              if (y.density() === 1) {
                // dense + sparse
                c = algorithm01(x, y, nthRoot, false);
              } else {
                // throw exception
                throw new Error('Root must be non-zero');
              }

              break;

            default:
              // dense + dense
              c = algorithm13(x, y, nthRoot);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return nthRoot(x, matrix(y));
    },
    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, nthRoot, false);
          break;

        default:
          c = algorithm14(x, y, nthRoot, false);
          break;
      }

      return c;
    },
    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          // density must be one (no zeros in matrix)
          if (y.density() === 1) {
            // sparse - scalar
            c = algorithm11(y, x, nthRoot, true);
          } else {
            // throw exception
            throw new Error('Root must be non-zero');
          }

          break;

        default:
          c = algorithm14(y, x, nthRoot, true);
          break;
      }

      return c;
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return nthRoot(x, matrix(y)).valueOf();
    }
  });
  nthRoot.toTex = {
    2: '\\sqrt[${args[1]}]{${args[0]}}'
  };
  return nthRoot;
  /**
   * Calculate the nth root of a for BigNumbers, solve x^root == a
   * http://rosettacode.org/wiki/Nth_root#JavaScript
   * @param {BigNumber} a
   * @param {BigNumber} root
   * @private
   */

  function _bigNthRoot(a, root) {
    var precision = type.BigNumber.precision;
    var Big = type.BigNumber.clone({
      precision: precision + 2
    });
    var zero = new type.BigNumber(0);
    var one = new Big(1);
    var inv = root.isNegative();

    if (inv) {
      root = root.neg();
    }

    if (root.isZero()) {
      throw new Error('Root must be non-zero');
    }

    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
      throw new Error('Root must be odd when a is negative.');
    } // edge cases zero and infinity


    if (a.isZero()) {
      return inv ? new Big(Infinity) : 0;
    }

    if (!a.isFinite()) {
      return inv ? zero : a;
    }

    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,
    // so (-1) ^ (1/root) = -1

    x = a.isNeg() ? x.neg() : x;
    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));
  }
}
/**
 * Calculate the nth root of a, solve x^root == a
 * http://rosettacode.org/wiki/Nth_root#JavaScript
 * @param {number} a
 * @param {number} root
 * @private
 */


function _nthRoot(a, root) {
  var inv = root < 0;

  if (inv) {
    root = -root;
  }

  if (root === 0) {
    throw new Error('Root must be non-zero');
  }

  if (a < 0 && Math.abs(root) % 2 != 1) {
    throw new Error('Root must be odd when a is negative.');
  } // edge cases zero and infinity


  if (a == 0) {
    return inv ? Infinity : 0;
  }

  if (!isFinite(a)) {
    return inv ? 0 : a;
  }

  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,
  // so (-1) ^ (1/root) = -1

  x = a < 0 ? -x : x;
  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).
  // Newton's method has some well-known problems at times:
  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis

  /*
  var x = 1; // Initial guess
  var xPrev = 1;
  var i = 0;
  var iMax = 10000;
  do {
    var delta = (a / Math.pow(x, root - 1) - x) / root;
    xPrev = x;
    x = x + delta;
    i++;
  }
  while (xPrev !== x && i < iMax);
   if (xPrev !== x) {
    throw new Error('Function nthRoot failed to converge');
  }
   return inv ? 1 / x : x;
  */
}
/**
 * Calculate the nth root of a Complex Number a using De Moviers Theorem.
 * @param  {Complex} a
 * @param  {number} root
 * @return {Array} array or n Complex Roots in Polar Form.
 */


function _nthComplexRoot(a, root) {
  if (root < 0) throw new Error('Root must be greater than zero');
  if (root === 0) throw new Error('Root must be non-zero');
  if (root % 1 !== 0) throw new Error('Root must be an integer');
  var arg = a.arg();
  var abs = a.abs();
  var roots = [];
  var r = Math.pow(abs, 1 / root);

  for (var k = 0; k < root; k++) {
    roots.push({
      r: r,
      phi: (arg + 2 * Math.PI * k) / root
    });
  }

  return roots;
}

exports.name = 'nthRoot';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm01":198,"../../type/matrix/utils/algorithm02":199,"../../type/matrix/utils/algorithm06":203,"../../type/matrix/utils/algorithm11":207,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210}],80:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

var size = require('../../utils/array').size;

function factory(type, config, load, typed) {
  var latex = require('../../utils/latex');

  var eye = load(require('../matrix/eye'));
  var multiply = load(require('./multiply'));
  var matrix = load(require('../../type/matrix/function/matrix'));
  var fraction = load(require('../../type/fraction/function/fraction'));
  var number = load(require('../../type/number'));
  /**
   * Calculates the power of x to y, `x ^ y`.
   * Matrix exponentiation is supported for square matrices `x`, and positive
   * integer exponents `y`.
   *
   * For cubic roots of negative numbers, the function returns the principal
   * root by default. In order to let the function return the real root,
   * math.js can be configured with `math.config({predictable: true})`.
   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
   *
   * Syntax:
   *
   *    math.pow(x, y)
   *
   * Examples:
   *
   *    math.pow(2, 3);               // returns number 8
   *
   *    var a = math.complex(2, 3);
   *    math.pow(a, 2)                // returns Complex -5 + 12i
   *
   *    var b = [[1, 2], [4, 3]];
   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    multiply, sqrt, cbrt, nthRoot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex} y                   The exponent
   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
   */

  var pow = typed('pow', {
    'number, number': _pow,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.pow(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      if (y.isInteger() || x >= 0 || config.predictable) {
        return x.pow(y);
      } else {
        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
      }
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      if (y.d !== 1) {
        if (config.predictable) {
          throw new Error('Function pow does not support non-integer exponents for fractions.');
        } else {
          return _pow(x.valueOf(), y.valueOf());
        }
      } else {
        return x.pow(y);
      }
    },
    'Array, number': _powArray,
    'Array, BigNumber': function ArrayBigNumber(x, y) {
      return _powArray(x, y.toNumber());
    },
    'Matrix, number': _powMatrix,
    'Matrix, BigNumber': function MatrixBigNumber(x, y) {
      return _powMatrix(x, y.toNumber());
    },
    'Unit, number': function UnitNumber(x, y) {
      return x.pow(y);
    }
  });
  /**
   * Calculates the power of x to y, x^y, for two numbers.
   * @param {number} x
   * @param {number} y
   * @return {number | Complex} res
   * @private
   */

  function _pow(x, y) {
    // Alternatively could define a 'realmode' config option or something, but
    // 'predictable' will work for now
    if (config.predictable && !isInteger(y) && x < 0) {
      // Check to see if y can be represented as a fraction
      try {
        var yFrac = fraction(y);
        var yNum = number(yFrac);

        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
          if (yFrac.d % 2 === 1) {
            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
          }
        }
      } catch (ex) {} // fraction() throws an error if y is Infinity, etc.
      // Unable to express y as a fraction, so continue on

    } // x^Infinity === 0 if -1 < x < 1
    // A real number 0 is returned instead of complex(0)


    if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
      return 0;
    } // **for predictable mode** x^Infinity === NaN if x < -1
    // N.B. this behavour is different from `Math.pow` which gives
    // (-2)^Infinity === Infinity


    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
      return NaN;
    }

    if (isInteger(y) || x >= 0 || config.predictable) {
      return Math.pow(x, y);
    } else {
      return new type.Complex(x, 0).pow(y, 0);
    }
  }
  /**
   * Calculate the power of a 2d array
   * @param {Array} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Array}
   * @private
   */


  function _powArray(x, y) {
    if (!isInteger(y) || y < 0) {
      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
    } // verify that A is a 2 dimensional square matrix


    var s = size(x);

    if (s.length != 2) {
      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
    }

    if (s[0] != s[1]) {
      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
    }

    var res = eye(s[0]).valueOf();
    var px = x;

    while (y >= 1) {
      if ((y & 1) == 1) {
        res = multiply(px, res);
      }

      y >>= 1;
      px = multiply(px, px);
    }

    return res;
  }
  /**
   * Calculate the power of a 2d matrix
   * @param {Matrix} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Matrix}
   * @private
   */


  function _powMatrix(x, y) {
    return matrix(_powArray(x.valueOf(), y));
  }

  pow.toTex = {
    2: '\\left(${args[0]}\\right)' + latex.operators['pow'] + '{${args[1]}}'
  };
  return pow;
}

exports.name = 'pow';
exports.factory = factory;

},{"../../type/fraction/function/fraction":185,"../../type/matrix/function/matrix":195,"../../type/number":211,"../../utils/array":212,"../../utils/latex":228,"../../utils/number":229,"../matrix/eye":94,"./multiply":76}],81:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

var toFixed = require('../../utils/number').toFixed;

var deepMap = require('../../utils/collection/deepMap');

var NO_INT = 'Number of decimals in function round must be an integer';

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var equalScalar = load(require('../relational/equalScalar'));
  var zeros = load(require('../matrix/zeros'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Round a value towards the nearest integer.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.round(x)
   *    math.round(x, n)
   *
   * Examples:
   *
   *    math.round(3.2);              // returns number 3
   *    math.round(3.8);              // returns number 4
   *    math.round(-4.2);             // returns number -4
   *    math.round(-4.7);             // returns number -5
   *    math.round(math.pi, 3);       // returns number 3.142
   *    math.round(123.45678, 2);     // returns number 123.46
   *
   *    var c = math.complex(3.2, -2.7);
   *    math.round(c);                // returns Complex 3 - 3i
   *
   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]
   *
   * See also:
   *
   *    ceil, fix, floor
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  var round = typed('round', {
    'number': Math.round,
    'number, number': function numberNumber(x, n) {
      if (!isInteger(n)) {
        throw new TypeError(NO_INT);
      }

      if (n < 0 || n > 15) {
        throw new Error('Number of decimals in function round must be in te range of 0-15');
      }

      return _round(x, n);
    },
    'Complex': function Complex(x) {
      return x.round();
    },
    'Complex, number': function ComplexNumber(x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }

      return x.round(n);
    },
    'Complex, BigNumber': function ComplexBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      var _n = n.toNumber();

      return x.round(_n);
    },
    'number, BigNumber': function numberBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
    },
    'BigNumber': function BigNumber(x) {
      return x.toDecimalPlaces(0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      return x.toDecimalPlaces(n.toNumber());
    },
    'Fraction': function Fraction(x) {
      return x.round();
    },
    'Fraction, number': function FractionNumber(x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }

      return x.round(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since round(0) = 0
      return deepMap(x, round, true);
    },
    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, round, false);
          break;

        default:
          c = algorithm14(x, y, round, false);
          break;
      }

      return c;
    },
    'number | Complex | BigNumber, Matrix': function numberComplexBigNumberMatrix(x, y) {
      // check scalar is zero
      if (!equalScalar(x, 0)) {
        // result
        var c; // check storage format

        switch (y.storage()) {
          case 'sparse':
            c = algorithm12(y, x, round, true);
            break;

          default:
            c = algorithm14(y, x, round, true);
            break;
        }

        return c;
      } // do not execute algorithm, result will be a zero matrix


      return zeros(y.size(), y.storage());
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, round, false).valueOf();
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, round, true).valueOf();
    }
  });
  round.toTex = {
    1: '\\left\\lfloor${args[0]}\\right\\rceil',
    2: undefined // use default template

  };
  return round;
}
/**
 * round a number to the given number of decimals, or to zero if decimals is
 * not provided
 * @param {number} value
 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
 * @return {number} roundedValue
 * @private
 */


function _round(value, decimals) {
  return parseFloat(toFixed(value, decimals));
}

exports.name = 'round';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm11":207,"../../type/matrix/utils/algorithm12":208,"../../type/matrix/utils/algorithm14":210,"../../utils/collection/deepMap":219,"../../utils/number":229,"../matrix/zeros":113,"../relational/equalScalar":128}],82:[function(require,module,exports){
'use strict';

var number = require('../../utils/number');

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Compute the sign of a value. The sign of a value x is:
   *
   * -  1 when x > 1
   * - -1 when x < 0
   * -  0 when x == 0
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sign(x)
   *
   * Examples:
   *
   *    math.sign(3.5);               // returns 1
   *    math.sign(-4.2);              // returns -1
   *    math.sign(0);                 // returns 0
   *
   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]
   *
   * See also:
   *
   *    abs
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            The number for which to determine the sign
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
   *            The sign of `x`
   */
  var sign = typed('sign', {
    'number': number.sign,
    'Complex': function Complex(x) {
      return x.sign();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(x.cmp(0));
    },
    'Fraction': function Fraction(x) {
      return new type.Fraction(x.s, 1);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sign(0) = 0
      return deepMap(x, sign, true);
    },
    'Unit': function Unit(x) {
      return sign(x.value);
    }
  });
  sign.toTex = {
    1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
  };
  return sign;
}

exports.name = 'sign';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/number":229}],83:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the square root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sqrt(x)
   *
   * Examples:
   *
   *    math.sqrt(25);                // returns 5
   *    math.square(5);               // returns 25
   *    math.sqrt(-4);                // returns Complex 2i
   *
   * See also:
   *
   *    square, multiply, cube, cbrt
   *
   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
   *            Value for which to calculate the square root.
   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
   *            Returns the square root of `x`
   */
  var sqrt = typed('sqrt', {
    'number': _sqrtNumber,
    'Complex': function Complex(x) {
      return x.sqrt();
    },
    'BigNumber': function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.sqrt();
      } else {
        // negative value -> downgrade to number to do complex value computation
        return _sqrtNumber(x.toNumber());
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sqrt(0) = 0
      return deepMap(x, sqrt, true);
    },
    'Unit': function Unit(x) {
      // Someday will work for complex units when they are implemented
      return x.pow(0.5);
    }
  });
  /**
   * Calculate sqrt for a number
   * @param {number} x
   * @returns {number | Complex} Returns the square root of x
   * @private
   */

  function _sqrtNumber(x) {
    if (x >= 0 || config.predictable) {
      return Math.sqrt(x);
    } else {
      return new type.Complex(x, 0).sqrt();
    }
  }

  sqrt.toTex = {
    1: '\\sqrt{${args[0]}}'
  };
  return sqrt;
}

exports.name = 'sqrt';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],84:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Compute the square of a value, `x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.square(x)
   *
   * Examples:
   *
   *    math.square(2);           // returns number 4
   *    math.square(3);           // returns number 9
   *    math.pow(3, 2);           // returns number 9
   *    math.multiply(3, 3);      // returns number 9
   *
   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]
   *
   * See also:
   *
   *    multiply, cube, sqrt, pow
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            Number for which to calculate the square
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Squared value
   */
  var square = typed('square', {
    'number': function number(x) {
      return x * x;
    },
    'Complex': function Complex(x) {
      return x.mul(x);
    },
    'BigNumber': function BigNumber(x) {
      return x.times(x);
    },
    'Fraction': function Fraction(x) {
      return x.mul(x);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since square(0) = 0
      return deepMap(x, square, true);
    },
    'Unit': function Unit(x) {
      return x.pow(2);
    }
  });
  square.toTex = {
    1: '\\left(${args[0]}\\right)^2'
  };
  return square;
}

exports.name = 'square';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],85:[function(require,module,exports){
'use strict';

var DimensionError = require('../../error/DimensionError');

function factory(type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));
  var addScalar = load(require('./addScalar'));
  var unaryMinus = load(require('./unaryMinus'));
  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14')); // TODO: split function subtract in two: subtract and subtractScalar

  /**
   * Subtract two values, `x - y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.subtract(x, y)
   *
   * Examples:
   *
   *    math.subtract(5.3, 2);        // returns number 3.3
   *
   *    var a = math.complex(2, 3);
   *    var b = math.complex(4, 1);
   *    math.subtract(a, b);          // returns Complex -2 + 2i
   *
   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]
   *
   *    var c = math.unit('2.1 km');
   *    var d = math.unit('500m');
   *    math.subtract(c, d);          // returns Unit 1.6 km
   *
   * See also:
   *
   *    add
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
   *            Initial value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
   *            Value to subtract from `x`
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Subtraction of `x` and `y`
   */

  var subtract = typed('subtract', {
    'number, number': function numberNumber(x, y) {
      return x - y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.sub(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.minus(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.sub(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (x.value == null) {
        throw new Error('Parameter x contains a unit with undefined value');
      }

      if (y.value == null) {
        throw new Error('Parameter y contains a unit with undefined value');
      }

      if (!x.equalBase(y)) {
        throw new Error('Units do not match');
      }

      var res = x.clone();
      res.value = subtract(res.value, y.value);
      res.fixPrefix = false;
      return res;
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // matrix sizes
      var xsize = x.size();
      var ysize = y.size(); // check dimensions

      if (xsize.length !== ysize.length) throw new DimensionError(xsize.length, ysize.length); // result

      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse - sparse
              c = algorithm05(x, y, subtract);
              break;

            default:
              // sparse - dense
              c = algorithm03(y, x, subtract, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense - sparse
              c = algorithm01(x, y, subtract, false);
              break;

            default:
              // dense - dense
              c = algorithm13(x, y, subtract);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return subtract(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return subtract(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return subtract(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          // algorithm 7 is faster than 9 since it calls f() for nonzero items only!
          c = algorithm10(x, unaryMinus(y), addScalar);
          break;

        default:
          c = algorithm14(x, y, subtract);
          break;
      }

      return c;
    },
    'any, Matrix': function anyMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm10(y, x, subtract, true);
          break;

        default:
          c = algorithm14(y, x, subtract, true);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, subtract, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, subtract, true).valueOf();
    }
  });
  subtract.toTex = {
    2: '\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\right)'
  };
  return subtract;
}

exports.name = 'subtract';
exports.factory = factory;

},{"../../error/DimensionError":53,"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm01":198,"../../type/matrix/utils/algorithm03":200,"../../type/matrix/utils/algorithm05":202,"../../type/matrix/utils/algorithm10":206,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/latex":228,"./addScalar":57,"./unaryMinus":86}],86:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  var latex = require('../../utils/latex');
  /**
   * Inverse the sign of a value, apply a unary minus operation.
   *
   * For matrices, the function is evaluated element wise. Boolean values and
   * strings will be converted to a number. For complex numbers, both real and
   * complex value are inverted.
   *
   * Syntax:
   *
   *    math.unaryMinus(x)
   *
   * Examples:
   *
   *    math.unaryMinus(3.5);      // returns -3.5
   *    math.unaryMinus(-4.2);     // returns 4.2
   *
   * See also:
   *
   *    add, subtract, unaryPlus
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
   */


  var unaryMinus = typed('unaryMinus', {
    'number': function number(x) {
      return -x;
    },
    'Complex': function Complex(x) {
      return x.neg();
    },
    'BigNumber': function BigNumber(x) {
      return x.neg();
    },
    'Fraction': function Fraction(x) {
      return x.neg();
    },
    'Unit': function Unit(x) {
      var res = x.clone();
      res.value = unaryMinus(x.value);
      return res;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since unaryMinus(0) = 0
      return deepMap(x, unaryMinus, true);
    } // TODO: add support for string

  });
  unaryMinus.toTex = {
    1: latex.operators['unaryMinus'] + '\\left(${args[0]}\\right)'
  };
  return unaryMinus;
}

exports.name = 'unaryMinus';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/latex":228}],87:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  var latex = require('../../utils/latex');
  /**
   * Unary plus operation.
   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.unaryPlus(x)
   *
   * Examples:
   *
   *    math.unaryPlus(3.5);      // returns 3.5
   *    math.unaryPlus(1);     // returns 1
   *
   * See also:
   *
   *    unaryMinus, add, subtract
   *
   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
   *            Input value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns the input value when numeric, converts to a number when input is non-numeric.
   */


  var unaryPlus = typed('unaryPlus', {
    'number': function number(x) {
      return x;
    },
    'Complex': function Complex(x) {
      return x; // complex numbers are immutable
    },
    'BigNumber': function BigNumber(x) {
      return x; // bignumbers are immutable
    },
    'Fraction': function Fraction(x) {
      return x; // fractions are immutable
    },
    'Unit': function Unit(x) {
      return x.clone();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since unaryPlus(0) = 0
      return deepMap(x, unaryPlus, true);
    },
    'boolean | string | null': function booleanStringNull(x) {
      // convert to a number or bignumber
      return config.number == 'BigNumber' ? new type.BigNumber(+x) : +x;
    }
  });
  unaryPlus.toTex = {
    1: latex.operators['unaryPlus'] + '\\left(${args[0]}\\right)'
  };
  return unaryPlus;
}

exports.name = 'unaryPlus';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/latex":228}],88:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Calculate the extended greatest common divisor for two values.
   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
   *
   * Syntax:
   *
   *    math.xgcd(a, b)
   *
   * Examples:
   *
   *    math.xgcd(8, 12);             // returns [4, -1, 1]
   *    math.gcd(8, 12);              // returns 4
   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]
   *
   * See also:
   *
   *    gcd, lcm
   *
   * @param {number | BigNumber} a  An integer number
   * @param {number | BigNumber} b  An integer number
   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
   */

  var xgcd = typed('xgcd', {
    'number, number': _xgcd,
    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction

  });
  xgcd.toTex = undefined; // use default template

  return xgcd;
  /**
   * Calculate xgcd for two numbers
   * @param {number} a
   * @param {number} b
   * @return {number} result
   * @private
   */

  function _xgcd(a, b) {
    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    var t,
        // used to swap two variables
    q,
        // quotient
    r,
        // remainder
    x = 0,
        lastx = 1,
        y = 1,
        lasty = 0;

    if (!isInteger(a) || !isInteger(b)) {
      throw new Error('Parameters in function xgcd must be integer numbers');
    }

    while (b) {
      q = Math.floor(a / b);
      r = a - q * b;
      t = x;
      x = lastx - q * x;
      lastx = t;
      t = y;
      y = lasty - q * y;
      lasty = t;
      a = b;
      b = r;
    }

    var res;

    if (a < 0) {
      res = [-a, -lastx, -lasty];
    } else {
      res = [a, a ? lastx : 0, lasty];
    }

    return config.matrix === 'Array' ? res : matrix(res);
  }
  /**
   * Calculate xgcd for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @return {BigNumber[]} result
   * @private
   */


  function _xgcdBigNumber(a, b) {
    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    var t,
        // used to swap two variables
    q,
        // quotient
    r,
        // remainder
    zero = new type.BigNumber(0),
        one = new type.BigNumber(1),
        x = zero,
        lastx = one,
        y = one,
        lasty = zero;

    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function xgcd must be integer numbers');
    }

    while (!b.isZero()) {
      q = a.div(b).floor();
      r = a.mod(b);
      t = x;
      x = lastx.minus(q.times(x));
      lastx = t;
      t = y;
      y = lasty.minus(q.times(y));
      lasty = t;
      a = b;
      b = r;
    }

    var res;

    if (a.lt(zero)) {
      res = [a.neg(), lastx.neg(), lasty.neg()];
    } else {
      res = [a, !a.isZero() ? lastx : 0, lasty];
    }

    return config.matrix === 'Array' ? res : matrix(res);
  }
}

exports.name = 'xgcd';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/number":229}],89:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;

var isInteger = require('../../utils/number').isInteger;

var array = require('../../utils/array');

var IndexError = require('../../error/IndexError');

var DimensionError = require('../../error/DimensionError');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Concatenate two or more matrices.
   *
   * Syntax:
   *
   *     math.concat(A, B, C, ...)
   *     math.concat(A, B, C, ..., dim)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *   By default the last dimension of the matrices.
   *
   * Examples:
   *
   *    var A = [[1, 2], [5, 6]];
   *    var B = [[3, 4], [7, 8]];
   *
   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
   *    math.concat('hello', ' ', 'world'); // returns 'hello world'
   *
   * See also:
   *
   *    size, squeeze, subset, transpose
   *
   * @param {... Array | Matrix} args     Two or more matrices
   * @return {Array | Matrix} Concatenated matrix
   */

  var concat = typed('concat', {
    // TODO: change signature to '...Array | Matrix, dim?' when supported
    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
      var i;
      var len = args.length;
      var dim = -1; // zero-based dimension

      var prevDim;
      var asMatrix = false;
      var matrices = []; // contains multi dimensional arrays

      for (i = 0; i < len; i++) {
        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)

        if (type.isMatrix(arg)) {
          asMatrix = true;
        }

        if (type.isNumber(arg) || type.isBigNumber(arg)) {
          if (i !== len - 1) {
            throw new Error('Dimension must be specified as last argument');
          } // last argument contains the dimension on which to concatenate


          prevDim = dim;
          dim = arg.valueOf(); // change BigNumber to number

          if (!isInteger(dim)) {
            throw new TypeError('Integer number expected for dimension');
          }

          if (dim < 0 || i > 0 && dim > prevDim) {
            // TODO: would be more clear when throwing a DimensionError here
            throw new IndexError(dim, prevDim + 1);
          }
        } else {
          // this is a matrix or array
          var m = clone(arg).valueOf();
          var size = array.size(m);
          matrices[i] = m;
          prevDim = dim;
          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions

          if (i > 0 && dim != prevDim) {
            throw new DimensionError(prevDim + 1, dim + 1);
          }
        }
      }

      if (matrices.length == 0) {
        throw new SyntaxError('At least one matrix expected');
      }

      var res = matrices.shift();

      while (matrices.length) {
        res = _concat(res, matrices.shift(), dim, 0);
      }

      return asMatrix ? matrix(res) : res;
    },
    '...string': function string(args) {
      return args.join('');
    }
  });
  concat.toTex = undefined; // use default template

  return concat;
}
/**
 * Recursively concatenate two matrices.
 * The contents of the matrices is not cloned.
 * @param {Array} a             Multi dimensional array
 * @param {Array} b             Multi dimensional array
 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
 * @param {number} dim          The current dim (zero-based)
 * @return {Array} c            The concatenated matrix
 * @private
 */


function _concat(a, b, concatDim, dim) {
  if (dim < concatDim) {
    // recurse into next dimension
    if (a.length != b.length) {
      throw new DimensionError(a.length, b.length);
    }

    var c = [];

    for (var i = 0; i < a.length; i++) {
      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
    }

    return c;
  } else {
    // concatenate this dimension
    return a.concat(b);
  }
}

exports.name = 'concat';
exports.factory = factory;

},{"../../error/DimensionError":53,"../../error/IndexError":54,"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/number":229,"../../utils/object":230}],90:[function(require,module,exports){
'use strict';

var array = require('../../utils/array');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var subtract = load(require('../arithmetic/subtract'));
  var multiply = load(require('../arithmetic/multiply'));
  /**
   * Calculate the cross product for two vectors in three dimensional space.
   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
   * as:
   *
   *    cross(A, B) = [
   *      a2 * b3 - a3 * b2,
   *      a3 * b1 - a1 * b3,
   *      a1 * b2 - a2 * b1
   *    ]
   *
   * If one of the input vectors has a dimension greater than 1, the output
   * vector will be a 1x3 (2-dimensional) matrix.
   *
   * Syntax:
   *
   *    math.cross(x, y)
   *
   * Examples:
   *
   *    math.cross([1, 1, 0],   [0, 1, 1]);       // Returns [1, -1, 1]
   *    math.cross([3, -3, 1],  [4, 9, 2]);       // Returns [-15, -2, 39]
   *    math.cross([2, 3, 4],   [5, 6, 7]);       // Returns [-3, 6, -3]
   *    math.cross([[1, 2, 3]], [[4], [5], [6]]); // Returns [[-3, 6, -3]]
   *
   * See also:
   *
   *    dot, multiply
   *
   * @param  {Array | Matrix} x   First vector
   * @param  {Array | Matrix} y   Second vector
   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
   */

  var cross = typed('cross', {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return matrix(_cross(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return matrix(_cross(x.toArray(), y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return matrix(_cross(x, y.toArray()));
    },
    'Array, Array': _cross
  });
  cross.toTex = {
    2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
  };
  return cross;
  /**
   * Calculate the cross product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {Array} Returns the cross product of x and y
   * @private
   */

  function _cross(x, y) {
    var highestDimension = Math.max(array.size(x).length, array.size(y).length);
    x = array.squeeze(x);
    y = array.squeeze(y);
    var xSize = array.size(x);
    var ySize = array.size(y);

    if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {
      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
    }

    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];

    if (highestDimension > 1) {
      return [product];
    } else {
      return product;
    }
  }
}

exports.name = 'cross';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212,"../arithmetic/multiply":76,"../arithmetic/subtract":85}],91:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');

var object = util.object;
var string = util.string;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var add = load(require('../arithmetic/add'));
  var subtract = load(require('../arithmetic/subtract'));
  var multiply = load(require('../arithmetic/multiply'));
  var unaryMinus = load(require('../arithmetic/unaryMinus'));
  /**
   * Calculate the determinant of a matrix.
   *
   * Syntax:
   *
   *    math.det(x)
   *
   * Examples:
   *
   *    math.det([[1, 2], [3, 4]]); // returns -2
   *
   *    var A = [
   *      [-2, 2, 3],
   *      [-1, 1, 3],
   *      [2, 0, -1]
   *    ]
   *    math.det(A); // returns 6
   *
   * See also:
   *
   *    inv
   *
   * @param {Array | Matrix} x  A matrix
   * @return {number} The determinant of `x`
   */

  var det = typed('det', {
    'any': function any(x) {
      return object.clone(x);
    },
    'Array | Matrix': function det(x) {
      var size;

      if (type.isMatrix(x)) {
        size = x.size();
      } else if (Array.isArray(x)) {
        x = matrix(x);
        size = x.size();
      } else {
        // a scalar
        size = [];
      }

      switch (size.length) {
        case 0:
          // scalar
          return object.clone(x);

        case 1:
          // vector
          if (size[0] == 1) {
            return object.clone(x.valueOf()[0]);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');
          }

        case 2:
          // two dimensional array
          var rows = size[0];
          var cols = size[1];

          if (rows == cols) {
            return _det(x.clone().valueOf(), rows, cols);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + string.format(size) + ')');
      }
    }
  });
  det.toTex = {
    1: '\\det\\left(${args[0]}\\right)'
  };
  return det;
  /**
   * Calculate the determinant of a matrix
   * @param {Array[]} matrix  A square, two dimensional matrix
   * @param {number} rows     Number of rows of the matrix (zero-based)
   * @param {number} cols     Number of columns of the matrix (zero-based)
   * @returns {number} det
   * @private
   */

  function _det(matrix, rows, cols) {
    if (rows == 1) {
      // this is a 1 x 1 matrix
      return object.clone(matrix[0][0]);
    } else if (rows == 2) {
      // this is a 2 x 2 matrix
      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
    } else {
      // this is an n x n matrix
      var compute_mu = function compute_mu(matrix) {
        var i, j; // Compute the matrix with zero lower triangle, same upper triangle,
        // and diagonals given by the negated sum of the below diagonal
        // elements.

        var mu = new Array(matrix.length);
        var sum = 0;

        for (i = 1; i < matrix.length; i++) {
          sum = add(sum, matrix[i][i]);
        }

        for (i = 0; i < matrix.length; i++) {
          mu[i] = new Array(matrix.length);
          mu[i][i] = unaryMinus(sum);

          for (j = 0; j < i; j++) {
            mu[i][j] = 0; // TODO: make bignumber 0 in case of bignumber computation
          }

          for (j = i + 1; j < matrix.length; j++) {
            mu[i][j] = matrix[i][j];
          }

          if (i + 1 < matrix.length) {
            sum = subtract(sum, matrix[i + 1][i + 1]);
          }
        }

        return mu;
      };

      var fa = matrix;

      for (var i = 0; i < rows - 1; i++) {
        fa = multiply(compute_mu(fa), matrix);
      }

      if (rows % 2 == 0) {
        return unaryMinus(fa[0][0]);
      } else {
        return fa[0][0];
      }
    }
  }
}

exports.name = 'det';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/index":227,"../arithmetic/add":56,"../arithmetic/multiply":76,"../arithmetic/subtract":85,"../arithmetic/unaryMinus":86}],92:[function(require,module,exports){
'use strict';

var array = require('../../utils/array');

var clone = require('../../utils/object').clone;

var isInteger = require('../../utils/number').isInteger;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Create a diagonal matrix or retrieve the diagonal of a matrix
   *
   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
   * When k is positive, the values are placed on the super diagonal.
   * When k is negative, the values are placed on the sub diagonal.
   *
   * Syntax:
   *
   *     math.diag(X)
   *     math.diag(X, format)
   *     math.diag(X, k)
   *     math.diag(X, k, format)
   *
   * Examples:
   *
   *     // create a diagonal matrix
   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *
   *    // retrieve the diagonal from a matrix
   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
   *    math.diag(a);   // returns [1, 5, 9]
   *
   * See also:
   *
   *     ones, zeros, eye
   *
   * @param {Matrix | Array} x          A two dimensional matrix or a vector
   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
   *                                    in or retrieved.
   * @param {string} [format='dense']   The matrix storage format.
   *
   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
   */

  var diag = typed('diag', {
    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
    'Array': function Array(x) {
      return _diag(x, 0, array.size(x), null);
    },
    'Array, number': function ArrayNumber(x, k) {
      return _diag(x, k, array.size(x), null);
    },
    'Array, BigNumber': function ArrayBigNumber(x, k) {
      return _diag(x, k.toNumber(), array.size(x), null);
    },
    'Array, string': function ArrayString(x, format) {
      return _diag(x, 0, array.size(x), format);
    },
    'Array, number, string': function ArrayNumberString(x, k, format) {
      return _diag(x, k, array.size(x), format);
    },
    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
      return _diag(x, k.toNumber(), array.size(x), format);
    },
    'Matrix': function Matrix(x) {
      return _diag(x, 0, x.size(), x.storage());
    },
    'Matrix, number': function MatrixNumber(x, k) {
      return _diag(x, k, x.size(), x.storage());
    },
    'Matrix, BigNumber': function MatrixBigNumber(x, k) {
      return _diag(x, k.toNumber(), x.size(), x.storage());
    },
    'Matrix, string': function MatrixString(x, format) {
      return _diag(x, 0, x.size(), format);
    },
    'Matrix, number, string': function MatrixNumberString(x, k, format) {
      return _diag(x, k, x.size(), format);
    },
    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
      return _diag(x, k.toNumber(), x.size(), format);
    }
  });
  diag.toTex = undefined; // use default template

  return diag;
  /**
   * Creeate diagonal matrix from a vector or vice versa
   * @param {Array | Matrix} x
   * @param {number} k
   * @param {string} format Storage format for matrix. If null,
   *                          an Array is returned
   * @returns {Array | Matrix}
   * @private
   */

  function _diag(x, k, size, format) {
    if (!isInteger(k)) {
      throw new TypeError('Second parameter in function diag must be an integer');
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // check dimensions

    switch (size.length) {
      case 1:
        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);

      case 2:
        return _getDiagonal(x, k, format, size, kSub, kSuper);
    }

    throw new RangeError('Matrix for function diag must be 2 dimensional');
  }

  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
    // matrix size
    var ms = [l + kSub, l + kSuper]; // get matrix constructor

    var F = type.Matrix.storage(format || 'dense'); // create diagonal matrix

    var m = F.diagonal(ms, x, k); // check we need to return a matrix

    return format !== null ? m : m.valueOf();
  }

  function _getDiagonal(x, k, format, s, kSub, kSuper) {
    // check x is a Matrix
    if (type.isMatrix(x)) {
      // get diagonal matrix
      var dm = x.diagonal(k); // check we need to return a matrix

      if (format !== null) {
        // check we need to change matrix format
        if (format !== dm.storage()) return matrix(dm, format);
        return dm;
      }

      return dm.valueOf();
    } // vector size


    var n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values

    var vector = []; // loop diagonal

    for (var i = 0; i < n; i++) {
      vector[i] = x[i + kSub][i + kSuper];
    } // check we need to return a matrix


    return format !== null ? matrix(vector) : vector;
  }
}

exports.name = 'diag';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/number":229,"../../utils/object":230}],93:[function(require,module,exports){
'use strict';

var size = require('../../utils/array').size;

function factory(type, config, load, typed) {
  var add = load(require('../arithmetic/add'));
  var multiply = load(require('../arithmetic/multiply'));
  /**
   * Calculate the dot product of two vectors. The dot product of
   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
   *
   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
   *
   * Syntax:
   *
   *    math.dot(x, y)
   *
   * Examples:
   *
   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15
   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15
   *
   * See also:
   *
   *    multiply, cross
   *
   * @param  {Array | Matrix} x     First vector
   * @param  {Array | Matrix} y     Second vector
   * @return {number}               Returns the dot product of `x` and `y`
   */

  var dot = typed('dot', {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return _dot(x.toArray(), y.toArray());
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return _dot(x.toArray(), y);
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return _dot(x, y.toArray());
    },
    'Array, Array': _dot
  });
  dot.toTex = {
    2: '\\left(${args[0]}\\cdot${args[1]}\\right)'
  };
  return dot;
  /**
   * Calculate the dot product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {number} Returns the dot product of x and y
   * @private
   */
  // TODO: double code with math.multiply

  function _dot(x, y) {
    var xSize = size(x);
    var ySize = size(y);
    var len = xSize[0];
    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message

    if (xSize[0] != ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
    if (len == 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
    var prod = 0;

    for (var i = 0; i < len; i++) {
      prod = add(prod, multiply(x[i], y[i]));
    }

    return prod;
  }
}

exports.name = 'dot';
exports.factory = factory;

},{"../../utils/array":212,"../arithmetic/add":56,"../arithmetic/multiply":76}],94:[function(require,module,exports){
'use strict';

var array = require('../../utils/array');

var isInteger = require('../../utils/number').isInteger;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Create a 2-dimensional identity matrix with size m x n or n x n.
   * The matrix has ones on the diagonal and zeros elsewhere.
   *
   * Syntax:
   *
   *    math.eye(n)
   *    math.eye(n, format)
   *    math.eye(m, n)
   *    math.eye(m, n, format)
   *    math.eye([m, n])
   *    math.eye([m, n], format)
   *
   * Examples:
   *
   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]
   *
   *    var A = [[1, 2, 3], [4, 5, 6]];
   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]
   *
   * See also:
   *
   *    diag, ones, zeros, size, range
   *
   * @param {...number | Matrix | Array} size   The size for the matrix
   * @param {string} [format]                   The Matrix storage format
   *
   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
   */

  var eye = typed('eye', {
    '': function _() {
      return config.matrix === 'Matrix' ? matrix([]) : [];
    },
    'string': function string(format) {
      return matrix(format);
    },
    'number | BigNumber': function numberBigNumber(rows) {
      return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);
    },
    'number | BigNumber, string': function numberBigNumberString(rows, format) {
      return _eye(rows, rows, format);
    },
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
      return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);
    },
    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
      return _eye(rows, cols, format);
    },
    'Array': function Array(size) {
      return _eyeVector(size);
    },
    'Array, string': function ArrayString(size, format) {
      return _eyeVector(size, format);
    },
    'Matrix': function Matrix(size) {
      return _eyeVector(size.valueOf(), size.storage());
    },
    'Matrix, string': function MatrixString(size, format) {
      return _eyeVector(size.valueOf(), format);
    }
  });
  eye.toTex = undefined; // use default template

  return eye;

  function _eyeVector(size, format) {
    switch (size.length) {
      case 0:
        return format ? matrix(format) : [];

      case 1:
        return _eye(size[0], size[0], format);

      case 2:
        return _eye(size[0], size[1], format);

      default:
        throw new Error('Vector containing two values expected');
    }
  }
  /**
   * Create an identity matrix
   * @param {number | BigNumber} rows
   * @param {number | BigNumber} cols
   * @param {string} [format]
   * @returns {Matrix}
   * @private
   */


  function _eye(rows, cols, format) {
    // BigNumber constructor with the right precision
    var Big = type.isBigNumber(rows) || type.isBigNumber(cols) ? type.BigNumber : null;
    if (type.isBigNumber(rows)) rows = rows.toNumber();
    if (type.isBigNumber(cols)) cols = cols.toNumber();

    if (!isInteger(rows) || rows < 1) {
      throw new Error('Parameters in function eye must be positive integers');
    }

    if (!isInteger(cols) || cols < 1) {
      throw new Error('Parameters in function eye must be positive integers');
    }

    var one = Big ? new type.BigNumber(1) : 1;
    var defaultValue = Big ? new Big(0) : 0;
    var size = [rows, cols]; // check we need to return a matrix

    if (format) {
      // get matrix storage constructor
      var F = type.Matrix.storage(format); // create diagonal matrix (use optimized implementation for storage format)

      return F.diagonal(size, one, 0, defaultValue);
    } // create and resize array


    var res = array.resize([], size, defaultValue); // fill in ones on the diagonal

    var minimum = rows < cols ? rows : cols; // fill diagonal

    for (var d = 0; d < minimum; d++) {
      res[d][d] = one;
    }

    return res;
  }
}

exports.name = 'eye';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/number":229}],95:[function(require,module,exports){
'use strict';

var filter = require('../../utils/array').filter;

var filterRegExp = require('../../utils/array').filterRegExp;

var maxArgumentCount = require('../../utils/function').maxArgumentCount;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Filter the items in an array or one dimensional matrix.
   *
   * Syntax:
   *
   *    math.filter(x, test)
   *
   * Examples:
   *
   *    function isPositive (x) {
   *      return x > 0;
   *    }
   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]
   *
   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/); // returns ["23", "100", "55"]
   *
   * See also:
   *
   *    forEach, map, sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
   * @param {Function | RegExp} test
   *        A function or regular expression to test items.
   *        All entries for which `test` returns true are returned.
   *        When `test` is a function, it is invoked with three parameters:
   *        the value of the element, the index of the element, and the
   *        matrix/array being traversed. The function must return a boolean.
   * @return {Matrix | Array} Returns the filtered matrix.
   */

  var filter = typed('filter', {
    'Array, function': _filterCallback,
    'Matrix, function': function MatrixFunction(x, test) {
      return matrix(_filterCallback(x.toArray(), test));
    },
    'Array, RegExp': filterRegExp,
    'Matrix, RegExp': function MatrixRegExp(x, test) {
      return matrix(filterRegExp(x.toArray(), test));
    }
  });
  filter.toTex = undefined; // use default template

  return filter;
}
/**
 * Filter values in a callback given a callback function
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */


function _filterCallback(x, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);
  return filter(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index]);
    } else {
      // 3 or -1
      return callback(value, [index], array);
    }
  });
}

exports.name = 'filter';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/function":226}],96:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;

var _flatten = require('../../utils/array').flatten;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Flatten a multi dimensional matrix into a single dimensional matrix.
   *
   * Syntax:
   *
   *    math.flatten(x)
   *
   * Examples:
   *
   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]
   *
   * See also:
   *
   *    concat, resize, size, squeeze
   *
   * @param {Matrix | Array} x   Matrix to be flattened
   * @return {Matrix | Array} Returns the flattened matrix
   */

  var flatten = typed('flatten', {
    'Array': function Array(x) {
      return _flatten(clone(x));
    },
    'Matrix': function Matrix(x) {
      var flat = _flatten(clone(x.toArray())); // TODO: return the same matrix type as x


      return matrix(flat);
    }
  });
  flatten.toTex = undefined; // use default template

  return flatten;
}

exports.name = 'flatten';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/object":230}],97:[function(require,module,exports){
'use strict';

var maxArgumentCount = require('../../utils/function').maxArgumentCount;

var forEach = require('../../utils/array').forEach;

function factory(type, config, load, typed) {
  /**
   * Iterate over all elements of a matrix/array, and executes the given callback function.
   *
   * Syntax:
   *
   *    math.forEach(x, callback)
   *
   * Examples:
   *
   *    math.forEach([1, 2, 3], function(value) {
   *      console.log(value);
   *    });
   *    // outputs 1, 2, 3
   *
   * See also:
   *
   *    filter, map, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix/array being traversed.
   */
  var forEach = typed('forEach', {
    'Array, function': _forEach,
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.forEach(callback);
    }
  });
  forEach.toTex = undefined; // use default template

  return forEach;
}
/**
 * forEach for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @private
 */


function _forEach(array, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);

  var recurse = function recurse(value, index) {
    if (Array.isArray(value)) {
      forEach(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        callback(value);
      } else if (args === 2) {
        callback(value, index);
      } else {
        // 3 or -1
        callback(value, index, array);
      }
    }
  };

  recurse(array, []);
}

exports.name = 'forEach';
exports.factory = factory;

},{"../../utils/array":212,"../../utils/function":226}],98:[function(require,module,exports){
"use strict";

module.exports = [require('./concat'), require('./cross'), require('./det'), require('./diag'), require('./dot'), require('./eye'), require('./filter'), require('./flatten'), require('./forEach'), require('./inv'), require('./kron'), require('./map'), require('./ones'), require('./partitionSelect'), require('./range'), require('./reshape'), require('./resize'), require('./size'), require('./sort'), require('./squeeze'), require('./subset'), require('./trace'), require('./transpose'), require('./zeros')];

},{"./concat":89,"./cross":90,"./det":91,"./diag":92,"./dot":93,"./eye":94,"./filter":95,"./flatten":96,"./forEach":97,"./inv":99,"./kron":100,"./map":101,"./ones":102,"./partitionSelect":103,"./range":104,"./reshape":105,"./resize":106,"./size":107,"./sort":108,"./squeeze":109,"./subset":110,"./trace":111,"./transpose":112,"./zeros":113}],99:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var divideScalar = load(require('../arithmetic/divideScalar'));
  var addScalar = load(require('../arithmetic/addScalar'));
  var multiply = load(require('../arithmetic/multiply'));
  var unaryMinus = load(require('../arithmetic/unaryMinus'));
  var det = load(require('../matrix/det'));
  var eye = load(require('./eye'));
  /**
   * Calculate the inverse of a square matrix.
   *
   * Syntax:
   *
   *     math.inv(x)
   *
   * Examples:
   *
   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]
   *     math.inv(4);                 // returns 0.25
   *     1 / 4;                       // returns 0.25
   *
   * See also:
   *
   *     det, transpose
   *
   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
   * @return {number | Complex | Array | Matrix} The inverse of `x`.
   */

  var inv = typed('inv', {
    'Array | Matrix': function ArrayMatrix(x) {
      var size = type.isMatrix(x) ? x.size() : util.array.size(x);

      switch (size.length) {
        case 1:
          // vector
          if (size[0] == 1) {
            if (type.isMatrix(x)) {
              return matrix([divideScalar(1, x.valueOf()[0])]);
            } else {
              return [divideScalar(1, x[0])];
            }
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');
          }

        case 2:
          // two dimensional array
          var rows = size[0];
          var cols = size[1];

          if (rows == cols) {
            if (type.isMatrix(x)) {
              return matrix(_inv(x.valueOf(), rows, cols), x.storage());
            } else {
              // return an Array
              return _inv(x, rows, cols);
            }
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + util.string.format(size) + ')');
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + util.string.format(size) + ')');
      }
    },
    'any': function any(x) {
      // scalar
      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
    }
  });
  /**
   * Calculate the inverse of a square matrix
   * @param {Array[]} mat     A square matrix
   * @param {number} rows     Number of rows
   * @param {number} cols     Number of columns, must equal rows
   * @return {Array[]} inv    Inverse matrix
   * @private
   */

  function _inv(mat, rows, cols) {
    var r, s, f, value, temp;

    if (rows == 1) {
      // this is a 1 x 1 matrix
      value = mat[0][0];

      if (value == 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }

      return [[divideScalar(1, value)]];
    } else if (rows == 2) {
      // this is a 2 x 2 matrix
      var d = det(mat);

      if (d == 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }

      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
    } else {
      // this is a matrix of 3 x 3 or larger
      // calculate inverse using gauss-jordan elimination
      //      http://en.wikipedia.org/wiki/Gaussian_elimination
      //      http://mathworld.wolfram.com/MatrixInverse.html
      //      http://math.uww.edu/~mcfarlat/inverse.htm
      // make a copy of the matrix (only the arrays, not of the elements)
      var A = mat.concat();

      for (r = 0; r < rows; r++) {
        A[r] = A[r].concat();
      } // create an identity matrix which in the end will contain the
      // matrix inverse


      var B = eye(rows).valueOf(); // loop over all columns, and perform row reductions

      for (var c = 0; c < cols; c++) {
        // element Acc should be non zero. if not, swap content
        // with one of the lower rows
        r = c;

        while (r < rows && A[r][c] == 0) {
          r++;
        }

        if (r == rows || A[r][c] == 0) {
          // TODO: in case of zero det, just return a matrix wih Infinity values? (like octave)
          throw Error('Cannot calculate inverse, determinant is zero');
        }

        if (r != c) {
          temp = A[c];
          A[c] = A[r];
          A[r] = temp;
          temp = B[c];
          B[c] = B[r];
          B[r] = temp;
        } // eliminate non-zero values on the other rows at column c


        var Ac = A[c],
            Bc = B[c];

        for (r = 0; r < rows; r++) {
          var Ar = A[r],
              Br = B[r];

          if (r != c) {
            // eliminate value at column c and row r
            if (Ar[c] != 0) {
              f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value
              // at column c

              for (s = c; s < cols; s++) {
                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
              }

              for (s = 0; s < cols; s++) {
                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
              }
            }
          } else {
            // normalize value at Acc to 1,
            // divide each value on row r with the value at Acc
            f = Ac[c];

            for (s = c; s < cols; s++) {
              Ar[s] = divideScalar(Ar[s], f);
            }

            for (s = 0; s < cols; s++) {
              Br[s] = divideScalar(Br[s], f);
            }
          }
        }
      }

      return B;
    }
  }

  inv.toTex = {
    1: '\\left(${args[0]}\\right)^{-1}'
  };
  return inv;
}

exports.name = 'inv';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/index":227,"../arithmetic/addScalar":57,"../arithmetic/divideScalar":62,"../arithmetic/multiply":76,"../arithmetic/unaryMinus":86,"../matrix/det":91,"./eye":94}],100:[function(require,module,exports){
'use strict';

var size = require('../../utils/array').size;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var multiplyScalar = load(require('../arithmetic/multiplyScalar'));
  /**
   * Calculates the kronecker product of 2 matrices or vectors.
   *
   * NOTE: If a one dimensional vector / matrix is given, it will be
   * wrapped so its two dimensions.
   * See the examples.
   *
   * Syntax:
   *
   *    math.kron(x, y)
   *
   * Examples:
   *
   *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]]);
   *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
   *
   *    math.kron([1,1], [2,3,4]);
   *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
   *
   * See also:
   *
   *    multiply, dot, cross
   *
   * @param  {Array | Matrix} x     First vector
   * @param  {Array | Matrix} y     Second vector
   * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
   */

  var kron = typed('kron', {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return matrix(_kron(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return matrix(_kron(x.toArray(), y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return matrix(_kron(x, y.toArray()));
    },
    'Array, Array': _kron
  });
  return kron;
  /**
   * Calculate the kronecker product of two matrices / vectors
   * @param {Array} a  First vector
   * @param {Array} b  Second vector
   * @returns {Array} Returns the kronecker product of x and y
   * @private
   */

  function _kron(a, b) {
    // Deal with the dimensions of the matricies.
    if (size(a).length === 1) {
      // Wrap it in a 2D Matrix
      a = [a];
    }

    if (size(b).length === 1) {
      // Wrap it in a 2D Matrix
      b = [b];
    }

    if (size(a).length > 2 || size(b).length > 2) {
      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
    }

    var t = [];
    var r = [];
    return a.map(function (a) {
      return b.map(function (b) {
        return a.map(function (y) {
          return b.map(function (x) {
            return r.push(multiplyScalar(y, x));
          });
        }, t.push(r = []));
      });
    }, t = []) && t;
  }
}

exports.name = 'kron';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212,"../arithmetic/multiplyScalar":77}],101:[function(require,module,exports){
'use strict';

var maxArgumentCount = require('../../utils/function').maxArgumentCount;

function factory(type, config, load, typed) {
  /**
   * Create a new matrix or array with the results of the callback function executed on
   * each entry of the matrix/array.
   *
   * Syntax:
   *
   *    math.map(x, callback)
   *
   * Examples:
   *
   *    math.map([1, 2, 3], function(value) {
   *      return value * value;
   *    });  // returns [1, 4, 9]
   *
   * See also:
   *
   *    filter, forEach, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the matrix being traversed.
   * @return {Matrix | array}     Transformed map of x
   */
  var map = typed('map', {
    'Array, function': _map,
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.map(callback);
    }
  });
  map.toTex = undefined; // use default template

  return map;
}
/**
 * Map for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @return {Array}
 * @private
 */


function _map(array, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);

  var recurse = function recurse(value, index) {
    if (Array.isArray(value)) {
      return value.map(function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        return callback(value);
      } else if (args === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, array);
      }
    }
  };

  return recurse(array, []);
}

exports.name = 'map';
exports.factory = factory;

},{"../../utils/function":226}],102:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

var resize = require('../../utils/array').resize;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Create a matrix filled with ones. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.ones(m)
   *    math.ones(m, format)
   *    math.ones(m, n)
   *    math.ones(m, n, format)
   *    math.ones([m, n])
   *    math.ones([m, n], format)
   *    math.ones([m, n, p, ...])
   *    math.ones([m, n, p, ...], format)
   *
   * Examples:
   *
   *    math.ones(3);                   // returns [1, 1, 1]
   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]
   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
   *
   *    var A = [[1, 2, 3], [4, 5, 6]];
   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]
   *
   * See also:
   *
   *    zeros, eye, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix | number}  A matrix filled with ones
   */

  var ones = typed('ones', {
    '': function _() {
      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
    },
    // math.ones(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function numberBigNumberString(size) {
      var last = size[size.length - 1];

      if (typeof last === 'string') {
        var format = size.pop();
        return _ones(size, format);
      } else if (config.matrix === 'Array') {
        return _ones(size);
      } else {
        return _ones(size, 'default');
      }
    },
    'Array': _ones,
    'Matrix': function Matrix(size) {
      var format = size.storage();
      return _ones(size.valueOf(), format);
    },
    'Array | Matrix, string': function ArrayMatrixString(size, format) {
      return _ones(size.valueOf(), format);
    }
  });
  ones.toTex = undefined; // use default template

  return ones;
  /**
   * Create an Array or Matrix with ones
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _ones(size, format) {
    var hasBigNumbers = _normalize(size);

    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;

    _validate(size);

    if (format) {
      // return a matrix
      var m = matrix(format);

      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }

      return m;
    } else {
      // return an Array
      var arr = [];

      if (size.length > 0) {
        return resize(arr, size, defaultValue);
      }

      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if (type.isBigNumber(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments


  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !isInteger(value) || value < 0) {
        throw new Error('Parameters in function ones must be positive integers');
      }
    });
  }
}

exports.name = 'ones';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/number":229}],103:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory(type, config, load, typed) {
  var asc = load(require('../relational/compare'));

  function desc(a, b) {
    return -asc(a, b);
  }
  /**
   * Partition-based selection of an array or 1D matrix.
   * Will find the kth smallest value, and mutates the input array.
   * Uses Quickselect.
   *
   * Syntax:
   *
   *    math.partitionSelect(x, k)
   *    math.partitionSelect(x, k, compare)
   *
   * Examples:
   *
   *    math.partitionSelect([5, 10, 1], 2);           // returns 10
   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length;
   *    }
   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'
   *
   * See also:
   *
   *    sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Number} k            The kth smallest value to be retrieved; zero-based index
   * @param {Function | 'asc' | 'desc'} [compare='asc']
   *        An optional comparator function. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {*} Returns the kth lowest value.
   */


  return typed('partitionSelect', {
    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
      return _partitionSelect(x, k, asc);
    },
    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {
      if (compare === 'asc') {
        return _partitionSelect(x, k, asc);
      } else if (compare === 'desc') {
        return _partitionSelect(x, k, desc);
      } else {
        throw new Error('Compare string must be "asc" or "desc"');
      }
    },
    'Array | Matrix, number, function': _partitionSelect
  });

  function _partitionSelect(x, k, compare) {
    if (!isInteger(k) || k < 0) {
      throw new Error('k must be a non-negative integer');
    }

    if (type.isMatrix(x)) {
      var size = x.size();

      if (size.length > 1) {
        throw new Error('Only one dimensional matrices supported');
      }

      return quickSelect(x.valueOf(), k, compare);
    }

    if (Array.isArray(x)) {
      return quickSelect(x, k, compare);
    }
  }
  /**
   * Quickselect algorithm.
   * Code adapted from:
   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
   *
   * @param {Array} arr
   * @param {Number} k
   * @param {Function} compare
   * @private
   */


  function quickSelect(arr, k, compare) {
    if (k >= arr.length) {
      throw new Error('k out of bounds');
    }

    var from = 0;
    var to = arr.length - 1; // if from == to we reached the kth element

    while (from < to) {
      var r = from;
      var w = to;
      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets

      while (r < w) {
        // arr[r] >= pivot
        if (compare(arr[r], pivot) >= 0) {
          // put the large values at the end
          var tmp = arr[w];
          arr[w] = arr[r];
          arr[r] = tmp;
          --w;
        } else {
          // the value is smaller than the pivot, skip
          ++r;
        }
      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)


      if (compare(arr[r], pivot) > 0) {
        --r;
      } // the r pointer is on the end of the first k elements


      if (k <= r) {
        to = r;
      } else {
        from = r + 1;
      }
    }

    return arr[k];
  }
}

exports.name = 'partitionSelect';
exports.factory = factory;

},{"../../utils/number":229,"../relational/compare":126}],104:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var ZERO = new type.BigNumber(0);
  var ONE = new type.BigNumber(1);
  /**
   * Create an array from a range.
   * By default, the range end is excluded. This can be customized by providing
   * an extra parameter `includeEnd`.
   *
   * Syntax:
   *
   *     math.range(str [, includeEnd])               // Create a range from a string,
   *                                                  // where the string contains the
   *                                                  // start, optional step, and end,
   *                                                  // separated by a colon.
   *     math.range(start, end [, includeEnd])        // Create a range with start and
   *                                                  // end and a step size of 1.
   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
   *                                                  // and end.
   *
   * Where:
   *
   * - `str: string`
   *   A string 'start:end' or 'start:step:end'
   * - `start: {number | BigNumber}`
   *   Start of the range
   * - `end: number | BigNumber`
   *   End of the range, excluded by default, included when parameter includeEnd=true
   * - `step: number | BigNumber`
   *   Step size. Default value is 1.
   * - `includeEnd: boolean`
   *   Option to specify whether to include the end or not. False by default.
   *
   * Examples:
   *
   *     math.range(2, 6);        // [2, 3, 4, 5]
   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]
   *     math.range('2:1:6');     // [2, 3, 4, 5]
   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]
   *
   * See also:
   *
   *     ones, zeros, size, subset
   *
   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
   * @return {Array | Matrix} range
   */

  var range = typed('range', {
    // TODO: simplify signatures when typed-function supports default values and optional arguments
    // TODO: a number or boolean should not be converted to string here
    'string': _strRange,
    'string, boolean': _strRange,
    'number, number': function numberNumber(start, end) {
      return _out(_rangeEx(start, end, 1));
    },
    'number, number, number': function numberNumberNumber(start, end, step) {
      return _out(_rangeEx(start, end, step));
    },
    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
    },
    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
      return _out(_bigRangeEx(start, end, ONE));
    },
    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
      return _out(_bigRangeEx(start, end, step));
    },
    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
      return includeEnd ? _out(_bigRangeInc(start, end, ONE)) : _out(_bigRangeEx(start, end, ONE));
    },
    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
    }
  });
  range.toTex = undefined; // use default template

  return range;

  function _out(arr) {
    return config.matrix === 'Array' ? arr : matrix(arr);
  }

  function _strRange(str, includeEnd) {
    var r = _parse(str);

    if (!r) {
      throw new SyntaxError('String "' + str + '" is no valid range');
    }

    var fn;

    if (config.number === 'BigNumber') {
      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
      return _out(fn(new type.BigNumber(r.start), new type.BigNumber(r.end), new type.BigNumber(r.step)));
    } else {
      fn = includeEnd ? _rangeInc : _rangeEx;
      return _out(fn(r.start, r.end, r.step));
    }
  }
  /**
   * Create a range with numbers. End is excluded
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */


  function _rangeEx(start, end, step) {
    var array = [],
        x = start;

    if (step > 0) {
      while (x < end) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (x > end) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }
  /**
   * Create a range with numbers. End is included
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */


  function _rangeInc(start, end, step) {
    var array = [],
        x = start;

    if (step > 0) {
      while (x <= end) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (x >= end) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }
  /**
   * Create a range with big numbers. End is excluded
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */


  function _bigRangeEx(start, end, step) {
    var array = [],
        x = start;

    if (step.gt(ZERO)) {
      while (x.lt(end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(ZERO)) {
      while (x.gt(end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }
  /**
   * Create a range with big numbers. End is included
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */


  function _bigRangeInc(start, end, step) {
    var array = [],
        x = start;

    if (step.gt(ZERO)) {
      while (x.lte(end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(ZERO)) {
      while (x.gte(end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @param {string} str
   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
   * @private
   */


  function _parse(str) {
    var args = str.split(':'); // number

    var nums = args.map(function (arg) {
      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
      return Number(arg);
    });
    var invalid = nums.some(function (num) {
      return isNaN(num);
    });

    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return {
          start: nums[0],
          end: nums[1],
          step: 1
        };

      case 3:
        return {
          start: nums[0],
          end: nums[2],
          step: nums[1]
        };

      default:
        return null;
    }
  }
}

exports.name = 'range';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195}],105:[function(require,module,exports){
'use strict';

var DimensionError = require('../../error/DimensionError');

var isInteger = require('../../utils/number').isInteger;

var array = require('../../utils/array');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Reshape a multi dimensional array to fit the specified dimensions
   *
   * Syntax:
   *
   *     math.reshape(x, sizes)
   *
   * Examples:
   *
   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3]);
   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
   *
   *     math.reshape([[1, 2], [3, 4]], [1, 4]);
   *     // returns Array  [[1, 2, 3, 4]]
   *
   *     math.reshape([[1, 2], [3, 4]], [4]);
   *     // returns Array [1, 2, 3, 4]
   *
   *     var x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8]);
   *     math.reshape(x, [2, 2, 2]);
   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
   *
   * See also:
   *
   *     size, squeeze, resize
   *
   * @param {Array | Matrix | *} x  Matrix to be reshaped
   * @param {number[]} sizes        One dimensional array with integral sizes for
   *                                each dimension
   *
   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
   *
   * @throws {TypeError}            If `sizes` does not contain solely integers
   * @throws {DimensionError}       If the product of the new dimension sizes does
   *                                not equal that of the old ones
   */

  var reshape = typed('reshape', {
    'Matrix, Array': function MatrixArray(x, sizes) {
      if (x.reshape) {
        return x.reshape(sizes);
      } else {
        return matrix(array.reshape(x.valueOf(), sizes));
      }
    },
    'Array, Array': function ArrayArray(x, sizes) {
      sizes.forEach(function (size) {
        if (!isInteger(size)) {
          throw new TypeError('Invalid size for dimension: ' + size);
        }
      });
      return array.reshape(x, sizes);
    }
  });
  reshape.toTex = undefined; // use default template

  return reshape;
}

exports.name = 'reshape';
exports.factory = factory;

},{"../../error/DimensionError":53,"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/number":229}],106:[function(require,module,exports){
'use strict';

var DimensionError = require('../../error/DimensionError');

var ArgumentsError = require('../../error/ArgumentsError');

var isInteger = require('../../utils/number').isInteger;

var format = require('../../utils/string').format;

var clone = require('../../utils/object').clone;

var array = require('../../utils/array');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Resize a matrix
   *
   * Syntax:
   *
   *     math.resize(x, size)
   *     math.resize(x, size, defaultValue)
   *
   * Examples:
   *
   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]
   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]
   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]
   *     math.resize("hello", [8], "!");    // returns string 'hello!!!'
   *
   * See also:
   *
   *     size, squeeze, subset, reshape
   *
   * @param {Array | Matrix | *} x             Matrix to be resized
   * @param {Array | Matrix} size              One dimensional array with numbers
   * @param {number | string} [defaultValue=0] Zero by default, except in
   *                                           case of a string, in that case
   *                                           defaultValue = ' '
   * @return {* | Array | Matrix} A resized clone of matrix `x`
   */
  // TODO: rework resize to a typed-function

  var resize = function resize(x, size, defaultValue) {
    if (arguments.length != 2 && arguments.length != 3) {
      throw new ArgumentsError('resize', arguments.length, 2, 3);
    }

    if (type.isMatrix(size)) {
      size = size.valueOf(); // get Array
    }

    if (type.isBigNumber(size[0])) {
      // convert bignumbers to numbers
      size = size.map(function (value) {
        return type.isBigNumber(value) ? value.toNumber() : value;
      });
    } // check x is a Matrix


    if (type.isMatrix(x)) {
      // use optimized matrix implementation, return copy
      return x.resize(size, defaultValue, true);
    }

    if (typeof x === 'string') {
      // resize string
      return _resizeString(x, size, defaultValue);
    } // check result should be a matrix


    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';

    if (size.length == 0) {
      // output a scalar
      while (Array.isArray(x)) {
        x = x[0];
      }

      return clone(x);
    } else {
      // output an array/matrix
      if (!Array.isArray(x)) {
        x = [x];
      }

      x = clone(x);
      var res = array.resize(x, size, defaultValue);
      return asMatrix ? matrix(res) : res;
    }
  };

  resize.toTex = undefined; // use default template

  return resize;
  /**
   * Resize a string
   * @param {string} str
   * @param {number[]} size
   * @param {string} [defaultChar=' ']
   * @private
   */

  function _resizeString(str, size, defaultChar) {
    if (defaultChar !== undefined) {
      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
        throw new TypeError('Single character expected as defaultValue');
      }
    } else {
      defaultChar = ' ';
    }

    if (size.length !== 1) {
      throw new DimensionError(size.length, 1);
    }

    var len = size[0];

    if (typeof len !== 'number' || !isInteger(len)) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');
    }

    if (str.length > len) {
      return str.substring(0, len);
    } else if (str.length < len) {
      var res = str;

      for (var i = 0, ii = len - str.length; i < ii; i++) {
        res += defaultChar;
      }

      return res;
    } else {
      return str;
    }
  }
}

exports.name = 'resize';
exports.factory = factory;

},{"../../error/ArgumentsError":52,"../../error/DimensionError":53,"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/number":229,"../../utils/object":230,"../../utils/string":231}],107:[function(require,module,exports){
'use strict';

var array = require('../../utils/array');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Calculate the size of a matrix or scalar.
   *
   * Syntax:
   *
   *     math.size(x)
   *
   * Examples:
   *
   *     math.size(2.3);                  // returns []
   *     math.size('hello world');        // returns [11]
   *
   *     var A = [[1, 2, 3], [4, 5, 6]];
   *     math.size(A);                    // returns [2, 3]
   *     math.size(math.range(1,6));      // returns [5]
   *
   * See also:
   *
   *     resize, squeeze, subset
   *
   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
   * @return {Array | Matrix} A vector with size of `x`.
   */

  var size = typed('size', {
    'Matrix': function Matrix(x) {
      // TODO: return the same matrix type as the input
      return matrix(x.size());
    },
    'Array': array.size,
    'string': function string(x) {
      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
    },
    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
      // scalar
      return config.matrix === 'Array' ? [] : matrix([]);
    }
  });
  size.toTex = undefined; // use default template

  return size;
}

exports.name = 'size';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212}],108:[function(require,module,exports){
'use strict';

var size = require('../../utils/array').size;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var compareAsc = load(require('../relational/compare'));

  var compareDesc = function compareDesc(a, b) {
    return -compareAsc(a, b);
  };

  var compareNatural = load(require('../relational/compareNatural'));
  /**
   * Sort the items in a matrix.
   *
   * Syntax:
   *
   *    math.sort(x)
   *    math.sort(x, compare)
   *
   * Examples:
   *
   *    math.sort([5, 10, 1]); // returns [1, 5, 10]
   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length;
   *    }
   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']
   *
   * See also:
   *
   *    filter, forEach, map, compare, compareNatural
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
   *        An optional _comparator function or name. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {Matrix | Array} Returns the sorted matrix.
   */

  var sort = typed('sort', {
    'Array': function Array(x) {
      _arrayIsVector(x);

      return x.sort(compareAsc);
    },
    'Matrix': function Matrix(x) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(compareAsc), x.storage());
    },
    'Array, function': function ArrayFunction(x, _comparator) {
      _arrayIsVector(x);

      return x.sort(_comparator);
    },
    'Matrix, function': function MatrixFunction(x, _comparator) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(_comparator), x.storage());
    },
    'Array, string': function ArrayString(x, order) {
      _arrayIsVector(x);

      return x.sort(_comparator(order));
    },
    'Matrix, string': function MatrixString(x, order) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(_comparator(order)), x.storage());
    }
  });
  sort.toTex = undefined; // use default template

  /**
   * Get the comparator for given order ('asc', 'desc', 'natural')
   * @param {'asc' | 'desc' | 'natural'} order
   * @return {Function} Returns a _comparator function
   */

  function _comparator(order) {
    if (order === 'asc') {
      return compareAsc;
    } else if (order === 'desc') {
      return compareDesc;
    } else if (order === 'natural') {
      return compareNatural;
    } else {
      throw new Error('String "asc", "desc", or "natural" expected');
    }
  }
  /**
   * Validate whether an array is one dimensional
   * Throws an error when this is not the case
   * @param {Array} array
   * @private
   */


  function _arrayIsVector(array) {
    if (size(array).length !== 1) {
      throw new Error('One dimensional array expected');
    }
  }
  /**
   * Validate whether a matrix is one dimensional
   * Throws an error when this is not the case
   * @param {Matrix} matrix
   * @private
   */


  function _matrixIsVector(matrix) {
    if (matrix.size().length !== 1) {
      throw new Error('One dimensional matrix expected');
    }
  }

  return sort;
}

exports.name = 'sort';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212,"../relational/compare":126,"../relational/compareNatural":127}],109:[function(require,module,exports){
'use strict';

var object = require('../../utils/object');

var array = require('../../utils/array');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
   *
   * Syntax:
   *
   *     math.squeeze(x)
   *
   * Examples:
   *
   *     math.squeeze([3]);           // returns 3
   *     math.squeeze([[3]]);         // returns 3
   *
   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)
   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)
   *
   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)
   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)
   *
   *     // only inner and outer dimensions are removed
   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *
   * See also:
   *
   *     subset
   *
   * @param {Matrix | Array} x      Matrix to be squeezed
   * @return {Matrix | Array} Squeezed matrix
   */

  var squeeze = typed('squeeze', {
    'Array': function Array(x) {
      return array.squeeze(object.clone(x));
    },
    'Matrix': function Matrix(x) {
      var res = array.squeeze(x.toArray()); // FIXME: return the same type of matrix as the input

      return Array.isArray(res) ? matrix(res) : res;
    },
    'any': function any(x) {
      // scalar
      return object.clone(x);
    }
  });
  squeeze.toTex = undefined; // use default template

  return squeeze;
}

exports.name = 'squeeze';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/object":230}],110:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;

var validateIndex = require('../../utils/array').validateIndex;

var getSafeProperty = require('../../utils/customs').getSafeProperty;

var setSafeProperty = require('../../utils/customs').setSafeProperty;

var DimensionError = require('../../error/DimensionError');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Get or set a subset of a matrix or string.
   *
   * Syntax:
   *     math.subset(value, index)                                // retrieve a subset
   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
   *
   * Examples:
   *
   *     // get a subset
   *     var d = [[1, 2], [3, 4]];
   *     math.subset(d, math.index(1, 0));        // returns 3
   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]
   *
   *     // replace a subset
   *     var e = [];
   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]
   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]
   *
   * See also:
   *
   *     size, resize, squeeze, index
   *
   * @param {Array | Matrix | string} matrix  An array, matrix, or string
   * @param {Index} index                     An index containing ranges for each
   *                                          dimension
   * @param {*} [replacement]                 An array, matrix, or scalar.
   *                                          If provided, the subset is replaced with replacement.
   *                                          If not provided, the subset is returned
   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
   *                                          the matrix is resized. If not provided,
   *                                          math.matrix elements will be left undefined.
   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
   */

  var subset = typed('subset', {
    // get subset
    'Array, Index': function ArrayIndex(value, index) {
      var m = matrix(value);
      var subset = m.subset(index); // returns a Matrix

      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
    },
    'Matrix, Index': function MatrixIndex(value, index) {
      return value.subset(index);
    },
    'Object, Index': _getObjectProperty,
    'string, Index': _getSubstring,
    // set subset
    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();
    },
    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();
    },
    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
      return value.clone().subset(index, replacement);
    },
    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
      return value.clone().subset(index, replacement, defaultValue);
    },
    'string, Index, string': _setSubstring,
    'string, Index, string, string': _setSubstring,
    'Object, Index, any': _setObjectProperty
  });
  subset.toTex = undefined; // use default template

  return subset;
  /**
   * Retrieve a subset of a string
   * @param {string} str            string from which to get a substring
   * @param {Index} index           An index containing ranges for each dimension
   * @returns {string} substring
   * @private
   */

  function _getSubstring(str, index) {
    if (!type.isIndex(index)) {
      // TODO: better error message
      throw new TypeError('Index expected');
    }

    if (index.size().length != 1) {
      throw new DimensionError(index.size().length, 1);
    } // validate whether the range is out of range


    var strLen = str.length;
    validateIndex(index.min()[0], strLen);
    validateIndex(index.max()[0], strLen);
    var range = index.dimension(0);
    var substr = '';
    range.forEach(function (v) {
      substr += str.charAt(v);
    });
    return substr;
  }
  /**
   * Replace a substring in a string
   * @param {string} str            string to be replaced
   * @param {Index} index           An index containing ranges for each dimension
   * @param {string} replacement    Replacement string
   * @param {string} [defaultValue] Default value to be uses when resizing
   *                                the string. is ' ' by default
   * @returns {string} result
   * @private
   */


  function _setSubstring(str, index, replacement, defaultValue) {
    if (!index || index.isIndex !== true) {
      // TODO: better error message
      throw new TypeError('Index expected');
    }

    if (index.size().length != 1) {
      throw new DimensionError(index.size().length, 1);
    }

    if (defaultValue !== undefined) {
      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
        throw new TypeError('Single character expected as defaultValue');
      }
    } else {
      defaultValue = ' ';
    }

    var range = index.dimension(0);
    var len = range.size()[0];

    if (len != replacement.length) {
      throw new DimensionError(range.size()[0], replacement.length);
    } // validate whether the range is out of range


    var strLen = str.length;
    validateIndex(index.min()[0]);
    validateIndex(index.max()[0]); // copy the string into an array with characters

    var chars = [];

    for (var i = 0; i < strLen; i++) {
      chars[i] = str.charAt(i);
    }

    range.forEach(function (v, i) {
      chars[v] = replacement.charAt(i[0]);
    }); // initialize undefined characters with a space

    if (chars.length > strLen) {
      for (i = strLen - 1, len = chars.length; i < len; i++) {
        if (!chars[i]) {
          chars[i] = defaultValue;
        }
      }
    }

    return chars.join('');
  }
}
/**
 * Retrieve a property from an object
 * @param {Object} object
 * @param {Index} index
 * @return {*} Returns the value of the property
 * @private
 */


function _getObjectProperty(object, index) {
  if (index.size().length !== 1) {
    throw new DimensionError(index.size(), 1);
  }

  var key = index.dimension(0);

  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  }

  return getSafeProperty(object, key);
}
/**
 * Set a property on an object
 * @param {Object} object
 * @param {Index} index
 * @param {*} replacement
 * @return {*} Returns the updated object
 * @private
 */


function _setObjectProperty(object, index, replacement) {
  if (index.size().length !== 1) {
    throw new DimensionError(index.size(), 1);
  }

  var key = index.dimension(0);

  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  } // clone the object, and apply the property to the clone


  var updated = clone(object);
  setSafeProperty(updated, key, replacement);
  return updated;
}

exports.name = 'subset';
exports.factory = factory;

},{"../../error/DimensionError":53,"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/customs":224,"../../utils/object":230}],111:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;

var format = require('../../utils/string').format;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var add = load(require('../arithmetic/add'));
  /**
   * Calculate the trace of a matrix: the sum of the elements on the main
   * diagonal of a square matrix.
   *
   * Syntax:
   *
   *    math.trace(x)
   *
   * Examples:
   *
   *    math.trace([[1, 2], [3, 4]]); // returns 5
   *
   *    var A = [
   *      [1, 2, 3],
   *      [-1, 2, 3],
   *      [2, 0, 3]
   *    ]
   *    math.trace(A); // returns 6
   *
   * See also:
   *
   *    diag
   *
   * @param {Array | Matrix} x  A matrix
   *
   * @return {number} The trace of `x`
   */

  var trace = typed('trace', {
    'Array': function Array(x) {
      // use dense matrix implementation
      return trace(matrix(x));
    },
    'Matrix': function Matrix(x) {
      // result
      var c; // process storage format

      switch (x.storage()) {
        case 'dense':
          c = _denseTrace(x);
          break;

        case 'sparse':
          c = _sparseTrace(x);
          break;
      }

      return c;
    },
    'any': clone
  });

  var _denseTrace = function _denseTrace(m) {
    // matrix size & data
    var size = m._size;
    var data = m._data; // process dimensions

    switch (size.length) {
      case 1:
        // vector
        if (size[0] == 1) {
          // return data[0]
          return clone(data[0]);
        }

        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');

      case 2:
        // two dimensional
        var rows = size[0];
        var cols = size[1];

        if (rows === cols) {
          // calulate sum
          var sum = 0; // loop diagonal

          for (var i = 0; i < rows; i++) {
            sum = add(sum, data[i][i]);
          } // return trace


          return sum;
        }

        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');

      default:
        // multi dimensional
        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');
    }
  };

  var _sparseTrace = function _sparseTrace(m) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    var size = m._size; // check dimensions

    var rows = size[0];
    var columns = size[1]; // matrix must be square

    if (rows === columns) {
      // calulate sum
      var sum = 0; // check we have data (avoid looping columns)

      if (values.length > 0) {
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // loop k within [k0, k1[

          for (var k = k0; k < k1; k++) {
            // row index
            var i = index[k]; // check row

            if (i === j) {
              // accumulate value
              sum = add(sum, values[k]); // exit loop

              break;
            }

            if (i > j) {
              // exit loop, no value on the diagonal for column j
              break;
            }
          }
        }
      } // return trace


      return sum;
    }

    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
  };

  trace.toTex = {
    1: '\\mathrm{tr}\\left(${args[0]}\\right)'
  };
  return trace;
}

exports.name = 'trace';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/object":230,"../../utils/string":231,"../arithmetic/add":56}],112:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;

var format = require('../../utils/string').format;

function factory(type, config, load, typed) {
  var latex = require('../../utils/latex');

  var matrix = load(require('../../type/matrix/function/matrix'));
  var DenseMatrix = type.DenseMatrix,
      SparseMatrix = type.SparseMatrix;
  /**
   * Transpose a matrix. All values of the matrix are reflected over its
   * main diagonal. Only applicable to two dimensional matrices containing
   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
   * vectors and scalars return the input unchanged.
   *
   * Syntax:
   *
   *     math.transpose(x)
   *
   * Examples:
   *
   *     var A = [[1, 2, 3], [4, 5, 6]];
   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]
   *
   * See also:
   *
   *     diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be transposed
   * @return {Array | Matrix}   The transposed matrix
   */

  var transpose = typed('transpose', {
    'Array': function Array(x) {
      // use dense matrix implementation
      return transpose(matrix(x)).valueOf();
    },
    'Matrix': function Matrix(x) {
      // matrix size
      var size = x.size(); // result

      var c; // process dimensions

      switch (size.length) {
        case 1:
          // vector
          c = x.clone();
          break;

        case 2:
          // rows and columns
          var rows = size[0];
          var columns = size[1]; // check columns

          if (columns === 0) {
            // throw exception
            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');
          } // process storage format


          switch (x.storage()) {
            case 'dense':
              c = _denseTranspose(x, rows, columns);
              break;

            case 'sparse':
              c = _sparseTranspose(x, rows, columns);
              break;
          }

          break;

        default:
          // multi dimensional
          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');
      }

      return c;
    },
    // scalars
    'any': function any(x) {
      return clone(x);
    }
  });

  var _denseTranspose = function _denseTranspose(m, rows, columns) {
    // matrix array
    var data = m._data; // transposed matrix data

    var transposed = [];
    var transposedRow; // loop columns

    for (var j = 0; j < columns; j++) {
      // initialize row
      transposedRow = transposed[j] = []; // loop rows

      for (var i = 0; i < rows; i++) {
        // set data
        transposedRow[i] = clone(data[i][j]);
      }
    } // return matrix


    return new DenseMatrix({
      data: transposed,
      size: [columns, rows],
      datatype: m._datatype
    });
  };

  var _sparseTranspose = function _sparseTranspose(m, rows, columns) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result matrices

    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = []; // row counts

    var w = [];

    for (var x = 0; x < rows; x++) {
      w[x] = 0;
    } // vars


    var p, l, j; // loop values in matrix

    for (p = 0, l = index.length; p < l; p++) {
      // number of values in row
      w[index[p]]++;
    } // cumulative sum


    var sum = 0; // initialize cptr with the cummulative sum of row counts

    for (var i = 0; i < rows; i++) {
      // update cptr
      cptr.push(sum); // update sum

      sum += w[i]; // update w

      w[i] = cptr[i];
    } // update cptr


    cptr.push(sum); // loop columns

    for (j = 0; j < columns; j++) {
      // values & index in column
      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
        // C values & index
        var q = w[index[k]]++; // C[j, i] = A[i, j]

        cindex[q] = j; // check we need to process values (pattern matrix)

        if (values) cvalues[q] = clone(values[k]);
      }
    } // return matrix


    return new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [columns, rows],
      datatype: m._datatype
    });
  };

  transpose.toTex = {
    1: '\\left(${args[0]}\\right)' + latex.operators['transpose']
  };
  return transpose;
}

exports.name = 'transpose';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/latex":228,"../../utils/object":230,"../../utils/string":231}],113:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

var resize = require('../../utils/array').resize;

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  /**
   * Create a matrix filled with zeros. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.zeros(m)
   *    math.zeros(m, format)
   *    math.zeros(m, n)
   *    math.zeros(m, n, format)
   *    math.zeros([m, n])
   *    math.zeros([m, n], format)
   *
   * Examples:
   *
   *    math.zeros(3);                  // returns [0, 0, 0]
   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]
   *    math.zeros(3, 'dense');         // returns [0, 0, 0]
   *
   *    var A = [[1, 2, 3], [4, 5, 6]];
   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]
   *
   * See also:
   *
   *    ones, eye, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix}           A matrix filled with zeros
   */

  var zeros = typed('zeros', {
    '': function _() {
      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
    },
    // math.zeros(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function numberBigNumberString(size) {
      var last = size[size.length - 1];

      if (typeof last === 'string') {
        var format = size.pop();
        return _zeros(size, format);
      } else if (config.matrix === 'Array') {
        return _zeros(size);
      } else {
        return _zeros(size, 'default');
      }
    },
    'Array': _zeros,
    'Matrix': function Matrix(size) {
      var format = size.storage();
      return _zeros(size.valueOf(), format);
    },
    'Array | Matrix, string': function ArrayMatrixString(size, format) {
      return _zeros(size.valueOf(), format);
    }
  });
  zeros.toTex = undefined; // use default template

  return zeros;
  /**
   * Create an Array or Matrix with zeros
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _zeros(size, format) {
    var hasBigNumbers = _normalize(size);

    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;

    _validate(size);

    if (format) {
      // return a matrix
      var m = matrix(format);

      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }

      return m;
    } else {
      // return an Array
      var arr = [];

      if (size.length > 0) {
        return resize(arr, size, defaultValue);
      }

      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if (type.isBigNumber(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments


  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !isInteger(value) || value < 0) {
        throw new Error('Parameters in function zeros must be positive integers');
      }
    });
  }
} // TODO: zeros contains almost the same code as ones. Reuse this?


exports.name = 'zeros';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/number":229}],114:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory(type, config, load, typed) {
  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities.
   *
   * Combinations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.combinations(n, k)
   *
   * Examples:
   *
   *    math.combinations(7, 5); // returns 21
   *
   * See also:
   *
   *    permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations.
   */
  var combinations = typed('combinations', {
    'number, number': function numberNumber(n, k) {
      var max, result, i;

      if (!isInteger(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (!isInteger(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (k > n) {
        throw new TypeError('k must be less than or equal to n');
      }

      max = Math.max(k, n - k);
      result = 1;

      for (i = 1; i <= n - max; i++) {
        result = result * (max + i) / i;
      }

      return result;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var max, result, i, ii;
      var one = new type.BigNumber(1);

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (k.gt(n)) {
        throw new TypeError('k must be less than n in function combinations');
      }

      max = n.minus(k);
      if (k.lt(max)) max = k;
      result = one;

      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
        result = result.times(max.plus(i)).dividedBy(i);
      }

      return result;
    } // TODO: implement support for collection in combinations

  });
  combinations.toTex = {
    2: '\\binom{${args[0]}}{${args[1]}}'
  };
  return combinations;
}
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */


function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

exports.name = 'combinations';
exports.factory = factory;

},{"../../utils/number":229}],115:[function(require,module,exports){
'use strict';

var ArgumentsError = require('../../error/ArgumentsError');

var isCollection = require('../../utils/collection/isCollection');

var isNumber = require('../../utils/number').isNumber; // TODO: rethink math.distribution
// TODO: rework to a typed function


function factory(type, config, load, typed, math) {
  var matrix = load(require('../../type/matrix/function/matrix'));

  var array = require('../../utils/array'); // seeded pseudo random number generator


  var rng = load(require('./seededRNG'));
  /**
   * Create a distribution object with a set of random functions for given
   * random distribution.
   *
   * Syntax:
   *
   *     math.distribution(name)
   *
   * Examples:
   *
   *     var normalDist = math.distribution('normal'); // create a normal distribution
   *     normalDist.random(0, 10);                     // get a random value between 0 and 10
   *
   * See also:
   *
   *     random, randomInt, pickRandom
   *
   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.
   * @return {Object}       Returns a distribution object containing functions:
   *                        `random([size] [, min] [, max])`,
   *                        `randomInt([min] [, max])`,
   *                        `pickRandom(array)`
   */

  function distribution(name) {
    if (!distributions.hasOwnProperty(name)) throw new Error('Unknown distribution ' + name);
    var args = Array.prototype.slice.call(arguments, 1),
        distribution = distributions[name].apply(this, args);
    return function (distribution) {
      // This is the public API for all distributions
      var randFunctions = {
        random: function random(arg1, arg2, arg3) {
          var size, min, max;

          if (arguments.length > 3) {
            throw new ArgumentsError('random', arguments.length, 0, 3);
          } else if (arguments.length === 1) {
            // `random(max)` or `random(size)`
            if (isCollection(arg1)) {
              size = arg1;
            } else {
              max = arg1;
            }
          } else if (arguments.length === 2) {
            // `random(min, max)` or `random(size, max)`
            if (isCollection(arg1)) {
              size = arg1;
              max = arg2;
            } else {
              min = arg1;
              max = arg2;
            }
          } else {
            // `random(size, min, max)`
            size = arg1;
            min = arg2;
            max = arg3;
          } // TODO: validate type of size


          if (min !== undefined && !isNumber(min) || max !== undefined && !isNumber(max)) {
            throw new TypeError('Invalid argument in function random');
          }

          if (max === undefined) max = 1;
          if (min === undefined) min = 0;

          if (size !== undefined) {
            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);

            return type.isMatrix(size) ? matrix(res) : res;
          }

          return _random(min, max);
        },
        randomInt: typed({
          'number | Array': function numberArray(arg) {
            var min = 0;

            if (isCollection(arg)) {
              var size = arg;
              var max = 1;

              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);

              return type.isMatrix(size) ? matrix(res) : res;
            } else {
              var max = arg;
              return _randomInt(min, max);
            }
          },
          'number | Array, number': function numberArrayNumber(arg1, arg2) {
            if (isCollection(arg1)) {
              var size = arg1;
              var max = arg2;
              var min = 0;

              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);

              return type.isMatrix(size) ? matrix(res) : res;
            } else {
              var min = arg1;
              var max = arg2;
              return _randomInt(min, max);
            }
          },
          'Array, number, number': function ArrayNumberNumber(size, min, max) {
            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);

            return size && size.isMatrix === true ? matrix(res) : res;
          }
        }),
        pickRandom: typed({
          'Array': function Array(possibles) {
            return _pickRandom(possibles);
          },
          'Array, number | Array': function ArrayNumberArray(possibles, arg2) {
            var number, weights;

            if (Array.isArray(arg2)) {
              weights = arg2;
            } else if (isNumber(arg2)) {
              number = arg2;
            } else {
              throw new TypeError('Invalid argument in function pickRandom');
            }

            return _pickRandom(possibles, number, weights);
          },
          'Array, number | Array, Array | number': function ArrayNumberArrayArrayNumber(possibles, arg2, arg3) {
            var number, weights;

            if (Array.isArray(arg2)) {
              weights = arg2;
              number = arg3;
            } else {
              weights = arg3;
              number = arg2;
            }

            if (!Array.isArray(weights) || !isNumber(number)) {
              throw new TypeError('Invalid argument in function pickRandom');
            }

            return _pickRandom(possibles, number, weights);
          }
        })
      };

      var _pickRandom = function _pickRandom(possibles, number, weights) {
        var single = typeof number === 'undefined';

        if (single) {
          number = 1;
        }

        if (type.isMatrix(possibles)) {
          possibles = possibles.valueOf(); // get Array
        } else if (!Array.isArray(possibles)) {
          throw new TypeError('Unsupported type of value in function pickRandom');
        }

        if (array.size(possibles).length > 1) {
          throw new Error('Only one dimensional vectors supported');
        }

        if (typeof weights !== 'undefined') {
          if (weights.length != possibles.length) {
            throw new Error('Weights must have the same length as possibles');
          }

          var totalWeights = 0;

          for (var i = 0, len = weights.length; i < len; i++) {
            if (!isNumber(weights[i]) || weights[i] < 0) {
              throw new Error('Weights must be an array of positive numbers');
            }

            totalWeights += weights[i];
          }
        }

        var length = possibles.length;

        if (length == 0) {
          return [];
        } else if (number >= length) {
          return number > 1 ? possibles : possibles[0];
        }

        var result = [];
        var pick;

        while (result.length < number) {
          if (typeof weights === 'undefined') {
            pick = possibles[Math.floor(rng() * length)];
          } else {
            var randKey = rng() * totalWeights;

            for (var i = 0, len = possibles.length; i < len; i++) {
              randKey -= weights[i];

              if (randKey < 0) {
                pick = possibles[i];
                break;
              }
            }
          }

          if (result.indexOf(pick) == -1) {
            result.push(pick);
          }
        }

        return single ? result[0] : result; // TODO: add support for multi dimensional matrices
      };

      var _random = function _random(min, max) {
        return min + distribution() * (max - min);
      };

      var _randomInt = function _randomInt(min, max) {
        return Math.floor(min + distribution() * (max - min));
      }; // This is a function for generating a random matrix recursively.


      var _randomDataForMatrix = function _randomDataForMatrix(size, min, max, randFunc) {
        var data = [],
            length,
            i;
        size = size.slice(0);

        if (size.length > 1) {
          for (var i = 0, length = size.shift(); i < length; i++) {
            data.push(_randomDataForMatrix(size, min, max, randFunc));
          }
        } else {
          for (var i = 0, length = size.shift(); i < length; i++) {
            data.push(randFunc(min, max));
          }
        }

        return data;
      };

      return randFunctions;
    }(distribution);
  } // Each distribution is a function that takes no argument and when called returns
  // a number between 0 and 1.


  var distributions = {
    uniform: function uniform() {
      return rng;
    },
    // Implementation of normal distribution using Box-Muller transform
    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
    // We take : mean = 0.5, standard deviation = 1/6
    // so that 99.7% values are in [0, 1].
    normal: function normal() {
      return function () {
        var u1,
            u2,
            picked = -1; // We reject values outside of the interval [0, 1]
        // TODO: check if it is ok to do that?

        while (picked < 0 || picked > 1) {
          u1 = rng();
          u2 = rng();
          picked = 1 / 6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
        }

        return picked;
      };
    }
  };
  distribution.toTex = undefined; // use default template

  return distribution;
}

exports.name = 'distribution';
exports.factory = factory;

},{"../../error/ArgumentsError":52,"../../type/matrix/function/matrix":195,"../../utils/array":212,"../../utils/collection/isCollection":220,"../../utils/number":229,"./seededRNG":125}],116:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  var gamma = load(require('./gamma'));

  var latex = require('../../utils/latex');
  /**
   * Compute the factorial of a value
   *
   * Factorial only supports an integer value as argument.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.factorial(n)
   *
   * Examples:
   *
   *    math.factorial(5);    // returns 120
   *    math.factorial(3);    // returns 6
   *
   * See also:
   *
   *    combinations, gamma, permutations
   *
   * @param {number | BigNumber | Array | Matrix} n   An integer number
   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
   */


  var factorial = typed('factorial', {
    'number': function number(n) {
      if (n < 0) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n + 1);
    },
    'BigNumber': function BigNumber(n) {
      if (n.isNegative()) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n.plus(1));
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return deepMap(n, factorial);
    }
  });
  factorial.toTex = {
    1: '\\left(${args[0]}\\right)' + latex.operators['factorial']
  };
  return factorial;
}

exports.name = 'factorial';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/latex":228,"./gamma":117}],117:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

var isInteger = require('../../utils/number').isInteger;

function factory(type, config, load, typed) {
  var multiply = load(require('../arithmetic/multiply'));
  var pow = load(require('../arithmetic/pow'));
  /**
   * Compute the gamma function of a value using Lanczos approximation for
   * small values, and an extended Stirling approximation for large values.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gamma(n)
   *
   * Examples:
   *
   *    math.gamma(5);       // returns 24
   *    math.gamma(-0.5);    // returns -3.5449077018110335
   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i
   *
   * See also:
   *
   *    combinations, factorial, permutations
   *
   * @param {number | Array | Matrix} n   A real or complex number
   * @return {number | Array | Matrix}    The gamma of `n`
   */

  var gamma = typed('gamma', {
    'number': function number(n) {
      var t, x;

      if (isInteger(n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity; // Will overflow
        }

        var value = n - 2;
        var res = n - 1;

        while (value > 1) {
          res *= value;
          value--;
        }

        if (res == 0) {
          res = 1; // 0! is per definition 1
        }

        return res;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));
      }

      if (n >= 171.35) {
        return Infinity; // will overflow
      }

      if (n > 85.0) {
        // Extended Stirling Approx
        var twoN = n * n;
        var threeN = twoN * n;
        var fourN = threeN * n;
        var fiveN = fourN * n;
        return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
      }

      --n;
      x = p[0];

      for (var i = 1; i < p.length; ++i) {
        x += p[i] / (n + i);
      }

      t = n + g + 0.5;
      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    },
    'Complex': function Complex(n) {
      var t, x;

      if (n.im == 0) {
        return gamma(n.re);
      }

      n = new type.Complex(n.re - 1, n.im);
      x = new type.Complex(p[0], 0);

      for (var i = 1; i < p.length; ++i) {
        var real = n.re + i; // x += p[i]/(n+i)

        var den = real * real + n.im * n.im;

        if (den != 0) {
          x.re += p[i] * real / den;
          x.im += -(p[i] * n.im) / den;
        } else {
          x.re = p[i] < 0 ? -Infinity : Infinity;
        }
      }

      t = new type.Complex(n.re + g + 0.5, n.im);
      var twoPiSqrt = Math.sqrt(2 * Math.PI);
      n.re += 0.5;
      var result = pow(t, n);

      if (result.im == 0) {
        // sqrt(2*PI)*result
        result.re *= twoPiSqrt;
      } else if (result.re == 0) {
        result.im *= twoPiSqrt;
      } else {
        result.re *= twoPiSqrt;
        result.im *= twoPiSqrt;
      }

      var r = Math.exp(-t.re); // exp(-t)

      t.re = r * Math.cos(-t.im);
      t.im = r * Math.sin(-t.im);
      return multiply(multiply(result, t), x);
    },
    'BigNumber': function BigNumber(n) {
      if (n.isInteger()) {
        return n.isNegative() || n.isZero() ? new type.BigNumber(Infinity) : bigFactorial(n.minus(1));
      }

      if (!n.isFinite()) {
        return new type.BigNumber(n.isNegative() ? NaN : Infinity);
      }

      throw new Error('Integer BigNumber expected');
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return deepMap(n, gamma);
    }
  });
  /**
   * Calculate factorial for a BigNumber
   * @param {BigNumber} n
   * @returns {BigNumber} Returns the factorial of n
   */

  function bigFactorial(n) {
    if (n.isZero()) {
      return new type.BigNumber(1); // 0! is per definition 1
    }

    var precision = config.precision + (Math.log(n.toNumber()) | 0);
    var Big = type.BigNumber.clone({
      precision: precision
    });
    var res = new Big(n);
    var value = n.toNumber() - 1; // number

    while (value > 1) {
      res = res.times(value);
      value--;
    }

    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));
  }

  gamma.toTex = {
    1: '\\Gamma\\left(${args[0]}\\right)'
  };
  return gamma;
} // TODO: comment on the variables g and p


var g = 4.7421875;
var p = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];
exports.name = 'gamma';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/number":229,"../arithmetic/multiply":76,"../arithmetic/pow":80}],118:[function(require,module,exports){
"use strict";

module.exports = [//require('./distribution'), // TODO: rethink math.distribution
require('./combinations'), require('./factorial'), require('./gamma'), require('./kldivergence'), require('./multinomial'), require('./permutations'), require('./pickRandom'), require('./random'), require('./randomInt')];

},{"./combinations":114,"./factorial":116,"./gamma":117,"./kldivergence":119,"./multinomial":120,"./permutations":121,"./pickRandom":122,"./random":123,"./randomInt":124}],119:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var divide = load(require('../arithmetic/divide'));
  var sum = load(require('../statistics/sum'));
  var multiply = load(require('../arithmetic/multiply'));
  var dotDivide = load(require('../arithmetic/dotDivide'));
  var log = load(require('../arithmetic/log'));
  var isNumeric = load(require('../utils/isNumeric'));
  /**
   * Calculate the Kullback-Leibler (KL) divergence  between two distributions
   *
   * Syntax:
   *
   *     math.kldivergence(x, y)
   *
   * Examples:
   *
   *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153
   *
   *
   * @param  {Array | Matrix} q    First vector
   * @param  {Array | Matrix} p    Second vector
   * @return {number}              Returns distance between q and p
   */

  var kldivergence = typed('kldivergence', {
    'Array, Array': function ArrayArray(q, p) {
      return _kldiv(matrix(q), matrix(p));
    },
    'Matrix, Array': function MatrixArray(q, p) {
      return _kldiv(q, matrix(p));
    },
    'Array, Matrix': function ArrayMatrix(q, p) {
      return _kldiv(matrix(q), p);
    },
    'Matrix, Matrix': function MatrixMatrix(q, p) {
      return _kldiv(q, p);
    }
  });

  function _kldiv(q, p) {
    var plength = p.size().length;
    var qlength = q.size().length;

    if (plength > 1) {
      throw new Error('first object must be one dimensional');
    }

    if (qlength > 1) {
      throw new Error('second object must be one dimensional');
    }

    if (plength !== qlength) {
      throw new Error("Length of two vectors must be equal");
    } //Before calculation, apply normalization


    var sumq = sum(q);

    if (sumq === 0) {
      throw new Error("Sum of elements in first object must be non zero");
    }

    var sump = sum(p);

    if (sump === 0) {
      throw new Error("Sum of elements in second object must be non zero");
    }

    var qnorm = divide(q, sum(q));
    var pnorm = divide(p, sum(p));
    var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));

    if (isNumeric(result)) {
      return result;
    } else {
      return Number.NaN;
    }
  }

  return kldivergence;
}

exports.name = 'kldivergence';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../arithmetic/divide":61,"../arithmetic/dotDivide":63,"../arithmetic/log":73,"../arithmetic/multiply":76,"../statistics/sum":141,"../utils/isNumeric":174}],120:[function(require,module,exports){
'use strict';

var deepForEach = require('../../utils/collection/deepForEach');

function factory(type, config, load, typed) {
  var add = load(require('../arithmetic/add'));
  var multiply = load(require('../arithmetic/multiply'));
  var divide = load(require('../arithmetic/divide'));
  var factorial = load(require('../probability/factorial'));
  var isInteger = load(require('../utils/isInteger'));
  var isPositive = load(require('../utils/isPositive'));
  /**
   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
   *
   * multinomial takes one array of integers as an argument.
   * The following condition must be enforced: every ai <= 0
   *
   * Syntax:
   *
   *     math.multinomial(a) // a is an array type
   *
   * Examples:
   *
   *    math.multinomial([1,2,1]); // returns 12
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
   * @return {Number | BigNumber}         Multinomial coefficient.
   */

  return typed('multinomial', {
    'Array | Matrix': function ArrayMatrix(a) {
      var sum = 0;
      var denom = 1;
      deepForEach(a, function (ai) {
        if (!isInteger(ai) || !isPositive(ai)) {
          throw new TypeError('Positive integer value expected in function multinomial');
        }

        sum = add(sum, ai);
        denom = multiply(denom, factorial(ai));
      });
      return divide(factorial(sum), denom);
    }
  });
}

exports.name = 'multinomial';
exports.factory = factory;

},{"../../utils/collection/deepForEach":218,"../arithmetic/add":56,"../arithmetic/divide":61,"../arithmetic/multiply":76,"../probability/factorial":116,"../utils/isInteger":171,"../utils/isPositive":175}],121:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

function factory(type, config, load, typed) {
  var factorial = load(require('./factorial'));
  /**
   * Compute the number of ways of obtaining an ordered subset of `k` elements
   * from a set of `n` elements.
   *
   * Permutations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.permutations(n)
   *     math.permutations(n, k)
   *
   * Examples:
   *
   *    math.permutations(5);     // 120
   *    math.permutations(5, 3);  // 60
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number | BigNumber} n   The number of objects in total
   * @param {number | BigNumber} [k] The number of objects in the subset
   * @return {number | BigNumber}    The number of permutations
   */

  var permutations = typed('permutations', {
    'number | BigNumber': factorial,
    'number, number': function numberNumber(n, k) {
      var result, i;

      if (!isInteger(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (!isInteger(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (k > n) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      } // Permute n objects, k at a time


      result = 1;

      for (i = n - k + 1; i <= n; i++) {
        result = result * i;
      }

      return result;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var result, i;

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (k.gt(n)) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      }

      result = new type.BigNumber(1);

      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
        result = result.times(i);
      }

      return result;
    } // TODO: implement support for collection in permutations

  });
  permutations.toTex = undefined; // use default template

  return permutations;
}
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */


function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

exports.name = 'permutations';
exports.factory = factory;

},{"../../utils/number":229,"./factorial":116}],122:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var distribution = load(require('./distribution'));
  /**
   * Random pick one or more values from a one dimensional array.
   * Array elements are picked using a random function with uniform or weighted distribution.
   *
   * Syntax:
   *
   *     math.pickRandom(array)
   *     math.pickRandom(array, number)
   *     math.pickRandom(array, weights)
   *     math.pickRandom(array, number, weights)
   *     math.pickRandom(array, weights, number)
   *
   * Examples:
   *
   *     math.pickRandom([3, 6, 12, 2]);                  // returns one of the values in the array
   *     math.pickRandom([3, 6, 12, 2], 2);               // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1]);    // returns one of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]); // returns an array of two of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2); // returns an array of two of the values in the array with weighted distribution
   *
   * See also:
   *
   *     random, randomInt
   *
   * @param {Array} array     A one dimensional array
   * @param {Int} number      An int or float
   * @param {Array} weights   An array of ints or floats
   * @return {number | Array} Returns a single random value from array when number is 1 or undefined.
   *                          Returns an array with the configured number of elements when number is > 1.
   */
  // TODO: rework pickRandom to a typed-function

  var pickRandom = distribution('uniform').pickRandom;
  pickRandom.toTex = undefined; // use default template

  return pickRandom;
}

exports.name = 'pickRandom';
exports.factory = factory;

},{"./distribution":115}],123:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var distribution = load(require('./distribution'));
  /**
   * Return a random number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.random()                // generate a random number between 0 and 1
   *     math.random(max)             // generate a random number between 0 and max
   *     math.random(min, max)        // generate a random number between min and max
   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
   *
   * Examples:
   *
   *     math.random();       // returns a random number between 0 and 1
   *     math.random(100);    // returns a random number between 0 and 100
   *     math.random(30, 40); // returns a random number between 30 and 40
   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1
   *
   * See also:
   *
   *     randomInt, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random number
   */
  // TODO: rework random to a typed-function

  var random = distribution('uniform').random;
  random.toTex = undefined; // use default template

  return random;
}

exports.name = 'random';
exports.factory = factory;

},{"./distribution":115}],124:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var distribution = load(require('./distribution'));
  /**
   * Return a random integer number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.randomInt(max)             // generate a random integer between 0 and max
   *     math.randomInt(min, max)        // generate a random integer between min and max
   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
   *
   * Examples:
   *
   *     math.randomInt(100);    // returns a random integer between 0 and 100
   *     math.randomInt(30, 40); // returns a random integer between 30 and 40
   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1
   *
   * See also:
   *
   *     random, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random integer value
   */
  // TODO: rework randomInt to a typed-function

  var randomInt = distribution('uniform').randomInt;
  randomInt.toTex = undefined; // use default template

  return randomInt;
}

exports.name = 'randomInt';
exports.factory = factory;

},{"./distribution":115}],125:[function(require,module,exports){
'use strict';

var seedrandom = require('seed-random'); // create a random seed here to prevent an infinite loop from seed-random
// inside the factory. Reason is that math.random is defined as a getter/setter
// and seed-random generates a seed from the local entropy by reading every
// defined object including `math` itself. That means that whilst getting
// math.random, it tries to get math.random, etc... an infinite loop.
// See https://github.com/ForbesLindesay/seed-random/issues/6


var singletonRandom = seedrandom();

function factory(type, config, load, typed, math) {
  var random; // create a new random generator with given seed

  function setSeed(seed) {
    random = seed === null ? singletonRandom : seedrandom(String(seed));
  } // initialize a seeded pseudo random number generator with config's random seed


  setSeed(config.randomSeed); // wrapper function so the rng can be updated via generator

  function rng() {
    return random();
  } // updates generator with a new instance of a seeded pseudo random number generator


  math.on('config', function (curr, prev, changes) {
    // if the user specified a randomSeed
    if (changes.randomSeed !== undefined) {
      // update generator with a new instance of a seeded pseudo random number generator
      setSeed(curr.randomSeed);
    }
  });
  return rng;
}

exports.factory = factory;
exports.math = true;

},{"seed-random":237}],126:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;

var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * x and y are considered equal when the relative difference between x and y
   * is smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.compare(x, y)
   *
   * Examples:
   *
   *    math.compare(6, 1);           // returns 1
   *    math.compare(2, 3);           // returns -1
   *    math.compare(7, 7);           // returns 0
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('40 mm');
   *    math.compare(a, b);           // returns 1
   *
   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural
   *
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.
   */

  var compare = typed('compare', {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x === y ? 0 : x > y ? 1 : -1;
    },
    'number, number': function numberNumber(x, y) {
      return x === y || nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon) ? new type.BigNumber(0) : new type.BigNumber(x.cmp(y));
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return new type.Fraction(x.compare(y));
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return compare(x.value, y.value);
    },
    'string, string': function stringString(x, y) {
      return x === y ? 0 : x > y ? 1 : -1;
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm05(x, y, compare);
              break;

            default:
              // sparse + dense
              c = algorithm03(y, x, compare, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, compare, false);
              break;

            default:
              // dense + dense
              c = algorithm13(x, y, compare);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return compare(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return compare(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return compare(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, compare, false);
          break;

        default:
          c = algorithm14(x, y, compare, false);
          break;
      }

      return c;
    },
    'any, Matrix': function anyMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, compare, true);
          break;

        default:
          c = algorithm14(y, x, compare, true);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, compare, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, compare, true).valueOf();
    }
  });
  compare.toTex = undefined; // use default template

  return compare;
}

exports.name = 'compare';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm03":200,"../../type/matrix/utils/algorithm05":202,"../../type/matrix/utils/algorithm12":208,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/bignumber/nearlyEqual":215,"../../utils/number":229}],127:[function(require,module,exports){
'use strict';

var naturalSort = require('javascript-natural-sort');

function factory(type, config, load, typed) {
  var getTypeOf = load(require('../utils/typeof'));
  var matrix = load(require('../../type/matrix/function/matrix'));
  var compare = load(require('./compare'));
  var compareBooleans = compare.signatures['boolean,boolean'];
  /**
   * Compare two values of any type in a deterministic, natural way.
   *
   * For numeric values, the function works the same as `math.compare`.
   * For types of values that can't be compared mathematically,
   * the function compares in a natural way.
   *
   * For numeric values, x and y are considered equal when the relative
   * difference between x and y is smaller than the configured epsilon.
   * The function cannot be used to compare values smaller than
   * approximately 2.22e-16.
   *
   * For Complex numbers, first the real parts are compared. If equal,
   * the imaginary parts are compared.
   *
   * Arrays and Matrices are compared value by value until there is an
   * unequal pair of values encountered. Objects are compared by sorted
   * keys until the keys or their values are unequal.
   *
   * Syntax:
   *
   *    math.compareNatural(x, y)
   *
   * Examples:
   *
   *    math.compareNatural(6, 1);              // returns 1
   *    math.compareNatural(2, 3);              // returns -1
   *    math.compareNatural(7, 7);              // returns 0
   *
   *    math.compareNatural('10', '2');         // returns 1
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('40 mm');
   *    math.compareNatural(a, b);              // returns 1
   *
   *    var c = math.complex('2 + 3i');
   *    var d = math.complex('2 + 4i');
   *    math.compareNatural(c, d);              // returns -1
   *
   *    math.compareNatural([1, 2, 4], [1, 2, 3]); // returns 1
   *    math.compareNatural([1, 2, 3], [1, 2]);    // returns 1
   *    math.compareNatural([1, 5], [1, 2, 3]);    // returns 1
   *    math.compareNatural([1, 2], [1, 2]);       // returns 0
   *
   *    math.compareNatural({a: 2}, {a: 4});       // returns -1
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {*} x First value to compare
   * @param  {*} y Second value to compare
   * @return {number} Returns the result of the comparison: 1, 0 or -1.
   */

  var compareNatural = typed('compareNatural', {
    'any, any': function anyAny(x, y) {
      var typeX = getTypeOf(x);
      var typeY = getTypeOf(y);
      var c; // numeric types

      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
        c = compare(x, y);

        if (c.toString() !== '0') {
          // c can be number, BigNumber, or Fraction
          return c > 0 ? 1 : -1; // return a number
        } else {
          return naturalSort(typeX, typeY);
        }
      } // matrix types


      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
        c = compareMatricesAndArrays(x, y);

        if (c !== 0) {
          return c;
        } else {
          return naturalSort(typeX, typeY);
        }
      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'


      if (typeX !== typeY) {
        return naturalSort(typeX, typeY);
      }

      if (typeX === 'Complex') {
        return compareComplexNumbers(x, y);
      }

      if (typeX === 'Unit') {
        if (x.equalBase(y)) {
          return compareNatural(x.value, y.value);
        } // compare by units


        return compareArrays(x.formatUnits(), y.formatUnits());
      }

      if (typeX === 'boolean') {
        return compareBooleans(x, y);
      }

      if (typeX === 'string') {
        return naturalSort(x, y);
      }

      if (typeX === 'Object') {
        return compareObjects(x, y);
      }

      if (typeX === 'null') {
        return 0;
      }

      if (typeX === 'undefined') {
        return 0;
      } // this should not occur...


      throw new TypeError('Unsupported type of value "' + typeX + '"');
    }
  });
  compareNatural.toTex = undefined; // use default template

  /**
   * Compare mixed matrix/array types, by converting to same-shaped array.
   * This comparator is non-deterministic regarding input types.
   * @param {Array | SparseMatrix | DenseMatrix | *} x
   * @param {Array | SparseMatrix | DenseMatrix | *} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */

  function compareMatricesAndArrays(x, y) {
    if (type.isSparseMatrix(x) && type.isSparseMatrix(y)) {
      return compareArrays(x.toJSON().values, y.toJSON().values);
    }

    if (type.isSparseMatrix(x)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(x.toArray(), y);
    }

    if (type.isSparseMatrix(y)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(x, y.toArray());
    } // convert DenseArray into Array


    if (type.isDenseMatrix(x)) {
      return compareMatricesAndArrays(x.toJSON().data, y);
    }

    if (type.isDenseMatrix(y)) {
      return compareMatricesAndArrays(x, y.toJSON().data);
    } // convert scalars to array


    if (!Array.isArray(x)) {
      return compareMatricesAndArrays([x], y);
    }

    if (!Array.isArray(y)) {
      return compareMatricesAndArrays(x, [y]);
    }

    return compareArrays(x, y);
  }
  /**
   * Compare two Arrays
   *
   * - First, compares value by value
   * - Next, if all corresponding values are equal,
   *   look at the length: longest array will be considered largest
   *
   * @param {Array} x
   * @param {Array} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  function compareArrays(x, y) {
    // compare each value
    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
      var v = compareNatural(x[i], y[i]);

      if (v !== 0) {
        return v;
      }
    } // compare the size of the arrays


    if (x.length > y.length) {
      return 1;
    }

    if (x.length < y.length) {
      return -1;
    } // both Arrays have equal size and content


    return 0;
  }
  /**
   * Compare two objects
   *
   * - First, compare sorted property names
   * - Next, compare the property values
   *
   * @param {Object} x
   * @param {Object} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  function compareObjects(x, y) {
    var keysX = Object.keys(x);
    var keysY = Object.keys(y); // compare keys

    keysX.sort(naturalSort);
    keysY.sort(naturalSort);
    var c = compareArrays(keysX, keysY);

    if (c !== 0) {
      return c;
    } // compare values


    for (var i = 0; i < keysX.length; i++) {
      var v = compareNatural(x[keysX[i]], y[keysY[i]]);

      if (v !== 0) {
        return v;
      }
    }

    return 0;
  }

  return compareNatural;
}
/**
 * Compare two complex numbers, `x` and `y`:
 *
 * - First, compare the real values of `x` and `y`
 * - If equal, compare the imaginary values of `x` and `y`
 * 
 * @params {Complex} x
 * @params {Complex} y
 * @returns {number} Returns the comparison result: -1, 0, or 1
 */


function compareComplexNumbers(x, y) {
  if (x.re > y.re) {
    return 1;
  }

  if (x.re < y.re) {
    return -1;
  }

  if (x.im > y.im) {
    return 1;
  }

  if (x.im < y.im) {
    return -1;
  }

  return 0;
}

exports.name = 'compareNatural';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../utils/typeof":178,"./compare":126,"javascript-natural-sort":46}],128:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;

var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory(type, config, load, typed) {
  /**
   * Test whether two values are equal.
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
   * @private
   */
  var equalScalar = typed('equalScalar', {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x === y;
    },
    'number, number': function numberNumber(x, y) {
      return x === y || nearlyEqual(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.equals(y);
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.equals(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return equalScalar(x.value, y.value);
    },
    'string, string': function stringString(x, y) {
      return x === y;
    }
  });
  return equalScalar;
}

exports.factory = factory;

},{"../../utils/bignumber/nearlyEqual":215,"../../utils/number":229}],129:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;

var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  var latex = require('../../utils/latex');
  /**
   * Test whether value x is larger than y.
   *
   * The function returns true when x is larger than y and the relative
   * difference between x and y is larger than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.larger(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 3);             // returns false
   *    math.larger(5, 2 + 2);         // returns true
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('2 inch');
   *    math.larger(a, b);             // returns false
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
   */


  var larger = typed('larger', {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x > y;
    },
    'number, number': function numberNumber(x, y) {
      return x > y && !nearlyEqual(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) === 1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return larger(x.value, y.value);
    },
    'string, string': function stringString(x, y) {
      return x > y;
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm07(x, y, larger);
              break;

            default:
              // sparse + dense
              c = algorithm03(y, x, larger, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, larger, false);
              break;

            default:
              // dense + dense
              c = algorithm13(x, y, larger);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return larger(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return larger(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return larger(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, larger, false);
          break;

        default:
          c = algorithm14(x, y, larger, false);
          break;
      }

      return c;
    },
    'any, Matrix': function anyMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, larger, true);
          break;

        default:
          c = algorithm14(y, x, larger, true);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, larger, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, larger, true).valueOf();
    }
  });
  larger.toTex = {
    2: '\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\right)'
  };
  return larger;
}

exports.name = 'larger';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm03":200,"../../type/matrix/utils/algorithm07":204,"../../type/matrix/utils/algorithm12":208,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/bignumber/nearlyEqual":215,"../../utils/latex":228,"../../utils/number":229}],130:[function(require,module,exports){
'use strict';

var nearlyEqual = require('../../utils/number').nearlyEqual;

var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));

  var latex = require('../../utils/latex');
  /**
   * Test whether value x is smaller than y.
   *
   * The function returns true when x is smaller than y and the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.smaller(x, y)
   *
   * Examples:
   *
   *    math.smaller(2, 3);            // returns true
   *    math.smaller(5, 2 * 2);        // returns false
   *
   *    var a = math.unit('5 cm');
   *    var b = math.unit('2 inch');
   *    math.smaller(a, b);            // returns true
   *
   * See also:
   *
   *    equal, unequal, smallerEq, smaller, smallerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */


  var smaller = typed('smaller', {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x < y;
    },
    'number, number': function numberNumber(x, y) {
      return x < y && !nearlyEqual(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) === -1;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return smaller(x.value, y.value);
    },
    'string, string': function stringString(x, y) {
      return x < y;
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse + sparse
              c = algorithm07(x, y, smaller);
              break;

            default:
              // sparse + dense
              c = algorithm03(y, x, smaller, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense + sparse
              c = algorithm03(x, y, smaller, false);
              break;

            default:
              // dense + dense
              c = algorithm13(x, y, smaller);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return smaller(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return smaller(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return smaller(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm12(x, y, smaller, false);
          break;

        default:
          c = algorithm14(x, y, smaller, false);
          break;
      }

      return c;
    },
    'any, Matrix': function anyMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, smaller, true);
          break;

        default:
          c = algorithm14(y, x, smaller, true);
          break;
      }

      return c;
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, smaller, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, smaller, true).valueOf();
    }
  });
  smaller.toTex = {
    2: '\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\right)'
  };
  return smaller;
}

exports.name = 'smaller';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm03":200,"../../type/matrix/utils/algorithm07":204,"../../type/matrix/utils/algorithm12":208,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210,"../../utils/bignumber/nearlyEqual":215,"../../utils/latex":228,"../../utils/number":229}],131:[function(require,module,exports){
"use strict";

module.exports = [require('./mad'), require('./max'), require('./mean'), require('./median'), require('./min'), require('./mode'), require('./prod'), require('./quantileSeq'), require('./std'), require('./sum'), require('./var')];

},{"./mad":132,"./max":133,"./mean":134,"./median":135,"./min":136,"./mode":137,"./prod":138,"./quantileSeq":139,"./std":140,"./sum":141,"./var":142}],132:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory(type, config, load, typed) {
  var abs = load(require('../arithmetic/abs'));
  var map = load(require('../matrix/map'));
  var median = load(require('../statistics/median'));
  var subtract = load(require('../arithmetic/subtract'));
  /**
   * Compute the median absolute deviation of a matrix or a list with values.
   * The median absolute deviation is defined as the median of the absolute
   * deviations from the median.
   *
   * Syntax:
   *
   *     math.mad(a, b, c, ...)
   *     math.mad(A)
   *
   * Examples:
   *
   *     math.mad(10, 20, 30);             // returns 10
   *     math.mad([1, 2, 3]);              // returns 1
   *     math.mad([[1, 2, 3], [4, 5, 6]]); // returns 1.5
   *
   * See also:
   *
   *     median, mean, std, abs
   *
   * @param {Array | Matrix} array
   *                        A single matrix or multiple scalar values.
   * @return {*} The median absolute deviation.
   */

  var mad = typed('mad', {
    // mad([a, b, c, d, ...])
    'Array | Matrix': _mad,
    // mad(a, b, c, d, ...)
    '...': function _(args) {
      return _mad(args);
    }
  });
  mad.toTex = undefined; // use default template

  return mad;

  function _mad(array) {
    array = flatten(array.valueOf());

    if (array.length === 0) {
      throw new Error('Cannot calculate median absolute deviation of an empty array');
    }

    var med = median(array);
    return median(map(array, function (value) {
      return abs(subtract(value, med));
    }));
  }
}

exports.name = 'mad';
exports.factory = factory;

},{"../../utils/array":212,"../arithmetic/abs":55,"../arithmetic/subtract":85,"../matrix/map":101,"../statistics/median":135}],133:[function(require,module,exports){
'use strict';

var deepForEach = require('../../utils/collection/deepForEach');

var reduce = require('../../utils/collection/reduce');

var containsCollections = require('../../utils/collection/containsCollections');

function factory(type, config, load, typed) {
  var larger = load(require('../relational/larger'));
  /**
   * Compute the maximum value of a matrix or a  list with values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.max(a, b, c, ...)
   *     math.max(A)
   *     math.max(A, dim)
   *
   * Examples:
   *
   *     math.max(2, 1, 4, 3);                  // returns 4
   *     math.max([2, 1, 4, 3]);                // returns 4
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]
   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
   *
   * See also:
   *
   *    mean, median, min, prod, std, sum, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The maximum value
   */

  var max = typed('max', {
    // max([a, b, c, d, ...])
    'Array | Matrix': _max,
    // max([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return reduce(array, dim.valueOf(), _largest);
    },
    // max(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function max');
      }

      return _max(args);
    }
  });
  max.toTex = '\\max\\left(${args}\\right)';
  return max;
  /**
   * Return the largest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is largest, or y when y is largest
   * @private
   */

  function _largest(x, y) {
    return larger(x, y) ? x : y;
  }
  /**
   * Recursively calculate the maximum value in an n-dimensional array
   * @param {Array} array
   * @return {number} max
   * @private
   */


  function _max(array) {
    var max = undefined;
    deepForEach(array, function (value) {
      if (max === undefined || larger(value, max)) {
        max = value;
      }
    });

    if (max === undefined) {
      throw new Error('Cannot calculate max of an empty array');
    }

    return max;
  }
}

exports.name = 'max';
exports.factory = factory;

},{"../../utils/collection/containsCollections":217,"../../utils/collection/deepForEach":218,"../../utils/collection/reduce":222,"../relational/larger":129}],134:[function(require,module,exports){
'use strict';

var size = require('../../utils/array').size;

var deepForEach = require('../../utils/collection/deepForEach');

var reduce = require('../../utils/collection/reduce');

var containsCollections = require('../../utils/collection/containsCollections');

function factory(type, config, load, typed) {
  var add = load(require('../arithmetic/add'));
  var divide = load(require('../arithmetic/divide'));
  /**
   * Compute the mean value of matrix or a list with values.
   * In case of a multi dimensional array, the mean of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.mean(a, b, c, ...)
   *     math.mean(A)
   *     math.mean(A, dim)
   *
   * Examples:
   *
   *     math.mean(2, 1, 4, 3);                     // returns 2.5
   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725
   *
   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]
   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]
   *
   * See also:
   *
   *     median, min, max, sum, prod, std, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The mean of all values
   */

  var mean = typed('mean', {
    // mean([a, b, c, d, ...])
    'Array | Matrix': _mean,
    // mean([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nmean,
    // mean(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function mean');
      }

      return _mean(args);
    }
  });
  mean.toTex = undefined; // use default template

  return mean;
  /**
   * Calculate the mean value in an n-dimensional array, returning a
   * n-1 dimensional array
   * @param {Array} array
   * @param {number} dim
   * @return {number} mean
   * @private
   */

  function _nmean(array, dim) {
    var sum = reduce(array, dim, add);
    var s = Array.isArray(array) ? size(array) : array.size();
    return divide(sum, s[dim]);
  }
  /**
   * Recursively calculate the mean value in an n-dimensional array
   * @param {Array} array
   * @return {number} mean
   * @private
   */


  function _mean(array) {
    var sum = 0;
    var num = 0;
    deepForEach(array, function (value) {
      sum = add(sum, value);
      num++;
    });

    if (num === 0) {
      throw new Error('Cannot calculate mean of an empty array');
    }

    return divide(sum, num);
  }
}

exports.name = 'mean';
exports.factory = factory;

},{"../../utils/array":212,"../../utils/collection/containsCollections":217,"../../utils/collection/deepForEach":218,"../../utils/collection/reduce":222,"../arithmetic/add":56,"../arithmetic/divide":61}],135:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

var reduce = require('../../utils/collection/reduce');

var containsCollections = require('../../utils/collection/containsCollections');

function factory(type, config, load, typed) {
  var add = load(require('../arithmetic/addScalar'));
  var divide = load(require('../arithmetic/divideScalar'));
  var compare = load(require('../relational/compare'));
  var partitionSelect = load(require('../matrix/partitionSelect'));
  /**
   * Compute the median of a matrix or a list with values. The values are
   * sorted and the middle value is returned. In case of an even number of
   * values, the average of the two middle values is returned.
   * Supported types of values are: Number, BigNumber, Unit
   *
   * In case of a (multi dimensional) array or matrix, the median of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.median(a, b, c, ...)
   *     math.median(A)
   *
   * Examples:
   *
   *     math.median(5, 2, 7);        // returns 5
   *     math.median([3, -1, 5, 7]);  // returns 4
   *
   * See also:
   *
   *     mean, min, max, sum, prod, std, var, quantileSeq
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The median
   */

  var median = typed('median', {
    // median([a, b, c, d, ...])
    'Array | Matrix': _median,
    // median([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      // TODO: implement median(A, dim)
      throw new Error('median(A, dim) is not yet supported'); //return reduce(arguments[0], arguments[1], ...);
    },
    // median(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function median');
      }

      return _median(args);
    }
  });
  /**
   * Recursively calculate the median of an n-dimensional array
   * @param {Array} array
   * @return {Number} median
   * @private
   */

  function _median(array) {
    array = flatten(array.valueOf());
    var num = array.length;

    if (num == 0) {
      throw new Error('Cannot calculate median of an empty array');
    }

    if (num % 2 == 0) {
      // even: return the average of the two middle values
      var mid = num / 2 - 1;
      var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part

      var left = array[mid];

      for (var i = 0; i < mid; ++i) {
        if (compare(array[i], left) > 0) {
          left = array[i];
        }
      }

      return middle2(left, right);
    } else {
      // odd: return the middle value
      var m = partitionSelect(array, (num - 1) / 2);
      return middle(m);
    }
  } // helper function to type check the middle value of the array


  var middle = typed({
    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {
      return value;
    }
  }); // helper function to type check the two middle value of the array

  var middle2 = typed({
    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {
      return divide(add(left, right), 2);
    }
  });
  median.toTex = undefined; // use default template

  return median;
}

exports.name = 'median';
exports.factory = factory;

},{"../../utils/array":212,"../../utils/collection/containsCollections":217,"../../utils/collection/reduce":222,"../arithmetic/addScalar":57,"../arithmetic/divideScalar":62,"../matrix/partitionSelect":103,"../relational/compare":126}],136:[function(require,module,exports){
'use strict';

var deepForEach = require('../../utils/collection/deepForEach');

var reduce = require('../../utils/collection/reduce');

var containsCollections = require('../../utils/collection/containsCollections');

function factory(type, config, load, typed) {
  var smaller = load(require('../relational/smaller'));
  /**
   * Compute the maximum value of a matrix or a  list of values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.min(a, b, c, ...)
   *     math.min(A)
   *     math.min(A, dim)
   *
   * Examples:
   *
   *     math.min(2, 1, 4, 3);                  // returns 1
   *     math.min([2, 1, 4, 3]);                // returns 1
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]
   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
   *
   * See also:
   *
   *    mean, median, max, prod, std, sum, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The minimum value
   */

  var min = typed('min', {
    // min([a, b, c, d, ...])
    'Array | Matrix': _min,
    // min([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return reduce(array, dim.valueOf(), _smallest);
    },
    // min(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function min');
      }

      return _min(args);
    }
  });
  min.toTex = '\\min\\left(${args}\\right)';
  return min;
  /**
   * Return the smallest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is smallest, or y when y is smallest
   * @private
   */

  function _smallest(x, y) {
    return smaller(x, y) ? x : y;
  }
  /**
   * Recursively calculate the minimum value in an n-dimensional array
   * @param {Array} array
   * @return {number} min
   * @private
   */


  function _min(array) {
    var min = undefined;
    deepForEach(array, function (value) {
      if (min === undefined || smaller(value, min)) {
        min = value;
      }
    });

    if (min === undefined) {
      throw new Error('Cannot calculate min of an empty array');
    }

    return min;
  }
}

exports.name = 'min';
exports.factory = factory;

},{"../../utils/collection/containsCollections":217,"../../utils/collection/deepForEach":218,"../../utils/collection/reduce":222,"../relational/smaller":130}],137:[function(require,module,exports){
'use strict';

var flatten = require('../../utils/array').flatten;

function factory(type, config, load, typed) {
  /**
  * Computes the mode of a set of numbers or a list with values(numbers or characters).
  * If there are more than one modes, it returns a list of those values.
  *
  * Syntax:
  *
  *     math.mode(a, b, c, ...)
  *     math.mode(A)
  *
  * Examples:
  *
  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]
  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]
  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
  *     math.mode('a','a','b','c')                           // returns ["a"]
  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
  *
  * See also:
  *
  *     median,
  *     mean
  *
  * @param {... *} args  A single matrix
  * @return {*} The mode of all values
  */
  var mode = typed('mode', {
    'Array | Matrix': _mode,
    '...': function _(args) {
      return _mode(args);
    }
  });
  return mode;
  /**
   * Calculates the mode in an 1-dimensional array
   * @param {Array} values
   * @return {number} mode
   * @private
   */

  function _mode(values) {
    values = flatten(values.valueOf());
    var num = values.length;

    if (num == 0) {
      throw new Error('Cannot calculate mode of an empty array');
    }

    var count = {},
        mode = [],
        max = 0;

    for (var i in values) {
      if (!(values[i] in count)) {
        count[values[i]] = 0;
      }

      count[values[i]]++;

      if (count[values[i]] == max) {
        mode.push(values[i]);
      } else if (count[values[i]] > max) {
        max = count[values[i]];
        mode = [values[i]];
      }
    }

    return mode;
  }

  ;
}

exports.name = 'mode';
exports.factory = factory;

},{"../../utils/array":212}],138:[function(require,module,exports){
'use strict';

var deepForEach = require('../../utils/collection/deepForEach');

function factory(type, config, load, typed) {
  var multiply = load(require('../arithmetic/multiplyScalar'));
  /**
   * Compute the product of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.prod(a, b, c, ...)
   *     math.prod(A)
   *
   * Examples:
   *
   *     math.multiply(2, 3);           // returns 6
   *     math.prod(2, 3);               // returns 6
   *     math.prod(2, 3, 4);            // returns 24
   *     math.prod([2, 3, 4]);          // returns 24
   *     math.prod([[2, 5], [4, 3]]);   // returns 120
   *
   * See also:
   *
   *    mean, median, min, max, sum, std, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The product of all values
   */

  var prod = typed('prod', {
    // prod([a, b, c, d, ...])
    'Array | Matrix': _prod,
    // prod([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      // TODO: implement prod(A, dim)
      throw new Error('prod(A, dim) is not yet supported'); //return reduce(arguments[0], arguments[1], math.prod);
    },
    // prod(a, b, c, d, ...)
    '...': function _(args) {
      return _prod(args);
    }
  });
  prod.toTex = undefined; // use default template

  return prod;
  /**
   * Recursively calculate the product of an n-dimensional array
   * @param {Array} array
   * @return {number} prod
   * @private
   */

  function _prod(array) {
    var prod = undefined;
    deepForEach(array, function (value) {
      prod = prod === undefined ? value : multiply(prod, value);
    });

    if (prod === undefined) {
      throw new Error('Cannot calculate prod of an empty array');
    }

    return prod;
  }
}

exports.name = 'prod';
exports.factory = factory;

},{"../../utils/collection/deepForEach":218,"../arithmetic/multiplyScalar":77}],139:[function(require,module,exports){
'use strict';

var isInteger = require('../../utils/number').isInteger;

var isNumber = require('../../utils/number').isNumber;

var flatten = require('../../utils/array').flatten;

var isCollection = require('../../utils/collection/isCollection');

function factory(type, config, load, typed) {
  var add = load(require('../arithmetic/add'));
  var multiply = load(require('../arithmetic/multiply'));
  var partitionSelect = load(require('../matrix/partitionSelect'));
  var compare = load(require('../relational/compare'));
  /**
   * Compute the prob order quantile of a matrix or a list with values.
   * The sequence is sorted and the middle value is returned.
   * Supported types of sequence values are: Number, BigNumber, Unit
   * Supported types of probability are: Number, BigNumber
   *
   * In case of a (multi dimensional) array or matrix, the prob order quantile
   * of all elements will be calculated.
   *
   * Syntax:
   *
   *     math.quantileSeq(A, prob[, sorted])
   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
   *     math.quantileSeq(A, N[, sorted])
   *
   * Examples:
   *
   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4
   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]
   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]
   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, var
   *
   * @param {Array, Matrix} data                A single matrix or Array
   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
   *                                            the amount of evenly distributed steps of
   *                                            probabilities; only one of these options can
   *                                            be provided
   * @param {Boolean} sorted=false              is data sorted in ascending order
   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
   */

  function quantileSeq(data, probOrN, sorted) {
    var probArr, dataArr, one;

    if (arguments.length < 2 || arguments.length > 3) {
      throw new SyntaxError('Function quantileSeq requires two or three parameters');
    }

    if (isCollection(data)) {
      sorted = sorted || false;

      if (typeof sorted === 'boolean') {
        dataArr = data.valueOf();

        if (isNumber(probOrN)) {
          if (probOrN < 0) {
            throw new Error('N/prob must be non-negative');
          }

          if (probOrN <= 1) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return _quantileSeq(dataArr, probOrN, sorted);
          }

          if (probOrN > 1) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!isInteger(probOrN)) {
              throw new Error('N must be a positive integer');
            }

            var nPlusOne = probOrN + 1;
            probArr = new Array(probOrN);

            for (var i = 0; i < probOrN;) {
              probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
            }

            return probArr;
          }
        }

        if (type.isBigNumber(probOrN)) {
          if (probOrN.isNegative()) {
            throw new Error('N/prob must be non-negative');
          }

          one = new probOrN.constructor(1);

          if (probOrN.lte(one)) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return _quantileSeq(dataArr, probOrN, sorted);
          }

          if (probOrN.gt(one)) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!probOrN.isInteger()) {
              throw new Error('N must be a positive integer');
            } // largest possible Array length is 2^32-1;
            // 2^32 < 10^15, thus safe conversion guaranteed


            var intN = probOrN.toNumber();

            if (intN > 4294967295) {
              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
            }

            var nPlusOne = new type.BigNumber(intN + 1);
            probArr = new Array(intN);

            for (var i = 0; i < intN;) {
              probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);
            }

            return probArr;
          }
        }

        if (Array.isArray(probOrN)) {
          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
          probArr = new Array(probOrN.length);

          for (var i = 0; i < probArr.length; ++i) {
            var currProb = probOrN[i];

            if (isNumber(currProb)) {
              if (currProb < 0 || currProb > 1) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else if (type.isBigNumber(currProb)) {
              one = new currProb.constructor(1);

              if (currProb.isNegative() || currProb.gt(one)) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else {
              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
            }

            probArr[i] = _quantileSeq(dataArr, currProb, sorted);
          }

          return probArr;
        }

        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
      }

      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
    }

    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
  }
  /**
   * Calculate the prob order quantile of an n-dimensional array.
   * 
   * @param {Array} array
   * @param {Number, BigNumber} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */


  function _quantileSeq(array, prob, sorted) {
    var flat = flatten(array);
    var len = flat.length;

    if (len === 0) {
      throw new Error('Cannot calculate quantile of an empty sequence');
    }

    if (isNumber(prob)) {
      var index = prob * (len - 1);
      var fracPart = index % 1;

      if (fracPart === 0) {
        var value = sorted ? flat[index] : partitionSelect(flat, index);
        validate(value);
        return value;
      }

      var integerPart = Math.floor(index);
      var left, right;

      if (sorted) {
        left = flat[integerPart];
        right = flat[integerPart + 1];
      } else {
        right = partitionSelect(flat, integerPart + 1); // max of partition is kth largest

        left = flat[integerPart];

        for (var i = 0; i < integerPart; ++i) {
          if (compare(flat[i], left) > 0) {
            left = flat[i];
          }
        }
      }

      validate(left);
      validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

      return add(multiply(left, 1 - fracPart), multiply(right, fracPart));
    } // If prob is a BigNumber


    var index = prob.times(len - 1);

    if (index.isInteger()) {
      index = index.toNumber();
      var value = sorted ? flat[index] : partitionSelect(flat, index);
      validate(value);
      return value;
    }

    var integerPart = index.floor();
    var fracPart = index.minus(integerPart);
    var integerPartNumber = integerPart.toNumber();
    var left, right;

    if (sorted) {
      left = flat[integerPartNumber];
      right = flat[integerPartNumber + 1];
    } else {
      right = partitionSelect(flat, integerPartNumber + 1); // max of partition is kth largest

      left = flat[integerPartNumber];

      for (var i = 0; i < integerPartNumber; ++i) {
        if (compare(flat[i], left) > 0) {
          left = flat[i];
        }
      }
    }

    validate(left);
    validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

    var one = new fracPart.constructor(1);
    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
  }
  /**
   * Check if array value types are valid, throw error otherwise.
   * @param {number | BigNumber | Unit} x
   * @param {number | BigNumber | Unit} x
   * @private
   */


  var validate = typed({
    'number | BigNumber | Unit': function numberBigNumberUnit(x) {
      return x;
    }
  });
  return quantileSeq;
}

exports.name = 'quantileSeq';
exports.factory = factory;

},{"../../utils/array":212,"../../utils/collection/isCollection":220,"../../utils/number":229,"../arithmetic/add":56,"../arithmetic/multiply":76,"../matrix/partitionSelect":103,"../relational/compare":126}],140:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var sqrt = load(require('../arithmetic/sqrt'));
  var variance = load(require('../statistics/var'));
  /**
   * Compute the standard deviation of a matrix or a  list with values.
   * The standard deviations is defined as the square root of the variance:
   * `std(A) = sqrt(var(A))`.
   * In case of a (multi dimensional) array or matrix, the standard deviation
   * over all elements will be calculated.
   *
   * Optionally, the type of normalization can be specified as second
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   * Syntax:
   *
   *     math.std(a, b, c, ...)
   *     math.std(A)
   *     math.std(A, normalization)
   *
   * Examples:
   *
   *     math.std(2, 4, 6);                     // returns 2
   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611
   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979
   *     math.std([2, 4, 6, 8], 'biased');      // returns 2
   *
   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707
   *
   * See also:
   *
   *    mean, median, max, min, prod, sum, var
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @return {*} The standard deviation
   */

  var std = typed('std', {
    // std([a, b, c, d, ...])
    'Array | Matrix': _std,
    // std([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _std,
    // std(a, b, c, d, ...)
    '...': function _(args) {
      return _std(args);
    }
  });
  std.toTex = undefined; // use default template

  return std;

  function _std(array, normalization) {
    if (array.length == 0) {
      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
    }

    return sqrt(variance.apply(null, arguments));
  }
}

exports.name = 'std';
exports.factory = factory;

},{"../arithmetic/sqrt":83,"../statistics/var":142}],141:[function(require,module,exports){
'use strict';

var deepForEach = require('../../utils/collection/deepForEach');

function factory(type, config, load, typed) {
  var add = load(require('../arithmetic/addScalar'));
  /**
   * Compute the sum of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.sum(a, b, c, ...)
   *     math.sum(A)
   *
   * Examples:
   *
   *     math.sum(2, 1, 4, 3);               // returns 10
   *     math.sum([2, 1, 4, 3]);             // returns 10
   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, var
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The sum of all values
   */

  var sum = typed('sum', {
    'Array | Matrix': function ArrayMatrix(args) {
      // sum([a, b, c, d, ...])
      return _sum(args);
    },
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber() {
      // sum([a, b, c, d, ...], dim)
      // TODO: implement sum(A, dim)
      throw new Error('sum(A, dim) is not yet supported');
    },
    '...': function _(args) {
      // sum(a, b, c, d, ...)
      return _sum(args);
    }
  });
  sum.toTex = undefined; // use default template

  return sum;
  /**
   * Recursively calculate the sum of an n-dimensional array
   * @param {Array} array
   * @return {number} sum
   * @private
   */

  function _sum(array) {
    var sum = undefined;
    deepForEach(array, function (value) {
      sum = sum === undefined ? value : add(sum, value);
    });

    if (sum === undefined) {
      switch (config.number) {
        case 'number':
          return 0;

        case 'BigNumber':
          return new type.BigNumber(0);

        case 'Fraction':
          return new type.Fraction(0);

        default:
          return 0;
      }
    }

    return sum;
  }
}

exports.name = 'sum';
exports.factory = factory;

},{"../../utils/collection/deepForEach":218,"../arithmetic/addScalar":57}],142:[function(require,module,exports){
'use strict';

var DEFAULT_NORMALIZATION = 'unbiased';

var deepForEach = require('../../utils/collection/deepForEach');

function factory(type, config, load, typed) {
  var add = load(require('../arithmetic/addScalar'));
  var subtract = load(require('../arithmetic/subtract'));
  var multiply = load(require('../arithmetic/multiplyScalar'));
  var divide = load(require('../arithmetic/divideScalar'));
  /**
   * Compute the variance of a matrix or a  list with values.
   * In case of a (multi dimensional) array or matrix, the variance over all
   * elements will be calculated.
   *
   * Optionally, the type of normalization can be specified as second
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   * Note that older browser may not like the variable name `var`. In that
   * case, the function can be called as `math['var'](...)` instead of
   * `math.var(...)`.
   *
   * Syntax:
   *
   *     math.var(a, b, c, ...)
   *     math.var(A)
   *     math.var(A, normalization)
   *
   * Examples:
   *
   *     math.var(2, 4, 6);                     // returns 4
   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667
   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5
   *     math.var([2, 4, 6, 8], 'biased');      // returns 4
   *
   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5
   *
   * See also:
   *
   *    mean, median, max, min, prod, std, sum
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @return {*} The variance
   */

  var variance = typed('variance', {
    // var([a, b, c, d, ...])
    'Array | Matrix': function ArrayMatrix(array) {
      return _var(array, DEFAULT_NORMALIZATION);
    },
    // var([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _var,
    // var(a, b, c, d, ...)
    '...': function _(args) {
      return _var(args, DEFAULT_NORMALIZATION);
    }
  });
  variance.toTex = '\\mathrm{Var}\\left(${args}\\right)';
  return variance;
  /**
   * Recursively calculate the variance of an n-dimensional array
   * @param {Array} array
   * @param {string} normalization
   *                        Determines how to normalize the variance:
   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
   *                        - 'uncorrected' The sum of squared errors is divided by n
   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
   * @return {number | BigNumber} variance
   * @private
   */

  function _var(array, normalization) {
    var sum = 0;
    var num = 0;

    if (array.length == 0) {
      throw new SyntaxError('Function var requires one or more parameters (0 provided)');
    } // calculate the mean and number of elements


    deepForEach(array, function (value) {
      sum = add(sum, value);
      num++;
    });
    if (num === 0) throw new Error('Cannot calculate var of an empty array');
    var mean = divide(sum, num); // calculate the variance

    sum = 0;
    deepForEach(array, function (value) {
      var diff = subtract(value, mean);
      sum = add(sum, multiply(diff, diff));
    });

    switch (normalization) {
      case 'uncorrected':
        return divide(sum, num);

      case 'biased':
        return divide(sum, num + 1);

      case 'unbiased':
        var zero = type.isBigNumber(sum) ? new type.BigNumber(0) : 0;
        return num == 1 ? zero : divide(sum, num - 1);

      default:
        throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
    }
  }
}

exports.name = 'var';
exports.factory = factory;

},{"../../utils/collection/deepForEach":218,"../arithmetic/addScalar":57,"../arithmetic/divideScalar":62,"../arithmetic/multiplyScalar":77,"../arithmetic/subtract":85}],143:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the inverse cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acos(x)
   *
   * Examples:
   *
   *    math.acos(0.5);           // returns number 1.0471975511965979
   *    math.acos(math.cos(1.5)); // returns number 1.5
   *
   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    cos, atan, asin
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
   */
  var acos = typed('acos', {
    'number': function number(x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.acos(x);
      } else {
        return new type.Complex(x, 0).acos();
      }
    },
    'Complex': function Complex(x) {
      return x.acos();
    },
    'BigNumber': function BigNumber(x) {
      return x.acos();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acos);
    }
  });
  acos.toTex = {
    1: '\\cos^{-1}\\left(${args[0]}\\right)'
  };
  return acos;
}

exports.name = 'acos';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],144:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic arccos of a value,
   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acosh(x)
   *
   * Examples:
   *
   *    math.acosh(1.5);       // returns 0.9624236501192069
   *
   * See also:
   *
   *    cosh, asinh, atanh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
   */
  var acosh = typed('acosh', {
    'number': function number(x) {
      if (x >= 1 || config.predictable) {
        return _acosh(x);
      }

      if (x <= -1) {
        return new type.Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
      }

      return new type.Complex(x, 0).acosh();
    },
    'Complex': function Complex(x) {
      return x.acosh();
    },
    'BigNumber': function BigNumber(x) {
      return x.acosh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acosh);
    }
  });
  acosh.toTex = {
    1: '\\cosh^{-1}\\left(${args[0]}\\right)'
  };
  return acosh;
}
/**
 * Calculate the hyperbolic arccos of a number
 * @param {number} x
 * @return {number}
 * @private
 */


var _acosh = Math.acosh || function (x) {
  return Math.log(Math.sqrt(x * x - 1) + x);
};

exports.name = 'acosh';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],145:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acot(x)
   *
   * Examples:
   *
   *    math.acot(0.5);           // returns number 0.4636476090008061
   *    math.acot(math.cot(1.5)); // returns number 1.5
   *
   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    cot, atan
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cotangent of x
   */
  var acot = typed('acot', {
    'number': function number(x) {
      return Math.atan(1 / x);
    },
    'Complex': function Complex(x) {
      return x.acot();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x).atan();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acot);
    }
  });
  acot.toTex = {
    1: '\\cot^{-1}\\left(${args[0]}\\right)'
  };
  return acot;
}

exports.name = 'acot';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],146:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic arccotangent of a value,
   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acoth(x)
   *
   * Examples:
   *
   *    math.acoth(0.5);       // returns 0.8047189562170503
   *
   * See also:
   *
   *    acsch, asech
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
   */
  var acoth = typed('acoth', {
    'number': function number(x) {
      if (x >= 1 || x <= -1 || config.predictable) {
        return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
      }

      return new type.Complex(x, 0).acoth();
    },
    'Complex': function Complex(x) {
      return x.acoth();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x).atanh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acoth);
    }
  });
  acoth.toTex = {
    1: '\\coth^{-1}\\left(${args[0]}\\right)'
  };
  return acoth;
}

exports.name = 'acoth';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],147:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsc(x)
   *
   * Examples:
   *
   *    math.acsc(0.5);           // returns number 0.5235987755982989
   *    math.acsc(math.csc(1.5)); // returns number ~1.5
   *
   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    csc, asin, asec
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cosecant of x
   */
  var acsc = typed('acsc', {
    'number': function number(x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return Math.asin(1 / x);
      }

      return new type.Complex(x, 0).acsc();
    },
    'Complex': function Complex(x) {
      return x.acsc();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x).asin();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acsc);
    }
  });
  acsc.toTex = {
    1: '\\csc^{-1}\\left(${args[0]}\\right)'
  };
  return acsc;
}

exports.name = 'acsc';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],148:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic arccosecant of a value,
   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsch(x)
   *
   * Examples:
   *
   *    math.acsch(0.5);       // returns 1.4436354751788103
   *
   * See also:
   *
   *    asech, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
   */
  var acsch = typed('acsch', {
    'number': function number(x) {
      x = 1 / x;
      return Math.log(x + Math.sqrt(x * x + 1));
    },
    'Complex': function Complex(x) {
      return x.acsch();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x).asinh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, acsch);
    }
  });
  acsch.toTex = {
    1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'
  };
  return acsch;
}

exports.name = 'acsch';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],149:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asec(x)
   *
   * Examples:
   *
   *    math.asec(0.5);           // returns 1.0471975511965979
   *    math.asec(math.sec(1.5)); // returns 1.5
   *
   *    math.asec(2);             // returns 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    acos, acot, acsc
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} The arc secant of x
   */
  var asec = typed('asec', {
    'number': function number(x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return Math.acos(1 / x);
      }

      return new type.Complex(x, 0).asec();
    },
    'Complex': function Complex(x) {
      return x.asec();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x).acos();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, asec);
    }
  });
  asec.toTex = {
    1: '\\sec^{-1}\\left(${args[0]}\\right)'
  };
  return asec;
}

exports.name = 'asec';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],150:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  var acosh = typed.find(load(require('./acosh')), ['Complex']);
  /**
   * Calculate the hyperbolic arcsecant of a value,
   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asech(x)
   *
   * Examples:
   *
   *    math.asech(0.5);       // returns 1.3169578969248166
   *
   * See also:
   *
   *    acsch, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
   */

  var asech = typed('asech', {
    'number': function number(x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        x = 1 / x;
        var ret = Math.sqrt(x * x - 1);

        if (x > 0 || config.predictable) {
          return Math.log(ret + x);
        }

        return new type.Complex(Math.log(ret - x), Math.PI);
      }

      return new type.Complex(x, 0).asech();
    },
    'Complex': function Complex(x) {
      return x.asech();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x).acosh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, asech);
    }
  });
  asech.toTex = {
    1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'
  };
  return asech;
}

exports.name = 'asech';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"./acosh":144}],151:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the inverse sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asin(x)
   *
   * Examples:
   *
   *    math.asin(0.5);           // returns number 0.5235987755982989
   *    math.asin(math.sin(1.5)); // returns number ~1.5
   *
   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    sin, atan, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
   */
  var asin = typed('asin', {
    'number': function number(x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.asin(x);
      } else {
        return new type.Complex(x, 0).asin();
      }
    },
    'Complex': function Complex(x) {
      return x.asin();
    },
    'BigNumber': function BigNumber(x) {
      return x.asin();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since asin(0) = 0
      return deepMap(x, asin, true);
    }
  });
  asin.toTex = {
    1: '\\sin^{-1}\\left(${args[0]}\\right)'
  };
  return asin;
}

exports.name = 'asin';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],152:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic arcsine of a value,
   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asinh(x)
   *
   * Examples:
   *
   *    math.asinh(0.5);       // returns 0.48121182505960347
   *
   * See also:
   *
   *    acosh, atanh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
   */
  var asinh = typed('asinh', {
    'number': Math.asinh || function (x) {
      return Math.log(Math.sqrt(x * x + 1) + x);
    },
    'Complex': function Complex(x) {
      return x.asinh();
    },
    'BigNumber': function BigNumber(x) {
      return x.asinh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since asinh(0) = 0
      return deepMap(x, asinh, true);
    }
  });
  asinh.toTex = {
    1: '\\sinh^{-1}\\left(${args[0]}\\right)'
  };
  return asinh;
}

exports.name = 'asinh';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],153:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the inverse tangent of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan(x)
   *
   * Examples:
   *
   *    math.atan(0.5);           // returns number 0.4636476090008061
   *    math.atan(math.tan(1.5)); // returns number 1.5
   *
   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, asin, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
   */
  var atan = typed('atan', {
    'number': function number(x) {
      return Math.atan(x);
    },
    'Complex': function Complex(x) {
      return x.atan();
    },
    'BigNumber': function BigNumber(x) {
      return x.atan();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since atan(0) = 0
      return deepMap(x, atan, true);
    }
  });
  atan.toTex = {
    1: '\\tan^{-1}\\left(${args[0]}\\right)'
  };
  return atan;
}

exports.name = 'atan';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],154:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var matrix = load(require('../../type/matrix/function/matrix'));
  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));
  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));
  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));
  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));
  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));
  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));
  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));
  /**
   * Calculate the inverse tangent function with two arguments, y/x.
   * By providing two arguments, the right quadrant of the computed angle can be
   * determined.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan2(y, x)
   *
   * Examples:
   *
   *    math.atan2(2, 2) / math.pi;       // returns number 0.25
   *
   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg
   *    var x = math.cos(angle);
   *    var y = math.sin(angle);
   *
   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, atan, sin, cos
   *
   * @param {number | Array | Matrix} y  Second dimension
   * @param {number | Array | Matrix} x  First dimension
   * @return {number | Array | Matrix} Four-quadrant inverse tangent
   */

  var atan2 = typed('atan2', {
    'number, number': Math.atan2,
    // Complex numbers doesn't seem to have a reasonable implementation of
    // atan2(). Even Matlab removed the support, after they only calculated
    // the atan only on base of the real part of the numbers and ignored the imaginary.
    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
      return type.BigNumber.atan2(y, x);
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // result
      var c; // process matrix storage

      switch (x.storage()) {
        case 'sparse':
          switch (y.storage()) {
            case 'sparse':
              // sparse .* sparse
              c = algorithm09(x, y, atan2, false);
              break;

            default:
              // sparse .* dense
              c = algorithm02(y, x, atan2, true);
              break;
          }

          break;

        default:
          switch (y.storage()) {
            case 'sparse':
              // dense .* sparse
              c = algorithm03(x, y, atan2, false);
              break;

            default:
              // dense .* dense
              c = algorithm13(x, y, atan2);
              break;
          }

          break;
      }

      return c;
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return atan2(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return atan2(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return atan2(x, matrix(y));
    },
    'Matrix, number | BigNumber': function MatrixNumberBigNumber(x, y) {
      // result
      var c; // check storage format

      switch (x.storage()) {
        case 'sparse':
          c = algorithm11(x, y, atan2, false);
          break;

        default:
          c = algorithm14(x, y, atan2, false);
          break;
      }

      return c;
    },
    'number | BigNumber, Matrix': function numberBigNumberMatrix(x, y) {
      // result
      var c; // check storage format

      switch (y.storage()) {
        case 'sparse':
          c = algorithm12(y, x, atan2, true);
          break;

        default:
          c = algorithm14(y, x, atan2, true);
          break;
      }

      return c;
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, atan2, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, atan2, true).valueOf();
    }
  });
  atan2.toTex = {
    2: '\\mathrm{atan2}\\left(${args}\\right)'
  };
  return atan2;
}

exports.name = 'atan2';
exports.factory = factory;

},{"../../type/matrix/function/matrix":195,"../../type/matrix/utils/algorithm02":199,"../../type/matrix/utils/algorithm03":200,"../../type/matrix/utils/algorithm09":205,"../../type/matrix/utils/algorithm11":207,"../../type/matrix/utils/algorithm12":208,"../../type/matrix/utils/algorithm13":209,"../../type/matrix/utils/algorithm14":210}],155:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic arctangent of a value,
   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atanh(x)
   *
   * Examples:
   *
   *    math.atanh(0.5);       // returns 0.5493061443340549
   *
   * See also:
   *
   *    acosh, asinh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
   */
  var atanh = typed('atanh', {
    'number': function number(x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        return _atanh(x);
      }

      return new type.Complex(x, 0).atanh();
    },
    'Complex': function Complex(x) {
      return x.atanh();
    },
    'BigNumber': function BigNumber(x) {
      return x.atanh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since atanh(0) = 0
      return deepMap(x, atanh, true);
    }
  });
  atanh.toTex = {
    1: '\\tanh^{-1}\\left(${args[0]}\\right)'
  };
  return atanh;
}
/**
 * Calculate the hyperbolic arctangent of a number
 * @param {number} x
 * @return {number}
 * @private
 */


var _atanh = Math.atanh || function (x) {
  return Math.log((1 + x) / (1 - x)) / 2;
};

exports.name = 'atanh';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],156:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cos(x)
   *
   * Examples:
   *
   *    math.cos(2);                      // returns number -0.4161468365471422
   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475
   *    math.cos(math.unit(180, 'deg'));  // returns number -1
   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5
   *
   *    var angle = 0.2;
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
   */
  var cos = typed('cos', {
    'number': Math.cos,
    'Complex': function Complex(x) {
      return x.cos();
    },
    'BigNumber': function BigNumber(x) {
      return x.cos();
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cos is no angle');
      }

      return cos(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, cos);
    }
  });
  cos.toTex = {
    1: '\\cos\\left(${args[0]}\\right)'
  };
  return cos;
}

exports.name = 'cos';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],157:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic cosine of a value,
   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cosh(x)
   *
   * Examples:
   *
   *    math.cosh(0.5);       // returns number 1.1276259652063807
   *
   * See also:
   *
   *    sinh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
   */
  var cosh = typed('cosh', {
    'number': _cosh,
    'Complex': function Complex(x) {
      return x.cosh();
    },
    'BigNumber': function BigNumber(x) {
      return x.cosh();
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cosh is no angle');
      }

      return cosh(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, cosh);
    }
  });
  cosh.toTex = {
    1: '\\cosh\\left(${args[0]}\\right)'
  };
  return cosh;
}
/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 * @private
 */


var _cosh = Math.cosh || function (x) {
  return (Math.exp(x) + Math.exp(-x)) / 2;
};

exports.name = 'cosh';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],158:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cot(x)
   *
   * Examples:
   *
   *    math.cot(2);      // returns number -0.45765755436028577
   *    1 / math.tan(2);  // returns number -0.45765755436028577
   *
   * See also:
   *
   *    tan, sec, csc
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cotangent of x
   */
  var cot = typed('cot', {
    'number': function number(x) {
      return 1 / Math.tan(x);
    },
    'Complex': function Complex(x) {
      return x.cot();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x.tan());
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cot is no angle');
      }

      return cot(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, cot);
    }
  });
  cot.toTex = {
    1: '\\cot\\left(${args[0]}\\right)'
  };
  return cot;
}

exports.name = 'cot';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],159:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic cotangent of a value,
   * defined as `coth(x) = 1 / tanh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.coth(x)
   *
   * Examples:
   *
   *    // coth(x) = 1 / tanh(x)
   *    math.coth(2);         // returns 1.0373147207275482
   *    1 / math.tanh(2);     // returns 1.0373147207275482
   *
   * See also:
   *
   *    sinh, tanh, cosh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
   */
  var coth = typed('coth', {
    'number': _coth,
    'Complex': function Complex(x) {
      return x.coth();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x.tanh());
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function coth is no angle');
      }

      return coth(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, coth);
    }
  });
  coth.toTex = {
    1: '\\coth\\left(${args[0]}\\right)'
  };
  return coth;
}
/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 * @private
 */


function _coth(x) {
  var e = Math.exp(2 * x);
  return (e + 1) / (e - 1);
}

exports.name = 'coth';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],160:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csc(x)
   *
   * Examples:
   *
   *    math.csc(2);      // returns number 1.099750170294617
   *    1 / math.sin(2);  // returns number 1.099750170294617
   *
   * See also:
   *
   *    sin, sec, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cosecant of x
   */
  var csc = typed('csc', {
    'number': function number(x) {
      return 1 / Math.sin(x);
    },
    'Complex': function Complex(x) {
      return x.csc();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x.sin());
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csc is no angle');
      }

      return csc(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, csc);
    }
  });
  csc.toTex = {
    1: '\\csc\\left(${args[0]}\\right)'
  };
  return csc;
}

exports.name = 'csc';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],161:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

var sign = require('../../utils/number').sign;

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic cosecant of a value,
   * defined as `csch(x) = 1 / sinh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csch(x)
   *
   * Examples:
   *
   *    // csch(x) = 1/ sinh(x)
   *    math.csch(0.5);       // returns 1.9190347513349437
   *    1 / math.sinh(0.5);   // returns 1.9190347513349437
   *
   * See also:
   *
   *    sinh, sech, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
   */
  var csch = typed('csch', {
    'number': _csch,
    'Complex': function Complex(x) {
      return x.csch();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x.sinh());
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csch is no angle');
      }

      return csch(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, csch);
    }
  });
  csch.toTex = {
    1: '\\mathrm{csch}\\left(${args[0]}\\right)'
  };
  return csch;
}
/**
 * Calculate the hyperbolic cosecant of a number
 * @param {number} x
 * @returns {number}
 * @private
 */


function _csch(x) {
  // consider values close to zero (+/-)
  if (x == 0) {
    return Number.POSITIVE_INFINITY;
  } else {
    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);
  }
}

exports.name = 'csch';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/number":229}],162:[function(require,module,exports){
"use strict";

module.exports = [require('./acos'), require('./acosh'), require('./acot'), require('./acoth'), require('./acsc'), require('./acsch'), require('./asec'), require('./asech'), require('./asin'), require('./asinh'), require('./atan'), require('./atan2'), require('./atanh'), require('./cos'), require('./cosh'), require('./cot'), require('./coth'), require('./csc'), require('./csch'), require('./sec'), require('./sech'), require('./sin'), require('./sinh'), require('./tan'), require('./tanh')];

},{"./acos":143,"./acosh":144,"./acot":145,"./acoth":146,"./acsc":147,"./acsch":148,"./asec":149,"./asech":150,"./asin":151,"./asinh":152,"./atan":153,"./atan2":154,"./atanh":155,"./cos":156,"./cosh":157,"./cot":158,"./coth":159,"./csc":160,"./csch":161,"./sec":163,"./sech":164,"./sin":165,"./sinh":166,"./tan":167,"./tanh":168}],163:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sec(x)
   *
   * Examples:
   *
   *    math.sec(2);      // returns number -2.4029979617223822
   *    1 / math.cos(2);  // returns number -2.4029979617223822
   *
   * See also:
   *
   *    cos, csc, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Secant of x
   */
  var sec = typed('sec', {
    'number': function number(x) {
      return 1 / Math.cos(x);
    },
    'Complex': function Complex(x) {
      return x.sec();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x.cos());
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sec is no angle');
      }

      return sec(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, sec);
    }
  });
  sec.toTex = {
    1: '\\sec\\left(${args[0]}\\right)'
  };
  return sec;
}

exports.name = 'sec';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],164:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic secant of a value,
   * defined as `sech(x) = 1 / cosh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sech(x)
   *
   * Examples:
   *
   *    // sech(x) = 1/ cosh(x)
   *    math.sech(0.5);       // returns 0.886818883970074
   *    1 / math.cosh(0.5);   // returns 0.886818883970074
   *
   * See also:
   *
   *    cosh, csch, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
   */
  var sech = typed('sech', {
    'number': _sech,
    'Complex': function Complex(x) {
      return x.sech();
    },
    'BigNumber': function BigNumber(x) {
      return new type.BigNumber(1).div(x.cosh());
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sech is no angle');
      }

      return sech(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, sech);
    }
  });
  sech.toTex = {
    1: '\\mathrm{sech}\\left(${args[0]}\\right)'
  };
  return sech;
}
/**
 * Calculate the hyperbolic secant of a number
 * @param {number} x
 * @returns {number}
 * @private
 */


function _sech(x) {
  return 2 / (Math.exp(x) + Math.exp(-x));
}

exports.name = 'sech';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],165:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sin(x)
   *
   * Examples:
   *
   *    math.sin(2);                      // returns number 0.9092974268256813
   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475
   *    math.sin(math.unit(90, 'deg'));   // returns number 1
   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5
   *
   *    var angle = 0.2;
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
   */
  var sin = typed('sin', {
    'number': Math.sin,
    'Complex': function Complex(x) {
      return x.sin();
    },
    'BigNumber': function BigNumber(x) {
      return x.sin();
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sin is no angle');
      }

      return sin(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sin(0) = 0
      return deepMap(x, sin, true);
    }
  });
  sin.toTex = {
    1: '\\sin\\left(${args[0]}\\right)'
  };
  return sin;
}

exports.name = 'sin';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],166:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic sine of a value,
   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sinh(x)
   *
   * Examples:
   *
   *    math.sinh(0.5);       // returns number 0.5210953054937474
   *
   * See also:
   *
   *    cosh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
   */
  var sinh = typed('sinh', {
    'number': _sinh,
    'Complex': function Complex(x) {
      return x.sinh();
    },
    'BigNumber': function BigNumber(x) {
      return x.sinh();
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sinh is no angle');
      }

      return sinh(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sinh(0) = 0
      return deepMap(x, sinh, true);
    }
  });
  sinh.toTex = {
    1: '\\sinh\\left(${args[0]}\\right)'
  };
  return sinh;
}
/**
 * Calculate the hyperbolic sine of a number
 * @param {number} x
 * @returns {number}
 * @private
 */


var _sinh = Math.sinh || function (x) {
  return (Math.exp(x) - Math.exp(-x)) / 2;
};

exports.name = 'sinh';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],167:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tan(x)
   *
   * Examples:
   *
   *    math.tan(0.5);                    // returns number 0.5463024898437905
   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905
   *    math.tan(math.pi / 4);            // returns number 1
   *    math.tan(math.unit(45, 'deg'));   // returns number 1
   *
   * See also:
   *
   *    atan, sin, cos
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
   */
  var tan = typed('tan', {
    'number': Math.tan,
    'Complex': function Complex(x) {
      return x.tan();
    },
    'BigNumber': function BigNumber(x) {
      return x.tan();
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tan is no angle');
      }

      return tan(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since tan(0) = 0
      return deepMap(x, tan, true);
    }
  });
  tan.toTex = {
    1: '\\tan\\left(${args[0]}\\right)'
  };
  return tan;
}

exports.name = 'tan';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],168:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Calculate the hyperbolic tangent of a value,
   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tanh(x)
   *
   * Examples:
   *
   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
   *    math.tanh(0.5);                   // returns 0.46211715726000974
   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974
   *    1 / math.coth(0.5);               // returns 0.46211715726000974
   *
   * See also:
   *
   *    sinh, cosh, coth
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
   */
  var tanh = typed('tanh', {
    'number': _tanh,
    'Complex': function Complex(x) {
      return x.tanh();
    },
    'BigNumber': function BigNumber(x) {
      return x.tanh();
    },
    'Unit': function Unit(x) {
      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tanh is no angle');
      }

      return tanh(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since tanh(0) = 0
      return deepMap(x, tanh, true);
    }
  });
  tanh.toTex = {
    1: '\\tanh\\left(${args[0]}\\right)'
  };
  return tanh;
}
/**
 * Calculate the hyperbolic tangent of a number
 * @param {number} x
 * @returns {number}
 * @private
 */


var _tanh = Math.tanh || function (x) {
  var e = Math.exp(2 * x);
  return (e - 1) / (e + 1);
};

exports.name = 'tanh';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],169:[function(require,module,exports){
'use strict';

var object = require('../../utils/object');

function factory(type, config, load, typed) {
  /**
   * Clone an object.
   *
   * Syntax:
   *
   *     math.clone(x)
   *
   * Examples:
   *
   *    math.clone(3.5);                   // returns number 3.5
   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i
   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg
   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]
   *    math.clone("hello world");         // returns string "hello world"
   *
   * @param {*} x   Object to be cloned
   * @return {*} A clone of object x
   */
  var clone = typed('clone', {
    'any': object.clone
  });
  clone.toTex = undefined; // use default template

  return clone;
}

exports.name = 'clone';
exports.factory = factory;

},{"../../utils/object":230}],170:[function(require,module,exports){
"use strict";

module.exports = [require('./clone'), require('./isInteger'), require('./isNegative'), require('./isNumeric'), require('./isPositive'), require('./isPrime'), require('./isZero'), require('./isNaN'), require('./typeof')];

},{"./clone":169,"./isInteger":171,"./isNaN":172,"./isNegative":173,"./isNumeric":174,"./isPositive":175,"./isPrime":176,"./isZero":177,"./typeof":178}],171:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

var number = require('../../utils/number');

function factory(type, config, load, typed) {
  /**
   * Test whether a value is an integer number.
   * The function supports `number`, `BigNumber`, and `Fraction`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isInteger(x)
   *
   * Examples:
   *
   *    math.isInteger(2);                     // returns true
   *    math.isInteger(0);                     // returns true
   *    math.isInteger(0.5);                   // returns false
   *    math.isInteger(math.bignumber(500));   // returns true
   *    math.isInteger(math.fraction(4));      // returns true
   *    math.isInteger('3');                   // returns true
   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]
   *    math.isInteger(math.complex('2-4i');   // throws an error
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isZero
   *
   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
   *                    Throws an error in case of an unknown data type.
   */
  var isInteger = typed('isInteger', {
    'number': number.isInteger,
    // TODO: what to do with isInteger(add(0.1, 0.2))  ?
    'BigNumber': function BigNumber(x) {
      return x.isInt();
    },
    'Fraction': function Fraction(x) {
      return x.d === 1 && isFinite(x.n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isInteger);
    }
  });
  return isInteger;
}

exports.name = 'isInteger';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/number":229}],172:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

var number = require('../../utils/number');

function factory(type, config, load, typed) {
  /**
   * Test whether a value is NaN (not a number).
   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNaN(x)
   *
   * Examples:
   *
   *    math.isNaN(3);                     // returns false
   *    math.isNaN(NaN);                   // returns true
   *    math.isNaN(0);                     // returns false
   *    math.isNaN(math.bignumber(NaN));   // returns true
   *    math.isNaN(math.bignumber(0));     // returns false
   *    math.isNaN(math.fraction(-2, 5));  // returns false
   *    math.isNaN('-2');                  // returns false
   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]
   *
   * See also:
   *
   *    isNumeric, isNegative, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is NaN.
   *                    Throws an error in case of an unknown data type.
   */
  var isNaN = typed('isNaN', {
    'number': function number(x) {
      return Number.isNaN(x);
    },
    'BigNumber': function BigNumber(x) {
      return x.isNaN();
    },
    'Fraction': function Fraction(x) {
      return false;
    },
    'Complex': function Complex(x) {
      return x.isNaN();
    },
    'Unit': function Unit(x) {
      return Number.isNaN(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, Number.isNaN);
    }
  });
  return isNaN;
}

exports.name = 'isNaN';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/number":229}],173:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

var number = require('../../utils/number');

function factory(type, config, load, typed) {
  /**
   * Test whether a value is negative: smaller than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNegative(x)
   *
   * Examples:
   *
   *    math.isNegative(3);                     // returns false
   *    math.isNegative(-2);                    // returns true
   *    math.isNegative(0);                     // returns false
   *    math.isNegative(-0);                    // returns false
   *    math.isNegative(math.bignumber(2));     // returns false
   *    math.isNegative(math.fraction(-2, 5));  // returns true
   *    math.isNegative('-2');                  // returns true
   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]
   *
   * See also:
   *
   *    isNumeric, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isNegative = typed('isNegative', {
    'number': function number(x) {
      return x < 0;
    },
    'BigNumber': function BigNumber(x) {
      return x.isNeg() && !x.isZero() && !x.isNaN();
    },
    'Fraction': function Fraction(x) {
      return x.s < 0; // It's enough to decide on the sign
    },
    'Unit': function Unit(x) {
      return isNegative(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isNegative);
    }
  });
  return isNegative;
}

exports.name = 'isNegative';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/number":229}],174:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

var number = require('../../utils/number');

function factory(type, config, load, typed) {
  /**
   * Test whether a value is an numeric value.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNumeric(x)
   *
   * Examples:
   *
   *    math.isNumeric(2);                     // returns true
   *    math.isNumeric(0);                     // returns true
   *    math.isNumeric(math.bignumber(500));   // returns true
   *    math.isNumeric(math.fraction(4));      // returns true
   *    math.isNumeric(math.complex('2-4i');   // returns false
   *    math.isNumeric('3');                   // returns false
   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, or `boolean`. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  var isNumeric = typed('isNumeric', {
    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
      return true;
    },
    'Complex | Unit | string': function ComplexUnitString() {
      return false;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isNumeric);
    }
  });
  return isNumeric;
}

exports.name = 'isNumeric';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/number":229}],175:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

var number = require('../../utils/number');

function factory(type, config, load, typed) {
  /**
   * Test whether a value is positive: larger than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPositive(x)
   *
   * Examples:
   *
   *    math.isPositive(3);                     // returns true
   *    math.isPositive(-2);                    // returns false
   *    math.isPositive(0);                     // returns false
   *    math.isPositive(-0);                    // returns false
   *    math.isPositive(0.5);                   // returns true
   *    math.isPositive(math.bignumber(2));     // returns true
   *    math.isPositive(math.fraction(-2, 5));  // returns false
   *    math.isPositive(math.fraction(1,3));    // returns false
   *    math.isPositive('2');                   // returns true
   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isPositive = typed('isPositive', {
    'number': function number(x) {
      return x > 0;
    },
    'BigNumber': function BigNumber(x) {
      return !x.isNeg() && !x.isZero() && !x.isNaN();
    },
    'Fraction': function Fraction(x) {
      return x.s > 0 && x.n > 0;
    },
    'Unit': function Unit(x) {
      return isPositive(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isPositive);
    }
  });
  return isPositive;
}

exports.name = 'isPositive';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/number":229}],176:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Test whether a value is prime: has no divisors other than itself and one.
   * The function supports type `number`, `bignumber`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPrime(x)
   *
   * Examples:
   *
   *    math.isPrime(3);                     // returns true
   *    math.isPrime(-2);                    // returns false
   *    math.isPrime(0);                     // returns false
   *    math.isPrime(-0);                    // returns false
   *    math.isPrime(0.5);                   // returns false
   *    math.isPrime('2');                   // returns true
   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isPrime = typed('isPrime', {
    'number': function number(x) {
      if (x < 2) {
        return false;
      }

      if (x == 2) {
        return true;
      }

      if (x % 2 == 0) {
        return false;
      }

      for (var i = 3; i * i <= x; i += 2) {
        if (x % i == 0) {
          return false;
        }
      }

      return true;
    },
    'BigNumber': function BigNumber(x) {
      if (x.lt(2)) {
        return false;
      }

      if (x.equals(2)) {
        return true;
      }

      if (x.mod(2).isZero()) {
        return false;
      }

      for (var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)) {
        if (x.mod(i).isZero()) {
          return false;
        }
      }

      return true;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isPrime);
    }
  });
  return isPrime;
}

exports.name = 'isPrime';
exports.factory = factory;

},{"../../utils/collection/deepMap":219}],177:[function(require,module,exports){
'use strict';

var deepMap = require('../../utils/collection/deepMap');

var number = require('../../utils/number');

function factory(type, config, load, typed) {
  /**
   * Test whether a value is zero.
   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
   * `Complex`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isZero(x)
   *
   * Examples:
   *
   *    math.isZero(0);                     // returns true
   *    math.isZero(2);                     // returns false
   *    math.isZero(0.5);                   // returns false
   *    math.isZero(math.bignumber(0));     // returns true
   *    math.isZero(math.fraction(0));      // returns true
   *    math.isZero(math.fraction(1,3));    // returns false
   *    math.isZero(math.complex('2 - 4i'); // returns false
   *    math.isZero(math.complex('0i');     // returns true
   *    math.isZero('0');                   // returns true
   *    math.isZero('2');                   // returns false
   *    math.isZero([2, 0, -3]');           // returns [false, true, false]
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isInteger
   *
   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
   * @return {boolean}  Returns true when `x` is zero.
   *                    Throws an error in case of an unknown data type.
   */
  var isZero = typed('isZero', {
    'number': function number(x) {
      return x === 0;
    },
    'BigNumber': function BigNumber(x) {
      return x.isZero();
    },
    'Complex': function Complex(x) {
      return x.re === 0 && x.im === 0;
    },
    'Fraction': function Fraction(x) {
      return x.d === 1 && x.n === 0;
    },
    'Unit': function Unit(x) {
      return isZero(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, isZero);
    }
  });
  return isZero;
}

exports.name = 'isZero';
exports.factory = factory;

},{"../../utils/collection/deepMap":219,"../../utils/number":229}],178:[function(require,module,exports){
'use strict';

var types = require('../../utils/types');

function factory(type, config, load, typed) {
  /**
   * Determine the type of a variable.
   *
   * Function `typeof` recognizes the following types of objects:
   *
   * Object                 | Returns       | Example
   * ---------------------- | ------------- | ------------------------------------------
   * null                   | `'null'`      | `math.typeof(null)`
   * number                 | `'number'`    | `math.typeof(3.5)`
   * boolean                | `'boolean'`   | `math.typeof (true)`
   * string                 | `'string'`    | `math.typeof ('hello world')`
   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`
   * Date                   | `'Date'`      | `math.typeof (new Date())`
   * Function               | `'Function'`  | `math.typeof (function () {})`
   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`
   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`
   * undefined              | `'undefined'` | `math.typeof(undefined)`
   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`
   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`
   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`
   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`
   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`
   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`
   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`
   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`
   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`
   *
   * Syntax:
   *
   *    math.typeof(x)
   *
   * Examples:
   *
   *    math.typeof(3.5);                     // returns 'number'
   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'
   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'
   *    math.typeof('hello world');           // returns 'string'
   *
   * @param {*} x     The variable for which to test the type.
   * @return {string} Returns the name of the type. Primitive types are lower case,
   *                  non-primitive types are upper-camel-case.
   *                  For example 'number', 'string', 'Array', 'Date'.
   */
  var _typeof = typed('_typeof', {
    'any': function any(x) {
      // JavaScript types
      var t = types.type(x); // math.js types

      if (t === 'Object') {
        if (type.isBigNumber(x)) return 'BigNumber';
        if (type.isComplex(x)) return 'Complex';
        if (type.isFraction(x)) return 'Fraction';
        if (type.isMatrix(x)) return 'Matrix';
        if (type.isUnit(x)) return 'Unit';
        if (type.isIndex(x)) return 'Index';
        if (type.isRange(x)) return 'Range';
        if (type.isChain(x)) return 'Chain';
        if (type.isHelp(x)) return 'Help';
      }

      return t;
    }
  });

  _typeof.toTex = undefined; // use default template

  return _typeof;
}

exports.name = 'typeof';
exports.factory = factory;

},{"../../utils/types":232}],179:[function(require,module,exports){
"use strict";

var Decimal = require('decimal.js/decimal.js'); // make sure to pick the es5 version


function factory(type, config, load, typed, math) {
  var BigNumber = Decimal.clone({
    precision: config.precision
  });
  /**
   * Attach type information
   */

  BigNumber.prototype.type = 'BigNumber';
  BigNumber.prototype.isBigNumber = true;
  /**
   * Get a JSON representation of a BigNumber containing
   * type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
   */

  BigNumber.prototype.toJSON = function () {
    return {
      mathjs: 'BigNumber',
      value: this.toString()
    };
  };
  /**
   * Instantiate a BigNumber from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
   * @return {BigNumber}
   */


  BigNumber.fromJSON = function (json) {
    return new BigNumber(json.value);
  }; // listen for changed in the configuration, automatically apply changed precision


  math.on('config', function (curr, prev) {
    if (curr.precision !== prev.precision) {
      BigNumber.config({
        precision: curr.precision
      });
    }
  });
  return BigNumber;
}

exports.name = 'BigNumber';
exports.path = 'type';
exports.factory = factory;
exports.math = true; // request access to the math namespace

},{"decimal.js/decimal.js":40}],180:[function(require,module,exports){
'use strict';

var deepMap = require('../../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Create a BigNumber, which can store numbers with arbitrary precision.
   * When a matrix is provided, all elements will be converted to BigNumber.
   *
   * Syntax:
   *
   *    math.bignumber(x)
   *
   * Examples:
   *
   *    0.1 + 0.2;                                  // returns number 0.30000000000000004
   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3
   *
   *
   *    7.2e500;                                    // returns number Infinity
   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500
   *
   * See also:
   *
   *    boolean, complex, index, matrix, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
   *                                                    0 by default.
   * @returns {BigNumber} The created bignumber
   */
  var bignumber = typed('bignumber', {
    '': function _() {
      return new type.BigNumber(0);
    },
    'number': function number(x) {
      // convert to string to prevent errors in case of >15 digits
      return new type.BigNumber(x + '');
    },
    'string': function string(x) {
      return new type.BigNumber(x);
    },
    'BigNumber': function BigNumber(x) {
      // we assume a BigNumber is immutable
      return x;
    },
    'Fraction': function Fraction(x) {
      return new type.BigNumber(x.n).div(x.d);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, bignumber);
    }
  });
  bignumber.toTex = {
    0: '0',
    1: '\\left(${args[0]}\\right)'
  };
  return bignumber;
}

exports.name = 'bignumber';
exports.factory = factory;

},{"../../../utils/collection/deepMap":219}],181:[function(require,module,exports){
"use strict";

module.exports = [// type
require('./BigNumber'), // construction function
require('./function/bignumber')];

},{"./BigNumber":179,"./function/bignumber":180}],182:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Complex = require('complex.js');

var format = require('../../utils/number').format;

var isNumber = require('../../utils/number').isNumber;

function factory(type, config, load, typed, math) {
  /**
   * Attach type information
   */
  Complex.prototype.type = 'Complex';
  Complex.prototype.isComplex = true;
  /**
   * Get a JSON representation of the complex number
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
   */

  Complex.prototype.toJSON = function () {
    return {
      mathjs: 'Complex',
      re: this.re,
      im: this.im
    };
  };
  /*
   * Return the value of the complex number in polar notation
   * The angle phi will be set in the interval of [-pi, pi].
   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
   */


  Complex.prototype.toPolar = function () {
    return {
      r: this.abs(),
      phi: this.arg()
    };
  };
  /**
   * Get a string representation of the complex number,
   * with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string} str
   */


  Complex.prototype.format = function (options) {
    var str = '';
    var im = this.im;
    var re = this.re;
    var strRe = format(this.re, options);
    var strIm = format(this.im, options); // round either re or im when smaller than the configured precision

    var precision = isNumber(options) ? options : options ? options.precision : null;

    if (precision !== null) {
      var epsilon = Math.pow(10, -precision);

      if (Math.abs(re / im) < epsilon) {
        re = 0;
      }

      if (Math.abs(im / re) < epsilon) {
        im = 0;
      }
    }

    if (im == 0) {
      // real value
      str = strRe;
    } else if (re == 0) {
      // purely complex value
      if (im == 1) {
        str = 'i';
      } else if (im == -1) {
        str = '-i';
      } else {
        str = strIm + 'i';
      }
    } else {
      // complex value
      if (im < 0) {
        if (im == -1) {
          str = strRe + ' - i';
        } else {
          str = strRe + ' - ' + strIm.substring(1) + 'i';
        }
      } else {
        if (im == 1) {
          str = strRe + ' + i';
        } else {
          str = strRe + ' + ' + strIm + 'i';
        }
      }
    }

    return str;
  };
  /**
   * Create a complex number from polar coordinates
   *
   * Usage:
   *
   *     Complex.fromPolar(r: number, phi: number) : Complex
   *     Complex.fromPolar({r: number, phi: number}) : Complex
   *
   * @param {*} args...
   * @return {Complex}
   */


  Complex.fromPolar = function (args) {
    switch (arguments.length) {
      case 1:
        var arg = arguments[0];

        if (_typeof(arg) === 'object') {
          return Complex(arg);
        }

        throw new TypeError('Input has to be an object with r and phi keys.');

      case 2:
        var r = arguments[0],
            phi = arguments[1];

        if (isNumber(r)) {
          if (type.isUnit(phi) && phi.hasBase('ANGLE')) {
            // convert unit to a number in radians
            phi = phi.toNumber('rad');
          }

          if (isNumber(phi)) {
            return new Complex({
              r: r,
              phi: phi
            });
          }

          throw new TypeError('Phi is not a number nor an angle unit.');
        } else {
          throw new TypeError('Radius r is not a number.');
        }

      default:
        throw new SyntaxError('Wrong number of arguments in function fromPolar');
    }
  };

  Complex.prototype.valueOf = Complex.prototype.toString;
  /**
   * Create a Complex number from a JSON object
   * @param {Object} json  A JSON Object structured as
   *                       {"mathjs": "Complex", "re": 2, "im": 3}
   *                       All properties are optional, default values
   *                       for `re` and `im` are 0.
   * @return {Complex} Returns a new Complex number
   */

  Complex.fromJSON = function (json) {
    return new Complex(json);
  }; // apply the current epsilon


  Complex.EPSILON = config.epsilon; // listen for changed in the configuration, automatically apply changed epsilon

  math.on('config', function (curr, prev) {
    if (curr.epsilon !== prev.epsilon) {
      Complex.EPSILON = curr.epsilon;
    }
  });
  /**
   * Compare two complex numbers, `a` and `b`:
   *
   * - Returns 1 when the real part of `a` is larger than the real part of `b`
   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
   * - Returns 1 when the real parts are equal
   *   and the imaginary part of `a` is larger than the imaginary part of `b`
   * - Returns -1 when the real parts are equal
   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
   * - Returns 0 when both real and imaginary parts are equal.
   *
   * @params {Complex} a
   * @params {Complex} b
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */

  Complex.compare = function (a, b) {
    if (a.re > b.re) {
      return 1;
    }

    if (a.re < b.re) {
      return -1;
    }

    if (a.im > b.im) {
      return 1;
    }

    if (a.im < b.im) {
      return -1;
    }

    return 0;
  };

  return Complex;
}

exports.name = 'Complex';
exports.path = 'type';
exports.factory = factory;
exports.math = true; // request access to the math namespace

},{"../../utils/number":229,"complex.js":39}],183:[function(require,module,exports){
'use strict';

var deepMap = require('../../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  var latex = require('../../../utils/latex');
  /**
   * Create a complex value or convert a value to a complex value.
   *
   * Syntax:
   *
   *     math.complex()                           // creates a complex value with zero
   *                                              // as real and imaginary part.
   *     math.complex(re : number, im : string)   // creates a complex value with provided
   *                                              // values for real and imaginary part.
   *     math.complex(re : number)                // creates a complex value with provided
   *                                              // real value and zero imaginary part.
   *     math.complex(complex : Complex)          // clones the provided complex value.
   *     math.complex(arg : string)               // parses a string into a complex value.
   *     math.complex(array : Array)              // converts the elements of the array
   *                                              // or matrix element wise into a
   *                                              // complex value.
   *     math.complex({re: number, im: number})   // creates a complex value with provided
   *                                              // values for real an imaginary part.
   *     math.complex({r: number, phi: number})   // creates a complex value with provided
   *                                              // polar coordinates
   *
   * Examples:
   *
   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i
   *    a.re = 5;                        // a = Complex 5 - 4i
   *    var i = a.im;                    // Number -4;
   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i
   *    var c = math.complex();          // Complex 0 + 0i
   *    var d = math.add(a, b);          // Complex 5 + 2i
   *
   * See also:
   *
   *    bignumber, boolean, index, matrix, number, string, unit
   *
   * @param {* | Array | Matrix} [args]
   *            Arguments specifying the real and imaginary part of the complex number
   * @return {Complex | Array | Matrix} Returns a complex value
   */


  var complex = typed('complex', {
    '': function _() {
      return type.Complex.ZERO;
    },
    'number': function number(x) {
      return new type.Complex(x, 0);
    },
    'number, number': function numberNumber(re, im) {
      return new type.Complex(re, im);
    },
    // TODO: this signature should be redundant
    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
      return new type.Complex(re.toNumber(), im.toNumber());
    },
    'Complex': function Complex(x) {
      return x.clone();
    },
    'string': function string(x) {
      return type.Complex(x); // for example '2 + 3i'
    },
    'Object': function Object(x) {
      if ('re' in x && 'im' in x) {
        return new type.Complex(x.re, x.im);
      }

      if ('r' in x && 'phi' in x) {
        return new type.Complex(x);
      }

      throw new Error('Expected object with either properties re and im, or properties r and phi.');
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, complex);
    }
  });
  complex.toTex = {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)+' + latex.symbols['i'] + '\\cdot\\left(${args[1]}\\right)\\right)'
  };
  return complex;
}

exports.name = 'complex';
exports.factory = factory;

},{"../../../utils/collection/deepMap":219,"../../../utils/latex":228}],184:[function(require,module,exports){
"use strict";

module.exports = [// type
require('./Complex'), // construction function
require('./function/complex')];

},{"./Complex":182,"./function/complex":183}],185:[function(require,module,exports){
'use strict';

var deepMap = require('../../../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Create a fraction convert a value to a fraction.
   *
   * Syntax:
   *     math.fraction(numerator, denominator)
   *     math.fraction({n: numerator, d: denominator})
   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
   *                                                   into fractions
   *
   * Examples:
   *
   *     math.fraction(1, 3);
   *     math.fraction('2/3');
   *     math.fraction({n: 2, d: 3});
   *     math.fraction([0.2, 0.25, 1.25]);
   *
   * See also:
   *
   *    bignumber, number, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
   *            Arguments specifying the numerator and denominator of
   *            the fraction
   * @return {Fraction | Array | Matrix} Returns a fraction
   */
  var fraction = typed('fraction', {
    'number': function number(x) {
      if (!isFinite(x) || isNaN(x)) {
        throw new Error(x + ' cannot be represented as a fraction');
      }

      return new type.Fraction(x);
    },
    'string': function string(x) {
      return new type.Fraction(x);
    },
    'number, number': function numberNumber(numerator, denominator) {
      return new type.Fraction(numerator, denominator);
    },
    'BigNumber': function BigNumber(x) {
      return new type.Fraction(x.toString());
    },
    'Fraction': function Fraction(x) {
      return x; // fractions are immutable
    },
    'Object': function Object(x) {
      return new type.Fraction(x);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, fraction);
    }
  });
  return fraction;
}

exports.name = 'fraction';
exports.factory = factory;

},{"../../../utils/collection/deepMap":219}],186:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');

var DimensionError = require('../../error/DimensionError');

var getSafeProperty = require('../../utils/customs').getSafeProperty;

var setSafeProperty = require('../../utils/customs').setSafeProperty;

var string = util.string;
var array = util.array;
var object = util.object;
var number = util.number;
var isArray = Array.isArray;
var isNumber = number.isNumber;
var isInteger = number.isInteger;
var isString = string.isString;
var validateIndex = array.validateIndex;

function factory(type, config, load, typed) {
  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)

  /**
   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
   * @class DenseMatrix
   */

  function DenseMatrix(data, datatype) {
    if (!(this instanceof DenseMatrix)) throw new SyntaxError('Constructor must be called with the new operator');
    if (datatype && !isString(datatype)) throw new Error('Invalid datatype: ' + datatype);

    if (type.isMatrix(data)) {
      // check data is a DenseMatrix
      if (data.type === 'DenseMatrix') {
        // clone data & size
        this._data = object.clone(data._data);
        this._size = object.clone(data._size);
        this._datatype = datatype || data._datatype;
      } else {
        // build data from existing matrix
        this._data = data.toArray();
        this._size = data.size();
        this._datatype = datatype || data._datatype;
      }
    } else if (data && isArray(data.data) && isArray(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    } else if (isArray(data)) {
      // replace nested Matrices with Arrays
      this._data = preprocess(data); // get the dimensions of the array

      this._size = array.size(this._data); // verify the dimensions of the array, TODO: compute size while processing array

      array.validate(this._data, this._size); // data type unknown

      this._datatype = datatype;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
    }
  }

  DenseMatrix.prototype = new Matrix();
  /**
   * Attach type information
   */

  DenseMatrix.prototype.type = 'DenseMatrix';
  DenseMatrix.prototype.isDenseMatrix = true;
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     var format = matrix.storage()                   // retrieve storage format
   *
   * @memberof DenseMatrix
   * @return {string}           The storage format.
   */

  DenseMatrix.prototype.storage = function () {
    return 'dense';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     var format = matrix.datatype()                   // retrieve matrix datatype
   *
   * @memberof DenseMatrix
   * @return {string}           The datatype.
   */


  DenseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new DenseMatrix
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */


  DenseMatrix.prototype.create = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof DenseMatrix
   * @param {Index} index
   * @param {Array | DenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    switch (arguments.length) {
      case 1:
        return _get(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _set(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Get a single element from the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  DenseMatrix.prototype.get = function (index) {
    if (!isArray(index)) throw new TypeError('Array expected');
    if (index.length != this._size.length) throw new DimensionError(index.length, this._size.length); // check index

    for (var x = 0; x < index.length; x++) {
      validateIndex(index[x], this._size[x]);
    }

    var data = this._data;

    for (var i = 0, ii = index.length; i < ii; i++) {
      var index_i = index[i];
      validateIndex(index_i, data.length);
      data = data[index_i];
    }

    return data;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {DenseMatrix} self
   */


  DenseMatrix.prototype.set = function (index, value, defaultValue) {
    if (!isArray(index)) throw new TypeError('Array expected');
    if (index.length < this._size.length) throw new DimensionError(index.length, this._size.length, '<');
    var i, ii, index_i; // enlarge matrix when needed

    var size = index.map(function (i) {
      return i + 1;
    });

    _fit(this, size, defaultValue); // traverse over the dimensions


    var data = this._data;

    for (i = 0, ii = index.length - 1; i < ii; i++) {
      index_i = index[i];
      validateIndex(index_i, data.length);
      data = data[index_i];
    } // set new value


    index_i = index[index.length - 1];
    validateIndex(index_i, data.length);
    data[index_i] = value;
    return this;
  };
  /**
   * Get a submatrix of this matrix
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index   Zero-based index
   * @private
   */


  function _get(matrix, index) {
    if (!type.isIndex(index)) {
      throw new TypeError('Invalid index');
    }

    var isScalar = index.isScalar();

    if (isScalar) {
      // return a scalar
      return matrix.get(index.min());
    } else {
      // validate dimensions
      var size = index.size();

      if (size.length != matrix._size.length) {
        throw new DimensionError(size.length, matrix._size.length);
      } // validate if any of the ranges in the index is out of range


      var min = index.min();
      var max = index.max();

      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
        validateIndex(min[i], matrix._size[i]);
        validateIndex(max[i], matrix._size[i]);
      } // retrieve submatrix
      // TODO: more efficient when creating an empty matrix and setting _data and _size manually


      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
    }
  }
  /**
   * Recursively get a submatrix of a multi dimensional matrix.
   * Index is not checked for correct number or length of dimensions.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {number} dims   Total number of dimensions
   * @param {number} dim    Current dimension
   * @return {Array} submatrix
   * @private
   */


  function _getSubmatrix(data, index, dims, dim) {
    var last = dim === dims - 1;
    var range = index.dimension(dim);

    if (last) {
      return range.map(function (i) {
        validateIndex(i, data.length);
        return data[i];
      }).valueOf();
    } else {
      return range.map(function (i) {
        validateIndex(i, data.length);
        var child = data[i];
        return _getSubmatrix(child, index, dims, dim + 1);
      }).valueOf();
    }
  }
  /**
   * Replace a submatrix in this matrix
   * Indexes are zero-based.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index
   * @param {DenseMatrix | Array | *} submatrix
   * @param {*} defaultValue          Default value, filled in on new entries when
   *                                  the matrix is resized.
   * @return {DenseMatrix} matrix
   * @private
   */


  function _set(matrix, index, submatrix, defaultValue) {
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value


    var iSize = index.size(),
        isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    var sSize;

    if (type.isMatrix(submatrix)) {
      sSize = submatrix.size();
      submatrix = submatrix.valueOf();
    } else {
      sSize = array.size(submatrix);
    }

    if (isScalar) {
      // set a scalar
      // check whether submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      }

      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // set a submatrix
      // validate dimensions
      if (iSize.length < matrix._size.length) {
        throw new DimensionError(iSize.length, matrix._size.length, '<');
      }

      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;

        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }

        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions


        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size


      if (!object.deepEqual(iSize, sSize)) {
        throw new DimensionError(iSize, sSize, '>');
      } // enlarge matrix when needed


      var size = index.max().map(function (i) {
        return i + 1;
      });

      _fit(matrix, size, defaultValue); // insert the sub matrix


      var dims = iSize.length,
          dim = 0;

      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
    }

    return matrix;
  }
  /**
   * Replace a submatrix of a multi dimensional matrix.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {Array} submatrix
   * @param {number} dims   Total number of dimensions
   * @param {number} dim
   * @private
   */


  function _setSubmatrix(data, index, submatrix, dims, dim) {
    var last = dim === dims - 1,
        range = index.dimension(dim);

    if (last) {
      range.forEach(function (dataIndex, subIndex) {
        validateIndex(dataIndex);
        data[dataIndex] = submatrix[subIndex[0]];
      });
    } else {
      range.forEach(function (dataIndex, subIndex) {
        validateIndex(dataIndex);

        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
      });
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!isArray(size)) throw new TypeError('Array expected'); // matrix to resize

    var m = copy ? this.clone() : this; // resize matrix

    return _resize(m, size, defaultValue);
  };

  var _resize = function _resize(matrix, size, defaultValue) {
    // check size
    if (size.length === 0) {
      // first value in matrix
      var v = matrix._data; // go deep

      while (isArray(v)) {
        v = v[0];
      }

      return v;
    } // resize matrix


    matrix._size = size.slice(0); // copy the array

    matrix._data = array.resize(matrix._data, matrix._size, defaultValue); // return matrix

    return matrix;
  };
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  DenseMatrix.prototype.reshape = function (size, copy) {
    var m = copy ? this.clone() : this;
    m._data = array.reshape(m._data, size);
    m._size = size.slice(0);
    return m;
  };
  /**
   * Enlarge the matrix when it is smaller than given size.
   * If the matrix is larger or equal sized, nothing is done.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix           The matrix to be resized
   * @param {number[]} size
   * @param {*} defaultValue          Default value, filled in on new entries.
   * @private
   */


  function _fit(matrix, size, defaultValue) {
    var newSize = matrix._size.slice(0),
        // copy the array
    changed = false; // add dimensions when needed


    while (newSize.length < size.length) {
      newSize.push(0);
      changed = true;
    } // enlarge size when needed


    for (var i = 0, ii = size.length; i < ii; i++) {
      if (size[i] > newSize[i]) {
        newSize[i] = size[i];
        changed = true;
      }
    }

    if (changed) {
      // resize only when size is changed
      _resize(matrix, newSize, defaultValue);
    }
  }
  /**
   * Create a clone of the matrix
   * @memberof DenseMatrix
   * @return {DenseMatrix} clone
   */


  DenseMatrix.prototype.clone = function () {
    var m = new DenseMatrix({
      data: object.clone(this._data),
      size: object.clone(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof DenseMatrix
   * @returns {number[]} size
   */


  DenseMatrix.prototype.size = function () {
    return this._size.slice(0); // return a clone of _size
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   *
   * @return {DenseMatrix} matrix
   */


  DenseMatrix.prototype.map = function (callback) {
    // matrix instance
    var me = this;

    var recurse = function recurse(value, index) {
      if (isArray(value)) {
        return value.map(function (child, i) {
          return recurse(child, index.concat(i));
        });
      } else {
        return callback(value, index, me);
      }
    }; // return dense format


    return new DenseMatrix({
      data: recurse(this._data, []),
      size: object.clone(this._size),
      datatype: this._datatype
    });
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */


  DenseMatrix.prototype.forEach = function (callback) {
    // matrix instance
    var me = this;

    var recurse = function recurse(value, index) {
      if (isArray(value)) {
        value.forEach(function (child, i) {
          recurse(child, index.concat(i));
        });
      } else {
        callback(value, index, me);
      }
    };

    recurse(this._data, []);
  };
  /**
   * Create an Array with a copy of the data of the DenseMatrix
   * @memberof DenseMatrix
   * @returns {Array} array
   */


  DenseMatrix.prototype.toArray = function () {
    return object.clone(this._data);
  };
  /**
   * Get the primitive value of the DenseMatrix: a multidimensional array
   * @memberof DenseMatrix
   * @returns {Array} array
   */


  DenseMatrix.prototype.valueOf = function () {
    return this._data;
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof DenseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  DenseMatrix.prototype.format = function (options) {
    return string.format(this._data, options);
  };
  /**
   * Get a string representation of the matrix
   * @memberof DenseMatrix
   * @returns {string} str
   */


  DenseMatrix.prototype.toString = function () {
    return string.format(this._data);
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof DenseMatrix
   * @returns {Object}
   */


  DenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'DenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof DenseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Array}                      The array vector with the diagonal values.
   */


  DenseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if (type.isBigNumber(k)) k = k.toNumber(); // is must be an integer

      if (!isNumber(k) || !isInteger(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // number diagonal values

    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix

    var data = []; // loop rows

    for (var i = 0; i < n; i++) {
      data[i] = this._data[i + kSub][i + kSuper];
    } // create DenseMatrix


    return new DenseMatrix({
      data: data,
      size: [n],
      datatype: this._datatype
    });
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof DenseMatrix
   * @param {Array} size                   The matrix size.
   * @param {number | Array} value          The values for the diagonal.
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]        The default value for non-diagonal
   *
   * @returns {DenseMatrix}
   */


  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
    if (!isArray(size)) throw new TypeError('Array expected, size parameter');
    if (size.length !== 2) throw new Error('Only two dimensions matrix are supported'); // map size & validate

    size = size.map(function (s) {
      // check it is a big number
      if (type.isBigNumber(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments


      if (!isNumber(s) || !isInteger(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }

      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if (type.isBigNumber(k)) k = k.toNumber(); // is must be an integer

      if (!isNumber(k) || !isInteger(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    if (defaultValue && isString(datatype)) {
      // convert defaultValue to the same datatype
      defaultValue = typed.convert(defaultValue, datatype);
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows and columns

    var rows = size[0];
    var columns = size[1]; // number of non-zero items

    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    var _value; // check value


    if (isArray(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value[i];
      };
    } else if (type.isMatrix(value)) {
      // matrix size
      var ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function _value() {
        // return value
        return value;
      };
    } // discover default value if needed


    if (!defaultValue) {
      // check first value in array
      defaultValue = type.isBigNumber(_value(0)) ? new type.BigNumber(0) : 0;
    } // empty array


    var data = []; // check we need to resize array

    if (size.length > 0) {
      // resize array
      data = array.resize(data, size, defaultValue); // fill diagonal

      for (var d = 0; d < n; d++) {
        data[d + kSub][d + kSuper] = _value(d);
      }
    } // create DenseMatrix


    return new DenseMatrix({
      data: data,
      size: [rows, columns]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof DenseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {DenseMatrix}
   */


  DenseMatrix.fromJSON = function (json) {
    return new DenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof DenseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  DenseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions


    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index


    validateIndex(i, this._size[0]);
    validateIndex(j, this._size[0]); // swap rows

    DenseMatrix._swapRows(i, j, this._data); // return current instance


    return this;
  };
  /**
   * Swap rows i and j in Dense Matrix data structure.
   *
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   */


  DenseMatrix._swapRows = function (i, j, data) {
    // swap values i <-> j
    var vi = data[i];
    data[i] = data[j];
    data[j] = vi;
  };
  /**
   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
   * Matrices. Replaces all nested Matrices with Arrays
   * @memberof DenseMatrix
   * @param {Array} data
   * @return {Array} data
   */


  function preprocess(data) {
    for (var i = 0, ii = data.length; i < ii; i++) {
      var elem = data[i];

      if (isArray(elem)) {
        data[i] = preprocess(elem);
      } else if (elem && elem.isMatrix === true) {
        data[i] = preprocess(elem.valueOf());
      }
    }

    return data;
  } // register this type in the base class Matrix


  type.Matrix._storage.dense = DenseMatrix;
  type.Matrix._storage['default'] = DenseMatrix; // exports

  return DenseMatrix;
}

exports.name = 'DenseMatrix';
exports.path = 'type';
exports.factory = factory;
exports.lazy = false; // no lazy loading, as we alter type.Matrix._storage

},{"../../error/DimensionError":53,"../../utils/customs":224,"../../utils/index":227,"./Matrix":189}],187:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var smaller = load(require('../../function/relational/smaller'));
  var larger = load(require('../../function/relational/larger'));
  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
  /**
   * Fibonacci Heap implementation, used interally for Matrix math.
   * @class FibonacciHeap
   * @constructor FibonacciHeap
   */

  function FibonacciHeap() {
    if (!(this instanceof FibonacciHeap)) throw new SyntaxError('Constructor must be called with the new operator'); // initialize fields

    this._minimum = null;
    this._size = 0;
  }
  /**
   * Attach type information
   */


  FibonacciHeap.prototype.type = 'FibonacciHeap';
  FibonacciHeap.prototype.isFibonacciHeap = true;
  /**
   * Inserts a new data element into the heap. No heap consolidation is
   * performed at this time, the new node is simply inserted into the root
   * list of this heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.insert = function (key, value) {
    // create node
    var node = {
      key: key,
      value: value,
      degree: 0
    }; // check we have a node in the minimum

    if (this._minimum) {
      // minimum node
      var minimum = this._minimum; // update left & right of node

      node.left = minimum;
      node.right = minimum.right;
      minimum.right = node;
      node.right.left = node; // update minimum node in heap if needed

      if (smaller(key, minimum.key)) {
        // node has a smaller key, use it as minimum
        this._minimum = node;
      }
    } else {
      // set left & right
      node.left = node;
      node.right = node; // this is the first node

      this._minimum = node;
    } // increment number of nodes in heap


    this._size++; // return node

    return node;
  };
  /**
   * Returns the number of nodes in heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.size = function () {
    return this._size;
  };
  /**
   * Removes all elements from this heap.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.clear = function () {
    this._minimum = null;
    this._size = 0;
  };
  /**
   * Returns true if the heap is empty, otherwise false.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.isEmpty = function () {
    return this._size === 0;
  };
  /**
   * Extracts the node with minimum key from heap. Amortized running 
   * time: O(log n).
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.extractMinimum = function () {
    // node to remove
    var node = this._minimum; // check we have a minimum

    if (node === null) return node; // current minimum

    var minimum = this._minimum; // get number of children

    var numberOfChildren = node.degree; // pointer to the first child

    var x = node.child; // for each child of node do...

    while (numberOfChildren > 0) {
      // store node in right side
      var tempRight = x.right; // remove x from child list

      x.left.right = x.right;
      x.right.left = x.left; // add x to root list of heap

      x.left = minimum;
      x.right = minimum.right;
      minimum.right = x;
      x.right.left = x; // set Parent[x] to null

      x.parent = null;
      x = tempRight;
      numberOfChildren--;
    } // remove node from root list of heap


    node.left.right = node.right;
    node.right.left = node.left; // update minimum

    if (node == node.right) {
      // empty
      minimum = null;
    } else {
      // update minimum
      minimum = node.right; // we need to update the pointer to the root with minimum key

      minimum = _findMinimumNode(minimum, this._size);
    } // decrement size of heap


    this._size--; // update minimum

    this._minimum = minimum; // return node

    return node;
  };
  /**
   * Removes a node from the heap given the reference to the node. The trees
   * in the heap will be consolidated, if necessary. This operation may fail
   * to remove the correct element if there are nodes with key value -Infinity.
   * Running time: O(log n) amortized.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.remove = function (node) {
    // decrease key value
    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest

    this.extractMinimum();
  };
  /**
   * Decreases the key value for a heap node, given the new value to take on.
   * The structure of the heap may be changed and will not be consolidated. 
   * Running time: O(1) amortized.
   * @memberof FibonacciHeap
   */


  var _decreaseKey = function _decreaseKey(minimum, node, key) {
    // set node key
    node.key = key; // get parent node

    var parent = node.parent;

    if (parent && smaller(node.key, parent.key)) {
      // remove node from parent
      _cut(minimum, node, parent); // remove all nodes from parent to the root parent


      _cascadingCut(minimum, parent);
    } // update minimum node if needed


    if (smaller(node.key, minimum.key)) minimum = node; // return minimum

    return minimum;
  };
  /**
   * The reverse of the link operation: removes node from the child list of parent.
   * This method assumes that min is non-null. Running time: O(1).
   * @memberof FibonacciHeap
   */


  var _cut = function _cut(minimum, node, parent) {
    // remove node from parent children and decrement Degree[parent]
    node.left.right = node.right;
    node.right.left = node.left;
    parent.degree--; // reset y.child if necessary

    if (parent.child == node) parent.child = node.right; // remove child if degree is 0

    if (parent.degree === 0) parent.child = null; // add node to root list of heap

    node.left = minimum;
    node.right = minimum.right;
    minimum.right = node;
    node.right.left = node; // set parent[node] to null

    node.parent = null; // set mark[node] to false

    node.mark = false;
  };
  /**
   * Performs a cascading cut operation. This cuts node from its parent and then
   * does the same for its parent, and so on up the tree.
   * Running time: O(log n); O(1) excluding the recursion.
   * @memberof FibonacciHeap
   */


  var _cascadingCut = function _cascadingCut(minimum, node) {
    // store parent node
    var parent = node.parent; // if there's a parent...

    if (!parent) return; // if node is unmarked, set it marked

    if (!node.mark) {
      node.mark = true;
    } else {
      // it's marked, cut it from parent
      _cut(minimum, node, parent); // cut its parent as well


      _cascadingCut(parent);
    }
  };
  /**
   * Make the first node a child of the second one. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */


  var _linkNodes = function _linkNodes(node, parent) {
    // remove node from root list of heap
    node.left.right = node.right;
    node.right.left = node.left; // make node a Child of parent

    node.parent = parent;

    if (!parent.child) {
      parent.child = node;
      node.right = node;
      node.left = node;
    } else {
      node.left = parent.child;
      node.right = parent.child.right;
      parent.child.right = node;
      node.right.left = node;
    } // increase degree[parent]


    parent.degree++; // set mark[node] false

    node.mark = false;
  };

  var _findMinimumNode = function _findMinimumNode(minimum, size) {
    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity

    var array = new Array(arraySize); // find the number of root nodes.

    var numRoots = 0;
    var x = minimum;

    if (x) {
      numRoots++;
      x = x.right;

      while (x !== minimum) {
        numRoots++;
        x = x.right;
      }
    } // vars


    var y; // For each node in root list do...

    while (numRoots > 0) {
      // access this node's degree..
      var d = x.degree; // get next node

      var next = x.right; // check if there is a node already in array with the same degree

      while (true) {
        // get node with the same degree is any
        y = array[d];
        if (!y) break; // make one node with the same degree a child of the other, do this based on the key value.

        if (larger(x.key, y.key)) {
          var temp = y;
          y = x;
          x = temp;
        } // make y a child of x


        _linkNodes(y, x); // we have handled this degree, go to next one.


        array[d] = null;
        d++;
      } // save this node for later when we might encounter another of the same degree.


      array[d] = x; // move forward through list.

      x = next;
      numRoots--;
    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].


    minimum = null; // loop nodes in array

    for (var i = 0; i < arraySize; i++) {
      // get current node
      y = array[i];
      if (!y) continue; // check if we have a linked list

      if (minimum) {
        // First remove node from root list.
        y.left.right = y.right;
        y.right.left = y.left; // now add to root list, again.

        y.left = minimum;
        y.right = minimum.right;
        minimum.right = y;
        y.right.left = y; // check if this is a new min.

        if (smaller(y.key, minimum.key)) minimum = y;
      } else minimum = y;
    }

    return minimum;
  };

  return FibonacciHeap;
}

exports.name = 'FibonacciHeap';
exports.path = 'type';
exports.factory = factory;

},{"../../function/relational/larger":129,"../../function/relational/smaller":130}],188:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');

var string = util.string;
var object = util.object;
var isArray = Array.isArray;
var isString = string.isString;

function factory(type, config, load) {
  var DenseMatrix = load(require('./DenseMatrix'));
  var smaller = load(require('../../function/relational/smaller'));

  function ImmutableDenseMatrix(data, datatype) {
    if (!(this instanceof ImmutableDenseMatrix)) throw new SyntaxError('Constructor must be called with the new operator');
    if (datatype && !isString(datatype)) throw new Error('Invalid datatype: ' + datatype);

    if (type.isMatrix(data) || isArray(data)) {
      // use DenseMatrix implementation
      var matrix = new DenseMatrix(data, datatype); // internal structures

      this._data = matrix._data;
      this._size = matrix._size;
      this._datatype = matrix._datatype;
      this._min = null;
      this._max = null;
    } else if (data && isArray(data.data) && isArray(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = data.datatype;
      this._min = typeof data.min !== 'undefined' ? data.min : null;
      this._max = typeof data.max !== 'undefined' ? data.max : null;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
      this._min = null;
      this._max = null;
    }
  }

  ImmutableDenseMatrix.prototype = new DenseMatrix();
  /**
   * Attach type information
   */

  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | ImmutableDenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */

  ImmutableDenseMatrix.prototype.subset = function (index) {
    switch (arguments.length) {
      case 1:
        // use base implementation
        var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix

        if (type.isMatrix(m)) {
          // return immutable matrix
          return new ImmutableDenseMatrix({
            data: m._data,
            size: m._size,
            datatype: m._datatype
          });
        }

        return m;
      // intentional fall through

      case 2:
      case 3:
        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Replace a single element in the matrix.
   * @param {Number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {ImmutableDenseMatrix} self
   */


  ImmutableDenseMatrix.prototype.set = function () {
    throw new Error('Cannot invoke set on an Immutable Matrix instance');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {Number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  ImmutableDenseMatrix.prototype.resize = function () {
    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
  };
  /**
   * Disallows reshaping in favor of immutability.
   *
   * @throws {Error} Operation not allowed
   */


  ImmutableDenseMatrix.prototype.reshape = function () {
    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
  };
  /**
   * Create a clone of the matrix
   * @return {ImmutableDenseMatrix} clone
   */


  ImmutableDenseMatrix.prototype.clone = function () {
    var m = new ImmutableDenseMatrix({
      data: object.clone(this._data),
      size: object.clone(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Get a JSON representation of the matrix
   * @returns {Object}
   */


  ImmutableDenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'ImmutableDenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Generate a matrix from a JSON object
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {ImmutableDenseMatrix}
   */


  ImmutableDenseMatrix.fromJSON = function (json) {
    return new ImmutableDenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @param {Number} i       Matrix row index 1
   * @param {Number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  ImmutableDenseMatrix.prototype.swapRows = function () {
    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
  };
  /**
   * Calculate the minimum value in the set
   * @return {Number | undefined} min
   */


  ImmutableDenseMatrix.prototype.min = function () {
    // check min has been calculated before
    if (this._min === null) {
      // minimum
      var m = null; // compute min

      this.forEach(function (v) {
        if (m === null || smaller(v, m)) m = v;
      });
      this._min = m !== null ? m : undefined;
    }

    return this._min;
  };
  /**
   * Calculate the maximum value in the set
   * @return {Number | undefined} max
   */


  ImmutableDenseMatrix.prototype.max = function () {
    // check max has been calculated before
    if (this._max === null) {
      // maximum
      var m = null; // compute max

      this.forEach(function (v) {
        if (m === null || smaller(m, v)) m = v;
      });
      this._max = m !== null ? m : undefined;
    }

    return this._max;
  }; // exports


  return ImmutableDenseMatrix;
}

exports.name = 'ImmutableDenseMatrix';
exports.path = 'type';
exports.factory = factory;

},{"../../function/relational/smaller":130,"../../utils/index":227,"./DenseMatrix":186}],189:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');

var string = util.string;
var isString = string.isString;

function factory(type, config, load, typed) {
  /**
   * @constructor Matrix
   *
   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
   * array. A matrix can be constructed as:
   *     var matrix = math.matrix(data)
   *
   * Matrix contains the functions to resize, get and set values, get the size,
   * clone the matrix and to convert the matrix to a vector, array, or scalar.
   * Furthermore, one can iterate over the matrix using map and forEach.
   * The internal Array of the Matrix can be accessed using the function valueOf.
   *
   * Example usage:
   *     var matrix = math.matrix([[1, 2], [3, 4]]);
   *     matix.size();              // [2, 2]
   *     matrix.resize([3, 2], 5);
   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]
   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
   *
   */
  function Matrix() {
    if (!(this instanceof Matrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Attach type information
   */


  Matrix.prototype.type = 'Matrix';
  Matrix.prototype.isMatrix = true;
  /**
   * Get the Matrix storage constructor for the given format.
   *
   * @param {string} format       The Matrix storage format.
   *
   * @return {Function}           The Matrix storage constructor.
   */

  Matrix.storage = function (format) {
    // check storage format is a string
    if (!isString(format)) {
      throw new TypeError('format must be a string value');
    } // get storage format constructor


    var constructor = Matrix._storage[format];

    if (!constructor) {
      throw new SyntaxError('Unsupported matrix storage format: ' + format);
    } // return storage constructor


    return constructor;
  }; // a map with all constructors for all storage types


  Matrix._storage = {};
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     var format = matrix.storage()                   // retrieve storage format
   *
   * @return {string}           The storage format.
   */

  Matrix.prototype.storage = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke storage on a Matrix interface');
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     var format = matrix.datatype()                   // retrieve matrix datatype
   *
   * @return {string}           The datatype.
   */


  Matrix.prototype.datatype = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke datatype on a Matrix interface');
  };
  /**
   * Create a new Matrix With the type of the current matrix instance
   * @param {Array | Object} data
   * @param {string} [datatype]
   */


  Matrix.prototype.create = function (data, datatype) {
    throw new Error('Cannot invoke create on a Matrix interface');
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  Matrix.prototype.subset = function (index, replacement, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke subset on a Matrix interface');
  };
  /**
   * Get a single element from the matrix.
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  Matrix.prototype.get = function (index) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke get on a Matrix interface');
  };
  /**
   * Replace a single element in the matrix.
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {Matrix} self
   */


  Matrix.prototype.set = function (index, value, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke set on a Matrix interface');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when 
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  Matrix.prototype.resize = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke resize on a Matrix interface');
  };
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  Matrix.prototype.reshape = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke reshape on a Matrix interface');
  };
  /**
   * Create a clone of the matrix
   * @return {Matrix} clone
   */


  Matrix.prototype.clone = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke clone on a Matrix interface');
  };
  /**
   * Retrieve the size of the matrix.
   * @returns {number[]} size
   */


  Matrix.prototype.size = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke size on a Matrix interface');
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {Matrix} matrix
   */


  Matrix.prototype.map = function (callback, skipZeros) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke map on a Matrix interface');
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */


  Matrix.prototype.forEach = function (callback) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke forEach on a Matrix interface');
  };
  /**
   * Create an Array with a copy of the data of the Matrix
   * @returns {Array} array
   */


  Matrix.prototype.toArray = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toArray on a Matrix interface');
  };
  /**
   * Get the primitive value of the Matrix: a multidimensional array
   * @returns {Array} array
   */


  Matrix.prototype.valueOf = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke valueOf on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  Matrix.prototype.format = function (options) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke format on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix
   * @returns {string} str
   */


  Matrix.prototype.toString = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toString on a Matrix interface');
  }; // exports


  return Matrix;
}

exports.name = 'Matrix';
exports.path = 'type';
exports.factory = factory;

},{"../../utils/index":227}],190:[function(require,module,exports){
'use strict';

var clone = require('../../utils/object').clone;

var isInteger = require('../../utils/number').isInteger;

function factory(type) {
  /**
   * Create an index. An Index can store ranges and sets for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Usage:
   *     var index = new Index(range1, range2, matrix1, array1, ...);
   *
   * Where each parameter can be any of:
   *     A number
   *     A string (containing a name of an object property)
   *     An instance of Range
   *     An Array with the Set values
   *     A Matrix with the Set values
   *
   * The parameters start, end, and step must be integer numbers.
   *
   * @class Index
   * @Constructor Index
   * @param {...*} ranges
   */
  function Index(ranges) {
    if (!(this instanceof Index)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this._dimensions = [];
    this._isScalar = true;

    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i];

      if (type.isRange(arg)) {
        this._dimensions.push(arg);

        this._isScalar = false;
      } else if (Array.isArray(arg) || type.isMatrix(arg)) {
        // create matrix
        var m = _createImmutableMatrix(arg.valueOf());

        this._dimensions.push(m); // size


        var size = m.size(); // scalar

        if (size.length !== 1 || size[0] !== 1) {
          this._isScalar = false;
        }
      } else if (typeof arg === 'number') {
        this._dimensions.push(_createImmutableMatrix([arg]));
      } else if (typeof arg === 'string') {
        // object property (arguments.count should be 1)
        this._dimensions.push(arg);
      } // TODO: implement support for wildcard '*'
      else {
          throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
        }
    }
  }
  /**
   * Attach type information
   */


  Index.prototype.type = 'Index';
  Index.prototype.isIndex = true;

  function _createImmutableMatrix(arg) {
    // loop array elements
    for (var i = 0, l = arg.length; i < l; i++) {
      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {
        throw new TypeError('Index parameters must be positive integer numbers');
      }
    } // create matrix


    return new type.ImmutableDenseMatrix(arg);
  }
  /**
   * Create a clone of the index
   * @memberof Index
   * @return {Index} clone
   */


  Index.prototype.clone = function () {
    var index = new Index();
    index._dimensions = clone(this._dimensions);
    index._isScalar = this._isScalar;
    return index;
  };
  /**
   * Create an index from an array with ranges/numbers
   * @memberof Index
   * @param {Array.<Array | number>} ranges
   * @return {Index} index
   * @private
   */


  Index.create = function (ranges) {
    var index = new Index();
    Index.apply(index, ranges);
    return index;
  };
  /**
   * Retrieve the size of the index, the number of elements for each dimension.
   * @memberof Index
   * @returns {number[]} size
   */


  Index.prototype.size = function () {
    var size = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var d = this._dimensions[i];
      size[i] = typeof d === 'string' ? 1 : d.size()[0];
    }

    return size;
  };
  /**
   * Get the maximum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} max
   */


  Index.prototype.max = function () {
    var values = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.max();
    }

    return values;
  };
  /**
   * Get the minimum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} min
   */


  Index.prototype.min = function () {
    var values = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.min();
    }

    return values;
  };
  /**
   * Loop over each of the ranges of the index
   * @memberof Index
   * @param {Function} callback   Called for each range with a Range as first
   *                              argument, the dimension as second, and the
   *                              index object as third.
   */


  Index.prototype.forEach = function (callback) {
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      callback(this._dimensions[i], i, this);
    }
  };
  /**
   * Retrieve the dimension for the given index
   * @memberof Index
   * @param {Number} dim                  Number of the dimension
   * @returns {Range | null} range
   */


  Index.prototype.dimension = function (dim) {
    return this._dimensions[dim] || null;
  };
  /**
   * Test whether this index contains an object property
   * @returns {boolean} Returns true if the index is an object property
   */


  Index.prototype.isObjectProperty = function () {
    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
  };
  /**
   * Returns the object property name when the Index holds a single object property,
   * else returns null
   * @returns {string | null}
   */


  Index.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this._dimensions[0] : null;
  };
  /**
   * Test whether this index contains only a single value.
   *
   * This is the case when the index is created with only scalar values as ranges,
   * not for ranges resolving into a single value.
   * @memberof Index
   * @return {boolean} isScalar
   */


  Index.prototype.isScalar = function () {
    return this._isScalar;
  };
  /**
   * Expand the Index into an array.
   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
   * @memberof Index
   * @returns {Array} array
   */


  Index.prototype.toArray = function () {
    var array = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];
      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
    }

    return array;
  };
  /**
   * Get the primitive value of the Index, a two dimensional array.
   * Equivalent to Index.toArray().
   * @memberof Index
   * @returns {Array} array
   */


  Index.prototype.valueOf = Index.prototype.toArray;
  /**
   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
   * @memberof Index
   * @returns {String} str
   */

  Index.prototype.toString = function () {
    var strings = [];

    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];

      if (typeof dimension === 'string') {
        strings.push(JSON.stringify(dimension));
      } else {
        strings.push(dimension.toString());
      }
    }

    return '[' + strings.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the Index
   * @memberof Index
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   */


  Index.prototype.toJSON = function () {
    return {
      mathjs: 'Index',
      dimensions: this._dimensions
    };
  };
  /**
   * Instantiate an Index from a JSON object
   * @memberof Index
   * @param {Object} json A JSON object structured as:
   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   * @return {Index}
   */


  Index.fromJSON = function (json) {
    return Index.create(json.dimensions);
  };

  return Index;
}

exports.name = 'Index';
exports.path = 'type';
exports.factory = factory;

},{"../../utils/number":229,"../../utils/object":230}],191:[function(require,module,exports){
'use strict';

var number = require('../../utils/number');

function factory(type, config, load, typed) {
  /**
   * Create a range. A range has a start, step, and end, and contains functions
   * to iterate over the range.
   *
   * A range can be constructed as:
   *     var range = new Range(start, end);
   *     var range = new Range(start, end, step);
   *
   * To get the result of the range:
   *     range.forEach(function (x) {
   *         console.log(x);
   *     });
   *     range.map(function (x) {
   *         return math.sin(x);
   *     });
   *     range.toArray();
   *
   * Example usage:
   *     var c = new Range(2, 6);         // 2:1:5
   *     c.toArray();                     // [2, 3, 4, 5]
   *     var d = new Range(2, -3, -1);    // 2:-1:-2
   *     d.toArray();                     // [2, 1, 0, -1, -2]
   *
   * @class Range
   * @constructor Range
   * @param {number} start  included lower bound
   * @param {number} end    excluded upper bound
   * @param {number} [step] step size, default value is 1
   */
  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (start != null) {
      if (type.isBigNumber(start)) start = start.toNumber();else if (typeof start !== 'number') throw new TypeError('Parameter start must be a number');
    }

    if (end != null) {
      if (type.isBigNumber(end)) end = end.toNumber();else if (typeof end !== 'number') throw new TypeError('Parameter end must be a number');
    }

    if (step != null) {
      if (type.isBigNumber(step)) step = step.toNumber();else if (typeof step !== 'number') throw new TypeError('Parameter step must be a number');
    }

    this.start = start != null ? parseFloat(start) : 0;
    this.end = end != null ? parseFloat(end) : 0;
    this.step = step != null ? parseFloat(step) : 1;
  }
  /**
   * Attach type information
   */


  Range.prototype.type = 'Range';
  Range.prototype.isRange = true;
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @memberof Range
   * @param {string} str
   * @return {Range | null} range
   */

  Range.parse = function (str) {
    if (typeof str !== 'string') {
      return null;
    }

    var args = str.split(':');
    var nums = args.map(function (arg) {
      return parseFloat(arg);
    });
    var invalid = nums.some(function (num) {
      return isNaN(num);
    });

    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return new Range(nums[0], nums[1]);

      case 3:
        return new Range(nums[0], nums[2], nums[1]);

      default:
        return null;
    }
  };
  /**
   * Create a clone of the range
   * @return {Range} clone
   */


  Range.prototype.clone = function () {
    return new Range(this.start, this.end, this.step);
  };
  /**
   * Retrieve the size of the range.
   * Returns an array containing one number, the number of elements in the range.
   * @memberof Range
   * @returns {number[]} size
   */


  Range.prototype.size = function () {
    var len = 0,
        start = this.start,
        step = this.step,
        end = this.end,
        diff = end - start;

    if (number.sign(step) == number.sign(diff)) {
      len = Math.ceil(diff / step);
    } else if (diff == 0) {
      len = 0;
    }

    if (isNaN(len)) {
      len = 0;
    }

    return [len];
  };
  /**
   * Calculate the minimum value in the range
   * @memberof Range
   * @return {number | undefined} min
   */


  Range.prototype.min = function () {
    var size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start;
      } else {
        // negative step
        return this.start + (size - 1) * this.step;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Calculate the maximum value in the range
   * @memberof Range
   * @return {number | undefined} max
   */


  Range.prototype.max = function () {
    var size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start + (size - 1) * this.step;
      } else {
        // negative step
        return this.start;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Execute a callback function for each value in the range.
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Range being traversed.
   */


  Range.prototype.forEach = function (callback) {
    var x = this.start;
    var step = this.step;
    var end = this.end;
    var i = 0;

    if (step > 0) {
      while (x < end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    } else if (step < 0) {
      while (x > end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    }
  };
  /**
   * Execute a callback function for each value in the Range, and return the
   * results as an array
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @returns {Array} array
   */


  Range.prototype.map = function (callback) {
    var array = [];
    this.forEach(function (value, index, obj) {
      array[index[0]] = callback(value, index, obj);
    });
    return array;
  };
  /**
   * Create an Array with a copy of the Ranges data
   * @memberof Range
   * @returns {Array} array
   */


  Range.prototype.toArray = function () {
    var array = [];
    this.forEach(function (value, index) {
      array[index[0]] = value;
    });
    return array;
  };
  /**
   * Get the primitive value of the Range, a one dimensional array
   * @memberof Range
   * @returns {Array} array
   */


  Range.prototype.valueOf = function () {
    // TODO: implement a caching mechanism for range.valueOf()
    return this.toArray();
  };
  /**
   * Get a string representation of the range, with optional formatting options.
   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
   * @memberof Range
   * @param {Object | number | function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  Range.prototype.format = function (options) {
    var str = number.format(this.start, options);

    if (this.step != 1) {
      str += ':' + number.format(this.step, options);
    }

    str += ':' + number.format(this.end, options);
    return str;
  };
  /**
   * Get a string representation of the range.
   * @memberof Range
   * @returns {string}
   */


  Range.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the range
   * @memberof Range
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   */


  Range.prototype.toJSON = function () {
    return {
      mathjs: 'Range',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate a Range from a JSON object
   * @memberof Range
   * @param {Object} json A JSON object structured as:
   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   * @return {Range}
   */


  Range.fromJSON = function (json) {
    return new Range(json.start, json.end, json.step);
  };

  return Range;
}

exports.name = 'Range';
exports.path = 'type';
exports.factory = factory;

},{"../../utils/number":229}],192:[function(require,module,exports){
'use strict';

function factory(type, config, load) {
  var add = load(require('../../function/arithmetic/add'));
  var equalScalar = load(require('../../function/relational/equalScalar'));
  /**
   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array 
   * of the vector elements and an ordered list of non-zero elements.
   */

  function Spa() {
    if (!(this instanceof Spa)) throw new SyntaxError('Constructor must be called with the new operator'); // allocate vector, TODO use typed arrays

    this._values = [];
    this._heap = new type.FibonacciHeap();
  }
  /**
   * Attach type information
   */


  Spa.prototype.type = 'Spa';
  Spa.prototype.isSpa = true;
  /**
   * Set the value for index i.
   *
   * @param {number} i                       The index
   * @param {number | BigNumber | Complex}   The value at index i
   */

  Spa.prototype.set = function (i, v) {
    // check we have a value @ i
    if (!this._values[i]) {
      // insert in heap
      var node = this._heap.insert(i, v); // set the value @ i


      this._values[i] = node;
    } else {
      // update the value @ i
      this._values[i].value = v;
    }
  };

  Spa.prototype.get = function (i) {
    var node = this._values[i];
    if (node) return node.value;
    return 0;
  };

  Spa.prototype.accumulate = function (i, v) {
    // node @ i
    var node = this._values[i];

    if (!node) {
      // insert in heap
      node = this._heap.insert(i, v); // initialize value

      this._values[i] = node;
    } else {
      // accumulate value
      node.value = add(node.value, v);
    }
  };

  Spa.prototype.forEach = function (from, to, callback) {
    // references
    var heap = this._heap;
    var values = this._values; // nodes

    var nodes = []; // node with minimum key, save it

    var node = heap.extractMinimum();
    if (node) nodes.push(node); // extract nodes from heap (ordered)

    while (node && node.key <= to) {
      // check it is in range
      if (node.key >= from) {
        // check value is not zero
        if (!equalScalar(node.value, 0)) {
          // invoke callback
          callback(node.key, node.value, this);
        }
      } // extract next node, save it


      node = heap.extractMinimum();
      if (node) nodes.push(node);
    } // reinsert all nodes in heap


    for (var i = 0; i < nodes.length; i++) {
      // current node
      var n = nodes[i]; // insert node in heap

      node = heap.insert(n.key, n.value); // update values

      values[node.key] = node;
    }
  };

  Spa.prototype.swap = function (i, j) {
    // node @ i and j
    var nodei = this._values[i];
    var nodej = this._values[j]; // check we need to insert indeces

    if (!nodei && nodej) {
      // insert in heap
      nodei = this._heap.insert(i, nodej.value); // remove from heap

      this._heap.remove(nodej); // set values


      this._values[i] = nodei;
      this._values[j] = undefined;
    } else if (nodei && !nodej) {
      // insert in heap
      nodej = this._heap.insert(j, nodei.value); // remove from heap

      this._heap.remove(nodei); // set values


      this._values[j] = nodej;
      this._values[i] = undefined;
    } else if (nodei && nodej) {
      // swap values
      var v = nodei.value;
      nodei.value = nodej.value;
      nodej.value = v;
    }
  };

  return Spa;
}

exports.name = 'Spa';
exports.path = 'type';
exports.factory = factory;

},{"../../function/arithmetic/add":56,"../../function/relational/equalScalar":128}],193:[function(require,module,exports){
'use strict';

var util = require('../../utils/index');

var DimensionError = require('../../error/DimensionError');

var array = util.array;
var object = util.object;
var string = util.string;
var number = util.number;
var isArray = Array.isArray;
var isNumber = number.isNumber;
var isInteger = number.isInteger;
var isString = string.isString;
var validateIndex = array.validateIndex;

function factory(type, config, load, typed) {
  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)

  var equalScalar = load(require('../../function/relational/equalScalar'));
  /**
   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
   * for sparse matrices.
   * @class SparseMatrix
   */

  function SparseMatrix(data, datatype) {
    if (!(this instanceof SparseMatrix)) throw new SyntaxError('Constructor must be called with the new operator');
    if (datatype && !isString(datatype)) throw new Error('Invalid datatype: ' + datatype);

    if (type.isMatrix(data)) {
      // create from matrix
      _createFromMatrix(this, data, datatype);
    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
      // initialize fields
      this._values = data.values;
      this._index = data.index;
      this._ptr = data.ptr;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    } else if (isArray(data)) {
      // create from array
      _createFromArray(this, data, datatype);
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
    } else {
      // nothing provided
      this._values = [];
      this._index = [];
      this._ptr = [0];
      this._size = [0, 0];
      this._datatype = datatype;
    }
  }

  var _createFromMatrix = function _createFromMatrix(matrix, source, datatype) {
    // check matrix type
    if (source.type === 'SparseMatrix') {
      // clone arrays
      matrix._values = source._values ? object.clone(source._values) : undefined;
      matrix._index = object.clone(source._index);
      matrix._ptr = object.clone(source._ptr);
      matrix._size = object.clone(source._size);
      matrix._datatype = datatype || source._datatype;
    } else {
      // build from matrix data
      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
    }
  };

  var _createFromArray = function _createFromArray(matrix, data, datatype) {
    // initialize fields
    matrix._values = [];
    matrix._index = [];
    matrix._ptr = [];
    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice

    var rows = data.length;
    var columns = 0; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if (isString(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    } // check we have rows (empty array)


    if (rows > 0) {
      // column index
      var j = 0;

      do {
        // store pointer to values index
        matrix._ptr.push(matrix._index.length); // loop rows


        for (var i = 0; i < rows; i++) {
          // current row
          var row = data[i]; // check row is an array

          if (isArray(row)) {
            // update columns if needed (only on first column)
            if (j === 0 && columns < row.length) columns = row.length; // check row has column

            if (j < row.length) {
              // value
              var v = row[j]; // check value != 0

              if (!eq(v, zero)) {
                // store value
                matrix._values.push(v); // index


                matrix._index.push(i);
              }
            }
          } else {
            // update columns if needed (only on first column)
            if (j === 0 && columns < 1) columns = 1; // check value != 0 (row is a scalar)

            if (!eq(row, zero)) {
              // store value
              matrix._values.push(row); // index


              matrix._index.push(i);
            }
          }
        } // increment index


        j++;
      } while (j < columns);
    } // store number of values in ptr


    matrix._ptr.push(matrix._index.length); // size


    matrix._size = [rows, columns];
  };

  SparseMatrix.prototype = new Matrix();
  /**
   * Attach type information
   */

  SparseMatrix.prototype.type = 'SparseMatrix';
  SparseMatrix.prototype.isSparseMatrix = true;
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     var format = matrix.storage()                   // retrieve storage format
   *
   * @memberof SparseMatrix
   * @return {string}           The storage format.
   */

  SparseMatrix.prototype.storage = function () {
    return 'sparse';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     var format = matrix.datatype()                   // retrieve matrix datatype
   *
   * @memberof SparseMatrix
   * @return {string}           The datatype.
   */


  SparseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new SparseMatrix
   * @memberof SparseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */


  SparseMatrix.prototype.create = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Get the matrix density.
   *
   * Usage:
   *     var density = matrix.density()                   // retrieve matrix density
   *
   * @memberof SparseMatrix
   * @return {number}           The matrix density.
   */


  SparseMatrix.prototype.density = function () {
    // rows & columns
    var rows = this._size[0];
    var columns = this._size[1]; // calculate density

    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     var subset = matrix.subset(index)               // retrieve subset
   *     var value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof SparseMatrix
   * @param {Index} index
   * @param {Array | Maytrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    // check it is a pattern matrix
    if (!this._values) throw new Error('Cannot invoke subset on a Pattern only matrix'); // check arguments

    switch (arguments.length) {
      case 1:
        return _getsubset(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _setsubset(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };

  var _getsubset = function _getsubset(matrix, idx) {
    // check idx
    if (!type.isIndex(idx)) {
      throw new TypeError('Invalid index');
    }

    var isScalar = idx.isScalar();

    if (isScalar) {
      // return a scalar
      return matrix.get(idx.min());
    } // validate dimensions


    var size = idx.size();

    if (size.length != matrix._size.length) {
      throw new DimensionError(size.length, matrix._size.length);
    } // vars


    var i, ii, k, kk; // validate if any of the ranges in the index is out of range

    var min = idx.min();
    var max = idx.max();

    for (i = 0, ii = matrix._size.length; i < ii; i++) {
      validateIndex(min[i], matrix._size[i]);
      validateIndex(max[i], matrix._size[i]);
    } // matrix arrays


    var mvalues = matrix._values;
    var mindex = matrix._index;
    var mptr = matrix._ptr; // rows & columns dimensions for result matrix

    var rows = idx.dimension(0);
    var columns = idx.dimension(1); // workspace & permutation vector

    var w = [];
    var pv = []; // loop rows in resulting matrix

    rows.forEach(function (i, r) {
      // update permutation vector
      pv[i] = r[0]; // mark i in workspace

      w[i] = true;
    }); // result matrix arrays

    var values = mvalues ? [] : undefined;
    var index = [];
    var ptr = []; // loop columns in result matrix

    columns.forEach(function (j) {
      // update ptr
      ptr.push(index.length); // loop values in column j

      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
        // row
        i = mindex[k]; // check row is in result matrix

        if (w[i] === true) {
          // push index
          index.push(pv[i]); // check we need to process values

          if (values) values.push(mvalues[k]);
        }
      }
    }); // update ptr

    ptr.push(index.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: size,
      datatype: matrix._datatype
    });
  };

  var _setsubset = function _setsubset(matrix, index, submatrix, defaultValue) {
    // check index
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value


    var iSize = index.size(),
        isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    var sSize;

    if (type.isMatrix(submatrix)) {
      // submatrix size
      sSize = submatrix.size(); // use array representation

      submatrix = submatrix.toArray();
    } else {
      // get submatrix size (array, scalar)
      sSize = array.size(submatrix);
    } // check index is a scalar


    if (isScalar) {
      // verify submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      } // set value


      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // validate dimensions, index size must be one or two dimensions
      if (iSize.length !== 1 && iSize.length !== 2) {
        throw new DimensionError(iSize.length, matrix._size.length, '<');
      } // check submatrix and index have the same dimensions


      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;

        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }

        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions


        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size


      if (!object.deepEqual(iSize, sSize)) {
        throw new DimensionError(iSize, sSize, '>');
      } // offsets


      var x0 = index.min()[0];
      var y0 = index.min()[1]; // submatrix rows and columns

      var m = sSize[0];
      var n = sSize[1]; // loop submatrix

      for (var x = 0; x < m; x++) {
        // loop columns
        for (var y = 0; y < n; y++) {
          // value at i, j
          var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)

          matrix.set([x + x0, y + y0], v, defaultValue);
        }
      }
    }

    return matrix;
  };
  /**
   * Get a single element from the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  SparseMatrix.prototype.get = function (index) {
    if (!isArray(index)) throw new TypeError('Array expected');
    if (index.length != this._size.length) throw new DimensionError(index.length, this._size.length); // check it is a pattern matrix

    if (!this._values) throw new Error('Cannot invoke get on a Pattern only matrix'); // row and column

    var i = index[0];
    var j = index[1]; // check i, j are valid

    validateIndex(i, this._size[0]);
    validateIndex(j, this._size[1]); // find value index

    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


    if (k < this._ptr[j + 1] && this._index[k] === i) return this._values[k];
    return 0;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be set to zero.
   * @return {SparseMatrix} self
   */


  SparseMatrix.prototype.set = function (index, v, defaultValue) {
    if (!isArray(index)) throw new TypeError('Array expected');
    if (index.length != this._size.length) throw new DimensionError(index.length, this._size.length); // check it is a pattern matrix

    if (!this._values) throw new Error('Cannot invoke set on a Pattern only matrix'); // row and column

    var i = index[0];
    var j = index[1]; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if (isString(this._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, this._datatype);
    } // check we need to resize matrix


    if (i > rows - 1 || j > columns - 1) {
      // resize matrix
      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns


      rows = this._size[0];
      columns = this._size[1];
    } // check i, j are valid


    validateIndex(i, rows);
    validateIndex(j, columns); // find value index

    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


    if (k < this._ptr[j + 1] && this._index[k] === i) {
      // check value != 0
      if (!eq(v, zero)) {
        // update value
        this._values[k] = v;
      } else {
        // remove value from matrix
        _remove(k, j, this._values, this._index, this._ptr);
      }
    } else {
      // insert value @ (i, j)
      _insert(k, i, j, v, this._values, this._index, this._ptr);
    }

    return this;
  };

  var _getValueIndex = function _getValueIndex(i, top, bottom, index) {
    // check row is on the bottom side
    if (bottom - top === 0) return bottom; // loop rows [top, bottom[

    for (var r = top; r < bottom; r++) {
      // check we found value index
      if (index[r] === i) return r;
    } // we did not find row


    return top;
  };

  var _remove = function _remove(k, j, values, index, ptr) {
    // remove value @ k
    values.splice(k, 1);
    index.splice(k, 1); // update pointers

    for (var x = j + 1; x < ptr.length; x++) {
      ptr[x]--;
    }
  };

  var _insert = function _insert(k, i, j, v, values, index, ptr) {
    // insert value
    values.splice(k, 0, v); // update row for k

    index.splice(k, 0, i); // update column pointers

    for (var x = j + 1; x < ptr.length; x++) {
      ptr[x]++;
    }
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when 
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof SparseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!isArray(size)) throw new TypeError('Array expected');
    if (size.length !== 2) throw new Error('Only two dimensions matrix are supported'); // check sizes

    size.forEach(function (value) {
      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string.format(size) + ')');
      }
    }); // matrix to resize

    var m = copy ? this.clone() : this; // resize matrix

    return _resize(m, size[0], size[1], defaultValue);
  };

  var _resize = function _resize(matrix, rows, columns, defaultValue) {
    // value to insert at the time of growing matrix
    var value = defaultValue || 0; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if (isString(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype

      value = typed.convert(value, matrix._datatype);
    } // should we insert the value?


    var ins = !eq(value, zero); // old columns and rows

    var r = matrix._size[0];
    var c = matrix._size[1];
    var i, j, k; // check we need to increase columns

    if (columns > c) {
      // loop new columns
      for (j = c; j < columns; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values

        if (ins) {
          // loop rows
          for (i = 0; i < r; i++) {
            // add new matrix._values
            matrix._values.push(value); // update matrix._index


            matrix._index.push(i);
          }
        }
      } // store number of matrix._values in matrix._ptr


      matrix._ptr[columns] = matrix._values.length;
    } else if (columns < c) {
      // truncate matrix._ptr
      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index


      matrix._values.splice(matrix._ptr[columns], matrix._values.length);

      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
    } // update columns


    c = columns; // check we need to increase rows

    if (rows > r) {
      // check we have to insert values
      if (ins) {
        // inserts
        var n = 0; // loop columns

        for (j = 0; j < c; j++) {
          // update matrix._ptr for current column
          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values

          k = matrix._ptr[j + 1] + n; // pointer

          var p = 0; // loop new rows, initialize pointer

          for (i = r; i < rows; i++, p++) {
            // add value
            matrix._values.splice(k + p, 0, value); // update matrix._index


            matrix._index.splice(k + p, 0, i); // increment inserts


            n++;
          }
        } // store number of matrix._values in matrix._ptr


        matrix._ptr[c] = matrix._values.length;
      }
    } else if (rows < r) {
      // deletes
      var d = 0; // loop columns

      for (j = 0; j < c; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column

        var k0 = matrix._ptr[j];
        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index

        for (k = k0; k < k1; k++) {
          // row
          i = matrix._index[k]; // check we need to delete value and matrix._index

          if (i > rows - 1) {
            // remove value
            matrix._values.splice(k, 1); // remove item from matrix._index


            matrix._index.splice(k, 1); // increase deletes


            d++;
          }
        }
      } // update matrix._ptr for current column


      matrix._ptr[j] = matrix._values.length;
    } // update matrix._size


    matrix._size[0] = rows;
    matrix._size[1] = columns; // return matrix

    return matrix;
  };
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof SparseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  SparseMatrix.prototype.reshape = function (size, copy) {
    // validate arguments
    if (!isArray(size)) throw new TypeError('Array expected');
    if (size.length !== 2) throw new Error('Sparse matrices can only be reshaped in two dimensions'); // check sizes

    size.forEach(function (value) {
      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string.format(size) + ')');
      }
    }); // m * n must not change

    if (this._size[0] * this._size[1] !== size[0] * size[1]) {
      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
    } // matrix to reshape


    var m = copy ? this.clone() : this; // return unchanged if the same shape

    if (this._size[0] === size[0] && this._size[1] === size[1]) {
      return m;
    } // Convert to COO format (generate a column index)


    var colIndex = [];

    for (var i = 0; i < m._ptr.length; i++) {
      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
        colIndex.push(i);
      }
    } // Clone the values array


    var values = m._values.slice(); // Clone the row index array


    var rowIndex = m._index.slice(); // Transform the (row, column) indices


    for (var i = 0; i < m._index.length; i++) {
      var r1 = rowIndex[i];
      var c1 = colIndex[i];
      var flat = r1 * m._size[1] + c1;
      colIndex[i] = flat % size[1];
      rowIndex[i] = Math.floor(flat / size[1]);
    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
    // sorting several arrays based on some other array.
    // OR, we could easily just:
    // 1. Remove all values from the matrix


    m._values.length = 0;
    m._index.length = 0;
    m._ptr.length = size[1] + 1;
    m._size = size.slice();

    for (var i = 0; i < m._ptr.length; i++) {
      m._ptr[i] = 0;
    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
    // This step is probably the most time-consuming


    for (var h = 0; h < values.length; h++) {
      var i = rowIndex[h];
      var j = colIndex[h];
      var v = values[h];

      var k = _getValueIndex(i, m._ptr[j], m._ptr[j + 1], m._index);

      _insert(k, i, j, v, m._values, m._index, m._ptr);
    } // The value indices are inserted out of order, but apparently that's... still OK?


    return m;
  };
  /**
   * Create a clone of the matrix
   * @memberof SparseMatrix
   * @return {SparseMatrix} clone
   */


  SparseMatrix.prototype.clone = function () {
    var m = new SparseMatrix({
      values: this._values ? object.clone(this._values) : undefined,
      index: object.clone(this._index),
      ptr: object.clone(this._ptr),
      size: object.clone(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof SparseMatrix
   * @returns {number[]} size
   */


  SparseMatrix.prototype.size = function () {
    return this._size.slice(0); // copy the Array
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {SparseMatrix} matrix
   */


  SparseMatrix.prototype.map = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) throw new Error('Cannot invoke map on a Pattern only matrix'); // matrix instance

    var me = this; // rows and columns

    var rows = this._size[0];
    var columns = this._size[1]; // invoke callback

    var invoke = function invoke(v, i, j) {
      // invoke callback
      return callback(v, [i, j], me);
    }; // invoke _map


    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
  };
  /**
   * Create a new matrix with the results of the callback function executed on the interval
   * [minRow..maxRow, minColumn..maxColumn].
   */


  var _map = function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
    // result arrays
    var values = [];
    var index = [];
    var ptr = []; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;

    if (isString(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype);
    } // invoke callback


    var invoke = function invoke(v, x, y) {
      // invoke callback
      v = callback(v, x, y); // check value != 0

      if (!eq(v, zero)) {
        // store value
        values.push(v); // index

        index.push(x);
      }
    }; // loop columns


    for (var j = minColumn; j <= maxColumn; j++) {
      // store pointer to values index
      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      var k0 = matrix._ptr[j];
      var k1 = matrix._ptr[j + 1]; // row pointer

      var p = minRow; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        var i = matrix._index[k]; // check i is in range

        if (i >= minRow && i <= maxRow) {
          // zero values
          if (!skipZeros) {
            for (var x = p; x < i; x++) {
              invoke(0, x - minRow, j - minColumn);
            }
          } // value @ k


          invoke(matrix._values[k], i - minRow, j - minColumn);
        } // update pointer


        p = i + 1;
      } // zero values


      if (!skipZeros) {
        for (var y = p; y <= maxRow; y++) {
          invoke(0, y - minRow, j - minColumn);
        }
      }
    } // store number of values in ptr


    ptr.push(values.length); // return sparse matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
    });
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   */


  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) throw new Error('Cannot invoke forEach on a Pattern only matrix'); // matrix instance

    var me = this; // rows and columns

    var rows = this._size[0];
    var columns = this._size[1]; // loop columns

    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // column pointer

      var p = 0; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        var i = this._index[k]; // check we need to process zeros

        if (!skipZeros) {
          // zero values
          for (var x = p; x < i; x++) {
            callback(0, [x, j], me);
          }
        } // value @ k


        callback(this._values[k], [i, j], me); // update pointer

        p = i + 1;
      } // check we need to process zeros


      if (!skipZeros) {
        // zero values
        for (var y = p; y < rows; y++) {
          callback(0, [y, j], me);
        }
      }
    }
  };
  /**
   * Create an Array with a copy of the data of the SparseMatrix
   * @memberof SparseMatrix
   * @returns {Array} array
   */


  SparseMatrix.prototype.toArray = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, true);
  };
  /**
   * Get the primitive value of the SparseMatrix: a two dimensions array
   * @memberof SparseMatrix
   * @returns {Array} array
   */


  SparseMatrix.prototype.valueOf = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, false);
  };

  var _toArray = function _toArray(values, index, ptr, size, copy) {
    // rows and columns
    var rows = size[0];
    var columns = size[1]; // result

    var a = []; // vars

    var i, j; // initialize array

    for (i = 0; i < rows; i++) {
      a[i] = [];

      for (j = 0; j < columns; j++) {
        a[i][j] = 0;
      }
    } // loop columns


    for (j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        i = index[k]; // set value (use one for pattern matrix)

        a[i][j] = values ? copy ? object.clone(values[k]) : values[k] : 1;
      }
    }

    return a;
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof SparseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  SparseMatrix.prototype.format = function (options) {
    // rows and columns
    var rows = this._size[0];
    var columns = this._size[1]; // density

    var density = this.density(); // rows & columns

    var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\n'; // loop columns

    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        var i = this._index[k]; // append value

        str += '\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');
      }
    }

    return str;
  };
  /**
   * Get a string representation of the matrix
   * @memberof SparseMatrix
   * @returns {string} str
   */


  SparseMatrix.prototype.toString = function () {
    return string.format(this.toArray());
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof SparseMatrix
   * @returns {Object}
   */


  SparseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'SparseMatrix',
      values: this._values,
      index: this._index,
      ptr: this._ptr,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof SparseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix vector with the diagonal values.
   */


  SparseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if (type.isBigNumber(k)) k = k.toNumber(); // is must be an integer

      if (!isNumber(k) || !isInteger(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // number diagonal values

    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays

    var values = [];
    var index = [];
    var ptr = []; // initial ptr value

    ptr[0] = 0; // loop columns

    for (var j = kSuper; j < columns && values.length < n; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[

      for (var x = k0; x < k1; x++) {
        // row index
        var i = this._index[x]; // check row

        if (i === j - kSuper + kSub) {
          // value on this column
          values.push(this._values[x]); // store row

          index[values.length - 1] = i - kSub; // exit loop

          break;
        }
      }
    } // close ptr


    ptr.push(values.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [n, 1]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof SparseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
   *                       where mathjs is optional
   * @returns {SparseMatrix}
   */


  SparseMatrix.fromJSON = function (json) {
    return new SparseMatrix(json);
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof SparseMatrix
   * @param {Array} size                       The matrix size.
   * @param {number | Array | Matrix } value   The values for the diagonal.
   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
   *
   * @returns {SparseMatrix}
   */


  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
    if (!isArray(size)) throw new TypeError('Array expected, size parameter');
    if (size.length !== 2) throw new Error('Only two dimensions matrix are supported'); // map size & validate

    size = size.map(function (s) {
      // check it is a big number
      if (type.isBigNumber(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments


      if (!isNumber(s) || !isInteger(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }

      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if (type.isBigNumber(k)) k = k.toNumber(); // is must be an integer

      if (!isNumber(k) || !isInteger(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    } // equal signature to use


    var eq = equalScalar; // zero value

    var zero = 0;

    if (isString(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    }

    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows and columns

    var rows = size[0];
    var columns = size[1]; // number of non-zero items

    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    var _value; // check value


    if (isArray(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value[i];
      };
    } else if (type.isMatrix(value)) {
      // matrix size
      var ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function


      _value = function _value(i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function _value() {
        // return value
        return value;
      };
    } // create arrays


    var values = [];
    var index = [];
    var ptr = []; // loop items

    for (var j = 0; j < columns; j++) {
      // number of rows with value
      ptr.push(values.length); // diagonal index

      var i = j - kSuper; // check we need to set diagonal value

      if (i >= 0 && i < n) {
        // get value @ i
        var v = _value(i); // check for zero


        if (!eq(v, zero)) {
          // column
          index.push(i + kSub); // add value

          values.push(v);
        }
      }
    } // last value should be number of values


    ptr.push(values.length); // create SparseMatrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [rows, columns]
    });
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof SparseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  SparseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions


    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index


    validateIndex(i, this._size[0]);
    validateIndex(j, this._size[0]); // swap rows

    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance


    return this;
  };
  /**
   * Loop rows with data in column j.
   *
   * @param {number} j            Column
   * @param {Array} values        Matrix values
   * @param {Array} index         Matrix row indeces
   * @param {Array} ptr           Matrix column pointers
   * @param {Function} callback   Callback function invoked for every row in column j
   */


  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
    // indeces for column j
    var k0 = ptr[j];
    var k1 = ptr[j + 1]; // loop

    for (var k = k0; k < k1; k++) {
      // invoke callback
      callback(index[k], values[k]);
    }
  };
  /**
   * Swap rows x and y in Sparse Matrix data structures.
   *
   * @param {number} x         Matrix row index 1
   * @param {number} y         Matrix row index 2
   * @param {number} columns   Number of columns in matrix
   * @param {Array} values     Matrix values
   * @param {Array} index      Matrix row indeces
   * @param {Array} ptr        Matrix column pointers
   */


  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
    // loop columns
    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // find value index @ x

      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x


      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix


      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
        // swap values (check for pattern matrix)
        if (values) {
          var v = values[kx];
          values[kx] = values[ky];
          values[ky] = v;
        } // next column


        continue;
      } // check x row exist & no y row


      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
        // value @ x (check for pattern matrix)
        var vx = values ? values[kx] : undefined; // insert value @ y

        index.splice(ky, 0, y);
        if (values) values.splice(ky, 0, vx); // remove value @ x (adjust array index if needed)

        index.splice(ky <= kx ? kx + 1 : kx, 1);
        if (values) values.splice(ky <= kx ? kx + 1 : kx, 1); // next column

        continue;
      } // check y row exist & no x row


      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
        // value @ y (check for pattern matrix)
        var vy = values ? values[ky] : undefined; // insert value @ x

        index.splice(kx, 0, x);
        if (values) values.splice(kx, 0, vy); // remove value @ y (adjust array index if needed)

        index.splice(kx <= ky ? ky + 1 : ky, 1);
        if (values) values.splice(kx <= ky ? ky + 1 : ky, 1);
      }
    }
  }; // register this type in the base class Matrix


  type.Matrix._storage.sparse = SparseMatrix;
  return SparseMatrix;
}

exports.name = 'SparseMatrix';
exports.path = 'type';
exports.factory = factory;
exports.lazy = false; // no lazy loading, as we alter type.Matrix._storage

},{"../../error/DimensionError":53,"../../function/relational/equalScalar":128,"../../utils/index":227,"./Matrix":189}],194:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  /**
   * Create an index. An Index can store ranges having start, step, and end
   * for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Syntax:
   *
   *     math.index(range1, range2, ...)
   *
   * Where each range can be any of:
   *
   * - A number
   * - A string for getting/setting an object property
   * - An instance of `Range`
   * - A one-dimensional Array or a Matrix with numbers
   *
   * Indexes must be zero-based, integer numbers.
   *
   * Examples:
   *
   *    var math = math.js
   *
   *    var b = [1, 2, 3, 4, 5];
   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]
   *
   *    var a = math.matrix([[1, 2], [3, 4]]);
   *    a.subset(math.index(0, 1));             // returns 2
   *
   * See also:
   *
   *    bignumber, boolean, complex, matrix, number, string, unit
   *
   * @param {...*} ranges   Zero or more ranges or numbers.
   * @return {Index}        Returns the created index
   */
  return typed('index', {
    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
      var ranges = args.map(function (arg) {
        if (type.isBigNumber(arg)) {
          return arg.toNumber(); // convert BigNumber to Number
        } else if (Array.isArray(arg) || type.isMatrix(arg)) {
          return arg.map(function (elem) {
            // convert BigNumber to Number
            return type.isBigNumber(elem) ? elem.toNumber() : elem;
          });
        } else {
          return arg;
        }
      });
      var res = new type.Index();
      type.Index.apply(res, ranges);
      return res;
    }
  });
}

exports.name = 'index';
exports.factory = factory;

},{}],195:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  /**
   * Create a Matrix. The function creates a new `math.type.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   * Supported storage formats are 'dense' and 'sparse'.
   *
   * Syntax:
   *
   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
   *
   * Examples:
   *
   *    var m = math.matrix([[1, 2], [3, 4]]);
   *    m.size();                        // Array [2, 2]
   *    m.resize([3, 2], 5);
   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, sparse
   *
   * @param {Array | Matrix} [data]    A multi dimensional array
   * @param {string} [format]          The Matrix storage format
   *
   * @return {Matrix} The created matrix
   */
  var matrix = typed('matrix', {
    '': function _() {
      return _create([]);
    },
    'string': function string(format) {
      return _create([], format);
    },
    'string, string': function stringString(format, datatype) {
      return _create([], format, datatype);
    },
    'Array': function Array(data) {
      return _create(data);
    },
    'Matrix': function Matrix(data) {
      return _create(data, data.storage());
    },
    'Array | Matrix, string': _create,
    'Array | Matrix, string, string': _create
  });
  matrix.toTex = {
    0: '\\begin{bmatrix}\\end{bmatrix}',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(${args[0]}\\right)'
  };
  return matrix;
  /**
   * Create a new Matrix with given storage format
   * @param {Array} data
   * @param {string} [format]
   * @param {string} [datatype]
   * @returns {Matrix} Returns a new Matrix
   * @private
   */

  function _create(data, format, datatype) {
    // get storage format constructor
    var M = type.Matrix.storage(format || 'default'); // create instance

    return new M(data, datatype);
  }
}

exports.name = 'matrix';
exports.factory = factory;

},{}],196:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var SparseMatrix = type.SparseMatrix;
  /**
   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   *
   * Syntax:
   *
   *    math.sparse()               // creates an empty sparse matrix.
   *    math.sparse(data)           // creates a sparse matrix with initial data.
   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
   *
   * Examples:
   *
   *    var m = math.sparse([[1, 2], [3, 4]]);
   *    m.size();                        // Array [2, 2]
   *    m.resize([3, 2], 5);
   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, matrix
   *
   * @param {Array | Matrix} [data]    A two dimensional array
   *
   * @return {Matrix} The created matrix
   */

  var sparse = typed('sparse', {
    '': function _() {
      return new SparseMatrix([]);
    },
    'string': function string(datatype) {
      return new SparseMatrix([], datatype);
    },
    'Array | Matrix': function ArrayMatrix(data) {
      return new SparseMatrix(data);
    },
    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
      return new SparseMatrix(data, datatype);
    }
  });
  sparse.toTex = {
    0: '\\begin{bsparse}\\end{bsparse}',
    1: '\\left(${args[0]}\\right)'
  };
  return sparse;
}

exports.name = 'sparse';
exports.factory = factory;

},{}],197:[function(require,module,exports){
"use strict";

module.exports = [// types
require('./Matrix'), require('./DenseMatrix'), require('./SparseMatrix'), require('./Spa'), require('./FibonacciHeap'), require('./ImmutableDenseMatrix'), require('./MatrixIndex'), require('./Range'), // construction functions
require('./function/index'), require('./function/matrix'), require('./function/sparse')];

},{"./DenseMatrix":186,"./FibonacciHeap":187,"./ImmutableDenseMatrix":188,"./Matrix":189,"./MatrixIndex":190,"./Range":191,"./Spa":192,"./SparseMatrix":193,"./function/index":194,"./function/matrix":195,"./function/sparse":196}],198:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory(type, config, load, typed) {
  var DenseMatrix = type.DenseMatrix;
  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  Dij          ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */

  var algorithm01 = function algorithm01(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length); // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')'); // sparse matrix cannot be a Pattern matrix

    if (!bvalues) throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // process data types

    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function

    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars

    var i, j; // result (DenseMatrix)

    var cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // workspace


    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns in b

    for (j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated

        w[i] = mark;
      } // loop rows


      for (i = 0; i < rows; i++) {
        // check row is in workspace
        if (w[i] === mark) {
          // c[i][j] was already calculated
          cdata[i][j] = x[i];
        } else {
          // item does not exist in S
          cdata[i][j] = adata[i][j];
        }
      }
    } // return dense matrix


    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };

  return algorithm01;
}

exports.name = 'algorithm01';
exports.factory = factory;

},{"../../../error/DimensionError":53}],199:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory(type, config, load, typed) {
  var equalScalar = load(require('../../../function/relational/equalScalar'));
  var SparseMatrix = type.SparseMatrix;
  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */

  var algorithm02 = function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length); // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')'); // sparse matrix cannot be a Pattern matrix

    if (!bvalues) throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (SparseMatrix)


    var cvalues = [];
    var cindex = [];
    var cptr = []; // loop columns in b

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k]; // update C(i,j)

        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero

        if (!eq(cij, zero)) {
          // push i & v
          cindex.push(i);
          cvalues.push(cij);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };

  return algorithm02;
}

exports.name = 'algorithm02';
exports.factory = factory;

},{"../../../error/DimensionError":53,"../../../function/relational/equalScalar":128}],200:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory(type, config, load, typed) {
  var DenseMatrix = type.DenseMatrix;
  /**
   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
   * Callback function invoked M*N times.
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(Dij, 0)    ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */

  var algorithm03 = function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length); // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')'); // sparse matrix cannot be a Pattern matrix

    if (!bvalues) throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (DenseMatrix)


    var cdata = []; // initialize dense matrix

    for (var z = 0; z < rows; z++) {
      // initialize row
      cdata[z] = [];
    } // workspace


    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns in b

    for (var j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
        w[i] = mark;
      } // process workspace


      for (var y = 0; y < rows; y++) {
        // check we have a calculated value for current row
        if (w[y] === mark) {
          // use calculated value
          cdata[y][j] = x[y];
        } else {
          // calculate value
          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
        }
      }
    } // return dense matrix


    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };

  return algorithm03;
}

exports.name = 'algorithm03';
exports.factory = factory;

},{"../../../error/DimensionError":53}],201:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory(type, config, load, typed) {
  var equalScalar = load(require('../../../function/relational/equalScalar'));
  var SparseMatrix = type.SparseMatrix;
  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  B(i,j)       ; B(i,j) !== 0
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */

  var algorithm04 = function algorithm04(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length); // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // matrix

    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspace

    var xa = avalues && bvalues ? [] : undefined;
    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // vars 

    var i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop A(:,j)

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // update c

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) xa[i] = avalues[k];
      } // loop B(:,j)


      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check row exists in A

        if (wa[i] === mark) {
          // update record in xa @ i
          if (xa) {
            // invoke callback
            var v = cf(xa[i], bvalues[k]); // check for zero

            if (!eq(v, zero)) {
              // update workspace
              xa[i] = v;
            } else {
              // remove mark (index will be removed later)
              wa[i] = null;
            }
          }
        } else {
          // update c
          cindex.push(i); // update workspace

          wb[i] = mark; // check we need to process values

          if (xb) xb[i] = bvalues[k];
        }
      } // check we need to process values (non pattern matrix)


      if (xa && xb) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // check workspace has value @ i

          if (wa[i] === mark) {
            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
            cvalues[k] = xa[i]; // increment pointer

            k++;
          } else if (wb[i] === mark) {
            // push value (bij != 0)
            cvalues[k] = xb[i]; // increment pointer

            k++;
          } else {
            // remove index @ k
            cindex.splice(k, 1);
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };

  return algorithm04;
}

exports.name = 'algorithm04';
exports.factory = factory;

},{"../../../error/DimensionError":53,"../../../function/relational/equalScalar":128}],202:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory(type, config, load, typed) {
  var equalScalar = load(require('../../../function/relational/equalScalar'));
  var SparseMatrix = type.SparseMatrix;
  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */

  var algorithm05 = function algorithm05(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length); // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // matrix

    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var xa = cvalues ? [] : undefined;
    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // vars

    var i, j, k, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop values A(:,j)

      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
        // row
        i = aindex[k]; // push index

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) xa[i] = avalues[k];
      } // loop values B(:,j)


      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
        // row
        i = bindex[k]; // check row existed in A

        if (wa[i] !== mark) {
          // push index
          cindex.push(i);
        } // update workspace


        wb[i] = mark; // check we need to process values

        if (xb) xb[i] = bvalues[k];
      } // check we need to process values (non pattern matrix)


      if (cvalues) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // marks

          var wai = wa[i];
          var wbi = wb[i]; // check Aij or Bij are nonzero

          if (wai === mark || wbi === mark) {
            // matrix values @ i,j
            var va = wai === mark ? xa[i] : zero;
            var vb = wbi === mark ? xb[i] : zero; // Cij

            var vc = cf(va, vb); // check for zero

            if (!eq(vc, zero)) {
              // push value
              cvalues.push(vc); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };

  return algorithm05;
}

exports.name = 'algorithm05';
exports.factory = factory;

},{"../../../error/DimensionError":53,"../../../function/relational/equalScalar":128}],203:[function(require,module,exports){
'use strict';

var scatter = require('./../../../utils/collection/scatter');

var DimensionError = require('../../../error/DimensionError');

function factory(type, config, load, typed) {
  var equalScalar = load(require('../../../function/relational/equalScalar'));
  var SparseMatrix = type.SparseMatrix;
  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */

  var algorithm06 = function algorithm06(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length); // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // matrix

    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var w = []; // marks indicating value in a given row has been updated

    var u = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // scatter the values of A(:,j) into workspace

      scatter(a, j, w, x, u, mark, c, cf); // scatter the values of B(:,j) into workspace

      scatter(b, j, w, x, u, mark, c, cf); // check we need to process values (non pattern matrix)

      if (x) {
        // initialize first index in j
        var k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[i] === mark) {
            // value @ i
            var v = x[i]; // check for zero value

            if (!eq(v, zero)) {
              // push value
              cvalues.push(v); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          } else {
            // remove value @ i, do not increment pointer
            cindex.splice(k, 1);
          }
        }
      } else {
        // initialize first index in j
        var p = cptr[j]; // loop index in j

        while (p < cindex.length) {
          // row
          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[r] !== mark) {
            // remove value @ i, do not increment pointer
            cindex.splice(p, 1);
          } else {
            // increment pointer
            p++;
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };

  return algorithm06;
}

exports.name = 'algorithm06';
exports.factory = factory;

},{"../../../error/DimensionError":53,"../../../function/relational/equalScalar":128,"./../../../utils/collection/scatter":223}],204:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory(type, config, load, typed) {
  var DenseMatrix = type.DenseMatrix;
  /**
   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). 
   * Callback function invoked MxN times.
   *
   * C(i,j) = f(Aij, Bij)
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */

  var algorithm07 = function algorithm07(a, b, callback) {
    // sparse matrix arrays
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length); // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // vars


    var i, j; // result arrays

    var cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // matrix


    var c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var xa = [];
    var xb = []; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // loop columns

    for (j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // scatter the values of A(:,j) into workspace

      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace


      _scatter(b, j, wb, xb, mark); // loop rows


      for (i = 0; i < rows; i++) {
        // matrix values @ i,j
        var va = wa[i] === mark ? xa[i] : zero;
        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback

        cdata[i][j] = cf(va, vb);
      }
    } // return sparse matrix


    return c;
  };

  var _scatter = function _scatter(m, j, w, x, mark) {
    // a arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop values in column j

    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
      // row
      var i = index[k]; // update workspace

      w[i] = mark;
      x[i] = values[k];
    }
  };

  return algorithm07;
}

exports.name = 'algorithm07';
exports.factory = factory;

},{"../../../error/DimensionError":53}],205:[function(require,module,exports){
'use strict';

var DimensionError = require('../../../error/DimensionError');

function factory(type, config, load, typed) {
  var equalScalar = load(require('../../../function/relational/equalScalar'));
  var SparseMatrix = type.SparseMatrix;
  /**
   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). 
   * Callback function invoked NZA times, number of nonzero elements in A.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */

  var algorithm09 = function algorithm09(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length); // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // matrix

    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var w = []; // vars

    var i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // column mark

      var mark = j + 1; // check we need to process values

      if (x) {
        // loop B(:,j)
        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = bindex[k]; // update workspace

          w[i] = mark;
          x[i] = bvalues[k];
        }
      } // loop A(:,j)


      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // check we need to process values

        if (x) {
          // b value @ i,j
          var vb = w[i] === mark ? x[i] : zero; // invoke f

          var vc = cf(avalues[k], vb); // check zero value

          if (!eq(vc, zero)) {
            // push index
            cindex.push(i); // push value

            cvalues.push(vc);
          }
        } else {
          // push index
          cindex.push(i);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };

  return algorithm09;
}

exports.name = 'algorithm09';
exports.factory = factory;

},{"../../../error/DimensionError":53,"../../../function/relational/equalScalar":128}],206:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var DenseMatrix = type.DenseMatrix;
  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤  
   *          └  b          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */

  var algorithm10 = function algorithm10(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cdata = []; // matrix

    var c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows


      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j


        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = b;
        }
      }
    } // return sparse matrix


    return c;
  };

  return algorithm10;
}

exports.name = 'algorithm10';
exports.factory = factory;

},{}],207:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var equalScalar = load(require('../../../function/relational/equalScalar'));
  var SparseMatrix = type.SparseMatrix;
  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤  
   *          └  0          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */

  var algorithm11 = function algorithm11(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cvalues = [];
    var cindex = [];
    var cptr = []; // matrix

    var c = new SparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // loop columns

    for (var j = 0; j < columns; j++) {
      // initialize ptr
      cptr[j] = cindex.length; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = aindex[k]; // invoke callback

        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero

        if (!eq(v, zero)) {
          // push index & value
          cindex.push(i);
          cvalues.push(v);
        }
      }
    } // update ptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };

  return algorithm11;
}

exports.name = 'algorithm11';
exports.factory = factory;

},{"../../../function/relational/equalScalar":128}],208:[function(require,module,exports){
'use strict';

function factory(type, config, load, typed) {
  var DenseMatrix = type.DenseMatrix;
  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
   * Callback function invoked MxN times.
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤  
   *          └  f(0, b)    ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */

  var algorithm12 = function algorithm12(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value'); // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    var cdata = []; // matrix

    var c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows


      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j


        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
        }
      }
    } // return sparse matrix


    return c;
  };

  return algorithm12;
}

exports.name = 'algorithm12';
exports.factory = factory;

},{}],209:[function(require,module,exports){
'use strict';

var util = require('../../../utils/index');

var DimensionError = require('../../../error/DimensionError');

var string = util.string,
    isString = string.isString;

function factory(type, config, load, typed) {
  var DenseMatrix = type.DenseMatrix;
  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). 
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, Bij..z)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Matrix}   b                 The DenseMatrix instance (B)
   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
   */

  var algorithm13 = function algorithm13(a, b, callback) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b arrays

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // c arrays

    var csize = []; // validate dimensions

    if (asize.length !== bsize.length) throw new DimensionError(asize.length, bsize.length); // validate each one of the dimension sizes

    for (var s = 0; s < asize.length; s++) {
      // must match
      if (asize[s] !== bsize[s]) throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')'); // update dimension in c

      csize[s] = asize[s];
    } // datatype


    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions


    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix

    return new DenseMatrix({
      data: cdata,
      size: csize,
      datatype: dt
    });
  }; // recursive function


  var _iterate = function _iterate(f, level, s, n, av, bv) {
    // initialize array for this level
    var cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = f(av[i], bv[i]);
      }
    } else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
      }
    }

    return cv;
  };

  return algorithm13;
}

exports.name = 'algorithm13';
exports.factory = factory;

},{"../../../error/DimensionError":53,"../../../utils/index":227}],210:[function(require,module,exports){
'use strict';

var clone = require('../../../utils/object').clone;

function factory(type, config, load, typed) {
  var DenseMatrix = type.DenseMatrix;
  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). 
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, b)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij..z,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
   */

  var algorithm14 = function algorithm14(a, b, callback, inverse) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions


    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix

    return new DenseMatrix({
      data: cdata,
      size: clone(asize),
      datatype: dt
    });
  }; // recursive function


  var _iterate = function _iterate(f, level, s, n, av, bv, inverse) {
    // initialize array for this level
    var cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
      }
    } else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
      }
    }

    return cv;
  };

  return algorithm14;
}

exports.name = 'algorithm14';
exports.factory = factory;

},{"../../../utils/object":230}],211:[function(require,module,exports){
'use strict';

var deepMap = require('./../utils/collection/deepMap');

function factory(type, config, load, typed) {
  /**
   * Create a number or convert a string, boolean, or unit to a number.
   * When value is a matrix, all elements will be converted to number.
   *
   * Syntax:
   *
   *    math.number(value)
   *    math.number(unit, valuelessUnit)
   *
   * Examples:
   *
   *    math.number(2);                         // returns number 2
   *    math.number('7.2');                     // returns number 7.2
   *    math.number(true);                      // returns number 1
   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]
   *    math.number(math.unit('52cm'), 'm');    // returns 0.52
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, string, unit
   *
   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
   * @return {number | Array | Matrix} The created number
   */
  var number = typed('number', {
    '': function _() {
      return 0;
    },
    'number': function number(x) {
      return x;
    },
    'string': function string(x) {
      var num = Number(x);

      if (isNaN(num)) {
        throw new SyntaxError('String "' + x + '" is no valid number');
      }

      return num;
    },
    'BigNumber': function BigNumber(x) {
      return x.toNumber();
    },
    'Fraction': function Fraction(x) {
      return x.valueOf();
    },
    'Unit': function Unit(x) {
      throw new Error('Second argument with valueless unit expected');
    },
    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
      return unit.toNumber(valuelessUnit);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, number);
    }
  });
  number.toTex = {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  };
  return number;
}

exports.name = 'number';
exports.factory = factory;

},{"./../utils/collection/deepMap":219}],212:[function(require,module,exports){
'use strict';

var number = require('./number');

var string = require('./string');

var object = require('./object');

var types = require('./types');

var DimensionError = require('../error/DimensionError');

var IndexError = require('../error/IndexError');
/**
 * Calculate the size of a multi dimensional array.
 * This function checks the size of the first entry, it does not validate
 * whether all dimensions match. (use function `validate` for that)
 * @param {Array} x
 * @Return {Number[]} size
 */


exports.size = function (x) {
  var s = [];

  while (Array.isArray(x)) {
    s.push(x.length);
    x = x[0];
  }

  return s;
};
/**
 * Recursively validate whether each element in a multi dimensional array
 * has a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @param {number} dim   Current dimension
 * @throws DimensionError
 * @private
 */


function _validate(array, size, dim) {
  var i;
  var len = array.length;

  if (len != size[dim]) {
    throw new DimensionError(len, size[dim]);
  }

  if (dim < size.length - 1) {
    // recursively validate each child array
    var dimNext = dim + 1;

    for (i = 0; i < len; i++) {
      var child = array[i];

      if (!Array.isArray(child)) {
        throw new DimensionError(size.length - 1, size.length, '<');
      }

      _validate(array[i], size, dimNext);
    }
  } else {
    // last dimension. none of the childs may be an array
    for (i = 0; i < len; i++) {
      if (Array.isArray(array[i])) {
        throw new DimensionError(size.length + 1, size.length, '>');
      }
    }
  }
}
/**
 * Validate whether each element in a multi dimensional array has
 * a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @throws DimensionError
 */


exports.validate = function (array, size) {
  var isScalar = size.length == 0;

  if (isScalar) {
    // scalar
    if (Array.isArray(array)) {
      throw new DimensionError(array.length, 0);
    }
  } else {
    // array
    _validate(array, size, 0);
  }
};
/**
 * Test whether index is an integer number with index >= 0 and index < length
 * when length is provided
 * @param {number} index    Zero-based index
 * @param {number} [length] Length of the array
 */


exports.validateIndex = function (index, length) {
  if (!number.isNumber(index) || !number.isInteger(index)) {
    throw new TypeError('Index must be an integer (value: ' + index + ')');
  }

  if (index < 0 || typeof length === 'number' && index >= length) {
    throw new IndexError(index, length);
  }
}; // a constant used to specify an undefined defaultValue


exports.UNINITIALIZED = {};
/**
 * Resize a multi dimensional array. The resized array is returned.
 * @param {Array} array         Array to be resized
 * @param {Array.<number>} size Array with the size of each dimension
 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
 *                              zero by default. To leave new entries undefined,
 *                              specify array.UNINITIALIZED as defaultValue
 * @return {Array} array         The resized array
 */

exports.resize = function (array, size, defaultValue) {
  // TODO: add support for scalars, having size=[] ?
  // check the type of the arguments
  if (!Array.isArray(array) || !Array.isArray(size)) {
    throw new TypeError('Array expected');
  }

  if (size.length === 0) {
    throw new Error('Resizing to scalar is not supported');
  } // check whether size contains positive integers


  size.forEach(function (value) {
    if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string.format(size) + ')');
    }
  }); // recursively resize the array

  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;

  _resize(array, size, 0, _defaultValue);

  return array;
};
/**
 * Recursively resize a multi dimensional array
 * @param {Array} array         Array to be resized
 * @param {number[]} size       Array with the size of each dimension
 * @param {number} dim          Current dimension
 * @param {*} [defaultValue]    Value to be filled in in new entries,
 *                              undefined by default.
 * @private
 */


function _resize(array, size, dim, defaultValue) {
  var i;
  var elem;
  var oldLen = array.length;
  var newLen = size[dim];
  var minLen = Math.min(oldLen, newLen); // apply new length

  array.length = newLen;

  if (dim < size.length - 1) {
    // non-last dimension
    var dimNext = dim + 1; // resize existing child arrays

    for (i = 0; i < minLen; i++) {
      // resize child array
      elem = array[i];

      if (!Array.isArray(elem)) {
        elem = [elem]; // add a dimension

        array[i] = elem;
      }

      _resize(elem, size, dimNext, defaultValue);
    } // create new child arrays


    for (i = minLen; i < newLen; i++) {
      // get child array
      elem = [];
      array[i] = elem; // resize new child array

      _resize(elem, size, dimNext, defaultValue);
    }
  } else {
    // last dimension
    // remove dimensions of existing values
    for (i = 0; i < minLen; i++) {
      while (Array.isArray(array[i])) {
        array[i] = array[i][0];
      }
    }

    if (defaultValue !== exports.UNINITIALIZED) {
      // fill new elements with the default value
      for (i = minLen; i < newLen; i++) {
        array[i] = defaultValue;
      }
    }
  }
}
/**
 * Re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 *
 * @throws {DimensionError}       If the product of the new dimension sizes does
 *                                not equal that of the old ones
 */


exports.reshape = function (array, sizes) {
  var flatArray = exports.flatten(array);
  var newArray;

  var product = function product(arr) {
    return arr.reduce(function (prev, curr) {
      return prev * curr;
    });
  };

  if (!Array.isArray(array) || !Array.isArray(sizes)) {
    throw new TypeError('Array expected');
  }

  if (sizes.length === 0) {
    throw new DimensionError(0, product(exports.size(array)), '!=');
  }

  try {
    newArray = _reshape(flatArray, sizes);
  } catch (e) {
    if (e instanceof DimensionError) {
      throw new DimensionError(product(sizes), product(exports.size(array)), '!=');
    }

    throw e;
  }

  if (flatArray.length > 0) {
    throw new DimensionError(product(sizes), product(exports.size(array)), '!=');
  }

  return newArray;
};
/**
 * Recursively re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 *
 * @throws {DimensionError}       If the product of the new dimension sizes does
 *                                not equal that of the old ones
 */


function _reshape(array, sizes) {
  var accumulator = [];
  var i;

  if (sizes.length === 0) {
    if (array.length === 0) {
      throw new DimensionError(null, null, '!=');
    }

    return array.shift();
  }

  for (i = 0; i < sizes[0]; i += 1) {
    accumulator.push(_reshape(array, sizes.slice(1)));
  }

  return accumulator;
}
/**
 * Squeeze a multi dimensional array
 * @param {Array} array
 * @param {Array} [size]
 * @returns {Array} returns the array itself
 */


exports.squeeze = function (array, size) {
  var s = size || exports.size(array); // squeeze outer dimensions

  while (Array.isArray(array) && array.length === 1) {
    array = array[0];
    s.shift();
  } // find the first dimension to be squeezed


  var dims = s.length;

  while (s[dims - 1] === 1) {
    dims--;
  } // squeeze inner dimensions


  if (dims < s.length) {
    array = _squeeze(array, dims, 0);
    s.length = dims;
  }

  return array;
};
/**
 * Recursively squeeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */


function _squeeze(array, dims, dim) {
  var i, ii;

  if (dim < dims) {
    var next = dim + 1;

    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _squeeze(array[i], dims, next);
    }
  } else {
    while (Array.isArray(array)) {
      array = array[0];
    }
  }

  return array;
}
/**
 * Unsqueeze a multi dimensional array: add dimensions when missing
 * 
 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
 * 
 * @param {Array} array
 * @param {number} dims     Desired number of dimensions of the array
 * @param {number} [outer]  Number of outer dimensions to be added
 * @param {Array} [size]    Current size of array.
 * @returns {Array} returns the array itself
 * @private
 */


exports.unsqueeze = function (array, dims, outer, size) {
  var s = size || exports.size(array); // unsqueeze outer dimensions

  if (outer) {
    for (var i = 0; i < outer; i++) {
      array = [array];
      s.unshift(1);
    }
  } // unsqueeze inner dimensions


  array = _unsqueeze(array, dims, 0);

  while (s.length < dims) {
    s.push(1);
  }

  return array;
};
/**
 * Recursively unsqueeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */


function _unsqueeze(array, dims, dim) {
  var i, ii;

  if (Array.isArray(array)) {
    var next = dim + 1;

    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _unsqueeze(array[i], dims, next);
    }
  } else {
    for (var d = dim; d < dims; d++) {
      array = [array];
    }
  }

  return array;
}
/**
 * Flatten a multi dimensional array, put all elements in a one dimensional
 * array
 * @param {Array} array   A multi dimensional array
 * @return {Array}        The flattened array (1 dimensional)
 */


exports.flatten = function (array) {
  if (!Array.isArray(array)) {
    //if not an array, return as is
    return array;
  }

  var flat = [];
  array.forEach(function callback(value) {
    if (Array.isArray(value)) {
      value.forEach(callback); //traverse through sub-arrays recursively
    } else {
      flat.push(value);
    }
  });
  return flat;
};
/**
 * A safe map
 * @param {Array} array
 * @param {function} callback
 */


exports.map = function (array, callback) {
  return Array.prototype.map.call(array, callback);
};
/**
 * A safe forEach
 * @param {Array} array
 * @param {function} callback
 */


exports.forEach = function (array, callback) {
  Array.prototype.forEach.call(array, callback);
};
/**
 * A safe filter
 * @param {Array} array
 * @param {function} callback
 */


exports.filter = function (array, callback) {
  if (exports.size(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, callback);
};
/**
 * Filter values in a callback given a regular expression
 * @param {Array} array
 * @param {RegExp} regexp
 * @return {Array} Returns the filtered array
 * @private
 */


exports.filterRegExp = function (array, regexp) {
  if (exports.size(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, function (entry) {
    return regexp.test(entry);
  });
};
/**
 * A safe join
 * @param {Array} array
 * @param {string} separator
 */


exports.join = function (array, separator) {
  return Array.prototype.join.call(array, separator);
};
/**
 * Assign a numeric identifier to every element of a sorted array
 * @param {Array}	a  An array
 * @return {Array}	An array of objects containing the original value and its identifier
 */


exports.identify = function (a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }

  if (a.length === 0) {
    return a;
  }

  var b = [];
  var count = 0;
  b[0] = {
    value: a[0],
    identifier: 0
  };

  for (var i = 1; i < a.length; i++) {
    if (a[i] === a[i - 1]) {
      count++;
    } else {
      count = 0;
    }

    b.push({
      value: a[i],
      identifier: count
    });
  }

  return b;
};
/**
 * Remove the numeric identifier from the elements
 * @param	a  An array
 * @return	An array of values without identifiers
 */


exports.generalize = function (a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }

  if (a.length === 0) {
    return a;
  }

  var b = [];

  for (var i = 0; i < a.length; i++) {
    b.push(a[i].value);
  }

  return b;
};
/**
 * Test whether an object is an array
 * @param {*} value
 * @return {boolean} isArray
 */


exports.isArray = Array.isArray;

},{"../error/DimensionError":53,"../error/IndexError":54,"./number":229,"./object":230,"./string":231,"./types":232}],213:[function(require,module,exports){
"use strict";

/**
 * Convert a BigNumber to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential' and
 *                                          'auto', `precision` defines the total
 *                                          number of significant digits returned
 *                                          and is undefined by default.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point, and is 0 by default.
 *                     {Object} exponential An object containing two parameters,
 *                                          {number} lower and {number} upper,
 *                                          used by notation 'auto' to determine
 *                                          when to return exponential notation.
 *                                          Default values are `lower=1e-3` and
 *                                          `upper=1e5`.
 *                                          Only applicable for notation `auto`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4);                                        // '6.4'
 *    format(1240000);                                    // '1.24e6'
 *    format(1/3);                                        // '0.3333333333333333'
 *    format(1/3, 3);                                     // '0.333'
 *    format(21385, 2);                                   // '21000'
 *    format(12.071, {notation: 'fixed'});                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
 *
 * @param {BigNumber} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */
exports.format = function (value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases


  if (!value.isFinite()) {
    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
  } // default values for options


  var notation = 'auto';
  var precision = undefined;

  if (options !== undefined) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options


    if (typeof options === 'number') {
      precision = options;
    } else if (options.precision) {
      precision = options.precision;
    }
  } // handle the various notations


  switch (notation) {
    case 'fixed':
      return exports.toFixed(value, precision);

    case 'exponential':
      return exports.toExponential(value, precision);

    case 'auto':
      // determine lower and upper bound for exponential notation.
      // TODO: implement support for upper and lower to be BigNumbers themselves
      var lower = 1e-3;
      var upper = 1e5;

      if (options && options.exponential) {
        if (options.exponential.lower !== undefined) {
          lower = options.exponential.lower;
        }

        if (options.exponential.upper !== undefined) {
          upper = options.exponential.upper;
        }
      } // adjust the configuration of the BigNumber constructor (yeah, this is quite tricky...)


      var oldConfig = {
        toExpNeg: value.constructor.toExpNeg,
        toExpPos: value.constructor.toExpPos
      };
      value.constructor.config({
        toExpNeg: Math.round(Math.log(lower) / Math.LN10),
        toExpPos: Math.round(Math.log(upper) / Math.LN10)
      }); // handle special case zero

      if (value.isZero()) return '0'; // determine whether or not to output exponential notation

      var str;
      var abs = value.abs();

      if (abs.gte(lower) && abs.lt(upper)) {
        // normal number notation
        str = value.toSignificantDigits(precision).toFixed();
      } else {
        // exponential notation
        str = exports.toExponential(value, precision);
      } // remove trailing zeros after the decimal point


      return str.replace(/((\.\d*?)(0+))($|e)/, function () {
        var digits = arguments[2];
        var e = arguments[4];
        return digits !== '.' ? digits + e : e;
      });

    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
  }
};
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {BigNumber} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */


exports.toExponential = function (value, precision) {
  if (precision !== undefined) {
    return value.toExponential(precision - 1); // Note the offset of one
  } else {
    return value.toExponential();
  }
};
/**
 * Format a number with fixed notation.
 * @param {BigNumber} value
 * @param {number} [precision=0]        Optional number of decimals after the
 *                                      decimal point. Zero by default.
 */


exports.toFixed = function (value, precision) {
  return value.toFixed(precision || 0); // Note: the (precision || 0) is needed as the toFixed of BigNumber has an
  // undefined default precision instead of 0.
};

},{}],214:[function(require,module,exports){
"use strict";

/**
 * Test whether a value is a BigNumber
 * @param {*} x
 * @return {boolean}
 */
module.exports = function isBigNumber(x) {
  return x && x.constructor.prototype.isBigNumber || false;
};

},{}],215:[function(require,module,exports){
'use strict';
/**
 * Compares two BigNumbers.
 * @param {BigNumber} x       First value to compare
 * @param {BigNumber} y       Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
 */

module.exports = function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon == null) {
    return x.eq(y);
  } // use "==" operator, handles infinities


  if (x.eq(y)) {
    return true;
  } // NaN


  if (x.isNaN() || y.isNaN()) {
    return false;
  } // at this point x and y should be finite


  if (x.isFinite() && y.isFinite()) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = x.minus(y).abs();

    if (diff.isZero()) {
      return true;
    } else {
      // use relative error
      var max = x.constructor.max(x.abs(), y.abs());
      return diff.lte(max.times(epsilon));
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases


  return false;
};

},{}],216:[function(require,module,exports){
'use strict';
/**
 * Test whether value is a boolean
 * @param {*} value
 * @return {boolean} isBoolean
 */

exports.isBoolean = function (value) {
  return typeof value == 'boolean';
};

},{}],217:[function(require,module,exports){
'use strict';

var isCollection = require('./isCollection');
/**
 * Test whether an array contains collections
 * @param {Array} array
 * @returns {boolean} Returns true when the array contains one or multiple
 *                    collections (Arrays or Matrices). Returns false otherwise.
 */


module.exports = function containsCollections(array) {
  for (var i = 0; i < array.length; i++) {
    if (isCollection(array[i])) {
      return true;
    }
  }

  return false;
};

},{"./isCollection":220}],218:[function(require,module,exports){
'use strict';

var isMatrix = require('./isMatrix');
/**
 * Recursively loop over all elements in a given multi dimensional array
 * and invoke the callback on each of the elements.
 * @param {Array | Matrix} array
 * @param {Function} callback     The callback method is invoked with one
 *                                parameter: the current element in the array
 */


module.exports = function deepForEach(array, callback) {
  if (isMatrix(array)) {
    array = array.valueOf();
  }

  for (var i = 0, ii = array.length; i < ii; i++) {
    var value = array[i];

    if (Array.isArray(value)) {
      deepForEach(value, callback);
    } else {
      callback(value);
    }
  }
};

},{"./isMatrix":221}],219:[function(require,module,exports){
'use strict';
/**
 * Execute the callback function element wise for each element in array and any
 * nested array
 * Returns an array with the results
 * @param {Array | Matrix} array
 * @param {Function} callback   The callback is called with two parameters:
 *                              value1 and value2, which contain the current
 *                              element of both arrays.
 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
 *
 * @return {Array | Matrix} res
 */

module.exports = function deepMap(array, callback, skipZeros) {
  if (array && typeof array.map === 'function') {
    // TODO: replace array.map with a for loop to improve performance
    return array.map(function (x) {
      return deepMap(x, callback, skipZeros);
    });
  } else {
    return callback(array);
  }
};

},{}],220:[function(require,module,exports){
'use strict';

var isMatrix = require('./isMatrix');
/**
 * Test whether a value is a collection: an Array or Matrix
 * @param {*} x
 * @returns {boolean} isCollection
 */


module.exports = function isCollection(x) {
  return Array.isArray(x) || isMatrix(x);
};

},{"./isMatrix":221}],221:[function(require,module,exports){
'use strict';
/**
 * Test whether a value is a Matrix
 * @param {*} x
 * @returns {boolean} returns true with input is a Matrix
 *                    (like a DenseMatrix or SparseMatrix)
 */

module.exports = function isMatrix(x) {
  return x && x.constructor.prototype.isMatrix || false;
};

},{}],222:[function(require,module,exports){
'use strict';

var arraySize = require('../array').size;

var isMatrix = require('../collection/isMatrix');

var IndexError = require('../../error/IndexError');
/**
 * Reduce a given matrix or array to a new matrix or
 * array with one less dimension, applying the given
 * callback in the selected dimension.
 * @param {Array | Matrix} mat
 * @param {number} dim
 * @param {Function} callback
 * @return {Array | Matrix} res
 */


module.exports = function (mat, dim, callback) {
  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();

  if (dim < 0 || dim >= size.length) {
    // TODO: would be more clear when throwing a DimensionError here
    throw new IndexError(dim, size.length);
  }

  if (isMatrix(mat)) {
    return mat.create(_reduce(mat.valueOf(), dim, callback));
  } else {
    return _reduce(mat, dim, callback);
  }
};
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */


function _reduce(mat, dim, callback) {
  var i, ret, val, tran;

  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      val = mat[0];

      for (i = 1; i < mat.length; i++) {
        val = callback(val, mat[i]);
      }

      return val;
    } else {
      tran = _switch(mat);
      ret = [];

      for (i = 0; i < tran.length; i++) {
        ret[i] = _reduce(tran[i], dim - 1, callback);
      }

      return ret;
    }
  } else {
    ret = [];

    for (i = 0; i < mat.length; i++) {
      ret[i] = _reduce(mat[i], dim - 1, callback);
    }

    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */


function _switch(mat) {
  var I = mat.length;
  var J = mat[0].length;
  var i, j;
  var ret = [];

  for (j = 0; j < J; j++) {
    var tmp = [];

    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }

    ret.push(tmp);
  }

  return ret;
}

},{"../../error/IndexError":54,"../array":212,"../collection/isMatrix":221}],223:[function(require,module,exports){
'use strict';

module.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr; // c arrays

  var cindex = c._index; // vars

  var k, k0, k1, i; // check we need to process values (pattern matrix)

  if (x) {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i); // x(i) = A, check we need to call function this time

        if (update) {
          // copy value to workspace calling callback function
          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row

          u[i] = mark;
        } else {
          // copy value to workspace
          x[i] = avalues[k];
        }
      } else {
        // i exists in C already
        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row

        u[i] = mark;
      }
    }
  } else {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i);
      } else {
        // indicate function was called on current row
        u[i] = mark;
      }
    }
  }
};

},{}],224:[function(require,module,exports){
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var hasOwnProperty = require('./object').hasOwnProperty;
/**
 * Get a property of a plain object
 * Throws an error in case the object is not a plain object or the
 * property is not defined on the object itself
 * @param {Object} object
 * @param {string} prop
 * @return {*} Returns the property value when safe
 */


function getSafeProperty(object, prop) {
  // only allow getting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    return object[prop];
  }

  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
    throw new Error('Cannot access method "' + prop + '" as a property');
  }

  throw new Error('No access to property "' + prop + '"');
}
/**
 * Set a property on a plain object.
 * Throws an error in case the object is not a plain object or the
 * property would override an inherited property like .constructor or .toString
 * @param {Object} object
 * @param {string} prop
 * @param {*} value
 * @return {*} Returns the value
 */
// TODO: merge this function into access.js?


function setSafeProperty(object, prop, value) {
  // only allow setting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    return object[prop] = value;
  }

  throw new Error('No access to property "' + prop + '"');
}
/**
 * Test whether a property is safe to use for an object.
 * For example .toString and .constructor are not safe
 * @param {string} prop
 * @return {boolean} Returns true when safe
 */


function isSafeProperty(object, prop) {
  if (!object || _typeof(object) !== 'object') {
    return false;
  } // SAFE: whitelisted
  // e.g length


  if (hasOwnProperty(safeNativeProperties, prop)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor


  if (prop in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply


  if (prop in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }

  return true;
}
/**
 * Validate whether a method is safe.
 * Throws an error when that's not the case.
 * @param {Object} object
 * @param {string} method
 */
// TODO: merge this function into assign.js?


function validateSafeMethod(object, method) {
  if (!isSafeMethod(object, method)) {
    throw new Error('No access to method "' + method + '"');
  }
}
/**
 * Check whether a method is safe.
 * Throws an error when that's not the case (for example for `constructor`).
 * @param {Object} object
 * @param {string} method
 * @return {boolean} Returns true when safe, false otherwise
 */


function isSafeMethod(object, method) {
  if (!object || typeof object[method] !== 'function') {
    return false;
  } // UNSAFE: ghosted
  // e.g overridden toString
  // Note that IE10 doesn't support __proto__ and we can't do this check there.


  if (hasOwnProperty(object, method) && object.__proto__ && method in object.__proto__) {
    return false;
  } // SAFE: whitelisted
  // e.g toString


  if (hasOwnProperty(safeNativeMethods, method)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor


  if (method in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply


  if (method in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }

  return true;
}

function isPlainObject(object) {
  return _typeof(object) === 'object' && object && object.constructor === Object;
}

var safeNativeProperties = {
  length: true,
  name: true
};
var safeNativeMethods = {
  toString: true,
  valueOf: true,
  toLocaleString: true
};
exports.getSafeProperty = getSafeProperty;
exports.setSafeProperty = setSafeProperty;
exports.isSafeProperty = isSafeProperty;
exports.validateSafeMethod = validateSafeMethod;
exports.isSafeMethod = isSafeMethod;
exports.isPlainObject = isPlainObject;

},{"./object":230}],225:[function(require,module,exports){
"use strict";

var Emitter = require('tiny-emitter');
/**
 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
 * @param {Object} obj
 * @return {Object} obj
 */


exports.mixin = function (obj) {
  // create event emitter
  var emitter = new Emitter(); // bind methods to obj (we don't want to expose the emitter.e Array...)

  obj.on = emitter.on.bind(emitter);
  obj.off = emitter.off.bind(emitter);
  obj.once = emitter.once.bind(emitter);
  obj.emit = emitter.emit.bind(emitter);
  return obj;
};

},{"tiny-emitter":238}],226:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// function utils

/**
 * Memoize a given function by caching the computed result.
 * The cache of a memoized function can be cleared by deleting the `cache`
 * property of the function.
 *
 * @param {function} fn                     The function to be memoized.
 *                                          Must be a pure function.
 * @param {function(args: Array)} [hasher]  A custom hash builder.
 *                                          Is JSON.stringify by default.
 * @return {function}                       Returns the memoized function
 */
exports.memoize = function (fn, hasher) {
  return function memoize() {
    if (_typeof(memoize.cache) !== 'object') {
      memoize.cache = {};
    }

    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    var hash = hasher ? hasher(args) : JSON.stringify(args);

    if (!(hash in memoize.cache)) {
      return memoize.cache[hash] = fn.apply(fn, args);
    }

    return memoize.cache[hash];
  };
};
/**
 * Find the maximum number of arguments expected by a typed function.
 * @param {function} fn   A typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */


exports.maxArgumentCount = function (fn) {
  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
    var count = (signature.match(/,/g) || []).length + 1;
    return Math.max(args, count);
  }, -1);
};
/**
 * Call a typed function with the
 * @param {function} fn   A function or typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */


exports.callWithRightArgumentCount = function (fn, args, argCount) {
  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
    var count = (signature.match(/,/g) || []).length + 1;
    return Math.max(args, count);
  }, -1);
};

},{}],227:[function(require,module,exports){
'use strict';

exports.array = require('./array');
exports['boolean'] = require('./boolean');
exports['function'] = require('./function');
exports.number = require('./number');
exports.object = require('./object');
exports.string = require('./string');
exports.types = require('./types');
exports.emitter = require('./emitter');

},{"./array":212,"./boolean":216,"./emitter":225,"./function":226,"./number":229,"./object":230,"./string":231,"./types":232}],228:[function(require,module,exports){
'use strict';

var escape_latex = require('escape-latex');

exports.symbols = {
  // GREEK LETTERS
  Alpha: 'A',
  alpha: '\\alpha',
  Beta: 'B',
  beta: '\\beta',
  Gamma: '\\Gamma',
  gamma: '\\gamma',
  Delta: '\\Delta',
  delta: '\\delta',
  Epsilon: 'E',
  epsilon: '\\epsilon',
  varepsilon: '\\varepsilon',
  Zeta: 'Z',
  zeta: '\\zeta',
  Eta: 'H',
  eta: '\\eta',
  Theta: '\\Theta',
  theta: '\\theta',
  vartheta: '\\vartheta',
  Iota: 'I',
  iota: '\\iota',
  Kappa: 'K',
  kappa: '\\kappa',
  varkappa: '\\varkappa',
  Lambda: '\\Lambda',
  lambda: '\\lambda',
  Mu: 'M',
  mu: '\\mu',
  Nu: 'N',
  nu: '\\nu',
  Xi: '\\Xi',
  xi: '\\xi',
  Omicron: 'O',
  omicron: 'o',
  Pi: '\\Pi',
  pi: '\\pi',
  varpi: '\\varpi',
  Rho: 'P',
  rho: '\\rho',
  varrho: '\\varrho',
  Sigma: '\\Sigma',
  sigma: '\\sigma',
  varsigma: '\\varsigma',
  Tau: 'T',
  tau: '\\tau',
  Upsilon: "\\Upsilon",
  upsilon: "\\upsilon",
  Phi: '\\Phi',
  phi: '\\phi',
  varphi: '\\varphi',
  Chi: 'X',
  chi: '\\chi',
  Psi: '\\Psi',
  psi: '\\psi',
  Omega: '\\Omega',
  omega: '\\omega',
  //logic
  'true': '\\mathrm{True}',
  'false': '\\mathrm{False}',
  //other
  i: 'i',
  //TODO use \i ??
  inf: '\\infty',
  Inf: '\\infty',
  infinity: '\\infty',
  Infinity: '\\infty',
  oo: '\\infty',
  lim: '\\lim',
  'undefined': '\\mathbf{?}'
};
exports.operators = {
  'transpose': '^\\top',
  'factorial': '!',
  'pow': '^',
  'dotPow': '.^\\wedge',
  //TODO find ideal solution
  'unaryPlus': '+',
  'unaryMinus': '-',
  'bitNot': '~',
  //TODO find ideal solution
  'not': '\\neg',
  'multiply': '\\cdot',
  'divide': '\\frac',
  //TODO how to handle that properly?
  'dotMultiply': '.\\cdot',
  //TODO find ideal solution
  'dotDivide': '.:',
  //TODO find ideal solution
  'mod': '\\mod',
  'add': '+',
  'subtract': '-',
  'to': '\\rightarrow',
  'leftShift': '<<',
  'rightArithShift': '>>',
  'rightLogShift': '>>>',
  'equal': '=',
  'unequal': '\\neq',
  'smaller': '<',
  'larger': '>',
  'smallerEq': '\\leq',
  'largerEq': '\\geq',
  'bitAnd': '\\&',
  'bitXor': "\\underline{|}",
  'bitOr': '|',
  'and': '\\wedge',
  'xor': '\\veebar',
  'or': '\\vee'
};
exports.defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
var units = {
  deg: '^\\circ'
};

exports.escape = function (string) {
  return escape_latex(string, {
    'preserveFormatting': true
  });
}; //@param {string} name
//@param {boolean} isUnit


exports.toSymbol = function (name, isUnit) {
  isUnit = typeof isUnit === 'undefined' ? false : isUnit;

  if (isUnit) {
    if (units.hasOwnProperty(name)) {
      return units[name];
    }

    return '\\mathrm{' + exports.escape(name) + '}';
  }

  if (exports.symbols.hasOwnProperty(name)) {
    return exports.symbols[name];
  }

  return exports.escape(name);
};

},{"escape-latex":43}],229:[function(require,module,exports){
'use strict';
/**
 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
 */

/**
 * Test whether value is a number
 * @param {*} value
 * @return {boolean} isNumber
 */

exports.isNumber = function (value) {
  return typeof value === 'number';
};
/**
 * Check if a number is integer
 * @param {number | boolean} value
 * @return {boolean} isInteger
 */


exports.isInteger = function (value) {
  return isFinite(value) ? value == Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well
};
/**
 * Calculate the sign of a number
 * @param {number} x
 * @returns {*}
 */


exports.sign = Math.sign || function (x) {
  if (x > 0) {
    return 1;
  } else if (x < 0) {
    return -1;
  } else {
    return 0;
  }
};
/**
 * Convert a number to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'engineering'    Always use engineering notation.
 *                                          For example '123.4e+0' and '14.0e+6'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential' and
 *                                          'auto', `precision` defines the total
 *                                          number of significant digits returned
 *                                          and is undefined by default.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point, and is 0 by default.
 *                     {Object} exponential An object containing two parameters,
 *                                          {number} lower and {number} upper,
 *                                          used by notation 'auto' to determine
 *                                          when to return exponential notation.
 *                                          Default values are `lower=1e-3` and
 *                                          `upper=1e5`.
 *                                          Only applicable for notation `auto`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4);                                        // '6.4'
 *    format(1240000);                                    // '1.24e6'
 *    format(1/3);                                        // '0.3333333333333333'
 *    format(1/3, 3);                                     // '0.333'
 *    format(21385, 2);                                   // '21000'
 *    format(12.071, {notation: 'fixed'});                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
 *    format(12345678, {notation: 'engineering'});        // '12.345678e+6'
 *
 * @param {number} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */


exports.format = function (value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases


  if (value === Infinity) {
    return 'Infinity';
  } else if (value === -Infinity) {
    return '-Infinity';
  } else if (isNaN(value)) {
    return 'NaN';
  } // default values for options


  var notation = 'auto';
  var precision = undefined;

  if (options) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options


    if (exports.isNumber(options)) {
      precision = options;
    } else if (options.precision) {
      precision = options.precision;
    }
  } // handle the various notations


  switch (notation) {
    case 'fixed':
      return exports.toFixed(value, precision);

    case 'exponential':
      return exports.toExponential(value, precision);

    case 'engineering':
      return exports.toEngineering(value, precision);

    case 'auto':
      return exports.toPrecision(value, precision, options && options.exponential) // remove trailing zeros after the decimal point
      .replace(/((\.\d*?)(0+))($|e)/, function () {
        var digits = arguments[2];
        var e = arguments[4];
        return digits !== '.' ? digits + e : e;
      });

    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
  }
};
/**
 * Split a number into sign, coefficients, and exponent
 * @param {number | string} value
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 */


exports.splitNumber = function (value) {
  // parse the input value
  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);

  if (!match) {
    throw new SyntaxError('Invalid number ' + value);
  }

  var sign = match[1];
  var digits = match[2];
  var exponent = parseFloat(match[4] || '0');
  var dot = digits.indexOf('.');
  exponent += dot !== -1 ? dot - 1 : digits.length - 1;
  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
  .replace(/^0*/, function (zeros) {
    // remove leading zeros, add their count to the exponent
    exponent -= zeros.length;
    return '';
  }).replace(/0*$/, '') // remove trailing zeros
  .split('').map(function (d) {
    return parseInt(d);
  });

  if (coefficients.length === 0) {
    coefficients.push(0);
    exponent++;
  }

  return {
    sign: sign,
    coefficients: coefficients,
    exponent: exponent
  };
};
/**
 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision=0]        Optional number of decimals after the
 *                                      decimal point. Zero by default.
 */


exports.toEngineering = function (value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  var rounded = exports.roundDigits(exports.splitNumber(value), precision);
  var e = rounded.exponent;
  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent

  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // concatenate coefficients with necessary zeros

  var significandsDiff = e >= 0 ? e : Math.abs(newExp); // add zeros if necessary (for ex: 1e+8)

  if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1))); // find difference in exponents

  var expDiff = Math.abs(e - newExp);
  var decimalIdx = 1; // push decimal index over by expDiff times

  while (--expDiff >= 0) {
    decimalIdx++;
  } // if all coefficient values are zero after the decimal point, don't add a decimal value.
  // otherwise concat with the rest of the coefficients


  var decimals = c.slice(decimalIdx).join('');
  var decimalVal = decimals.match(/[1-9]/) ? '.' + decimals : '';
  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
  return rounded.sign + str;
};
/**
 * Format a number with fixed notation.
 * @param {number | string} value
 * @param {number} [precision=0]        Optional number of decimals after the
 *                                      decimal point. Zero by default.
 */


exports.toFixed = function (value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  var splitValue = exports.splitNumber(value);
  var rounded = exports.roundDigits(splitValue, splitValue.exponent + 1 + (precision || 0));
  var c = rounded.coefficients;
  var p = rounded.exponent + 1; // exponent may have changed
  // append zeros if needed

  var pp = p + (precision || 0);

  if (c.length < pp) {
    c = c.concat(zeros(pp - c.length));
  } // prepend zeros if needed


  if (p < 0) {
    c = zeros(-p + 1).concat(c);
    p = 1;
  } // insert a dot if needed


  if (precision) {
    c.splice(p, 0, p === 0 ? '0.' : '.');
  }

  return rounded.sign + c.join('');
};
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 */


exports.toExponential = function (value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // round if needed, else create a clone


  var split = exports.splitNumber(value);
  var rounded = precision ? exports.roundDigits(split, precision) : split;
  var c = rounded.coefficients;
  var e = rounded.exponent; // append zeros if needed

  if (c.length < precision) {
    c = c.concat(zeros(precision - c.length));
  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`


  var first = c.shift();
  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
};
/**
 * Format a number with a certain precision
 * @param {number | string} value
 * @param {number} [precision=undefined] Optional number of digits.
 * @param {{lower: number | undefined, upper: number | undefined}} [options]
 *                                       By default:
 *                                         lower = 1e-3 (excl)
 *                                         upper = 1e+5 (incl)
 * @return {string}
 */


exports.toPrecision = function (value, precision, options) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // determine lower and upper bound for exponential notation.


  var lower = options && options.lower !== undefined ? options.lower : 1e-3;
  var upper = options && options.upper !== undefined ? options.upper : 1e+5;
  var split = exports.splitNumber(value);
  var abs = Math.abs(Math.pow(10, split.exponent));

  if (abs < lower || abs >= upper) {
    // exponential notation
    return exports.toExponential(value, precision);
  } else {
    var rounded = precision ? exports.roundDigits(split, precision) : split;
    var c = rounded.coefficients;
    var e = rounded.exponent; // append trailing zeros

    if (c.length < precision) {
      c = c.concat(zeros(precision - c.length));
    } // append trailing zeros
    // TODO: simplify the next statement


    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros

    c = zeros(-e).concat(c);
    var dot = e > 0 ? e : 0;

    if (dot < c.length - 1) {
      c.splice(dot + 1, 0, '.');
    }

    return rounded.sign + c.join('');
  }
};
/**
 * Round the number of digits of a number *
 * @param {SplitValue} split       A value split with .splitNumber(value)
 * @param {number} precision  A positive integer
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 *              with rounded digits
 */


exports.roundDigits = function (split, precision) {
  // create a clone
  var rounded = {
    sign: split.sign,
    coefficients: split.coefficients,
    exponent: split.exponent
  };
  var c = rounded.coefficients; // prepend zeros if needed

  while (precision <= 0) {
    c.unshift(0);
    rounded.exponent++;
    precision++;
  }

  if (c.length > precision) {
    var removed = c.splice(precision, c.length - precision);

    if (removed[0] >= 5) {
      var i = precision - 1;
      c[i]++;

      while (c[i] === 10) {
        c.pop();

        if (i === 0) {
          c.unshift(0);
          rounded.exponent++;
          i++;
        }

        i--;
        c[i]++;
      }
    }
  }

  return rounded;
};
/**
 * Create an array filled with zeros.
 * @param {number} length
 * @return {Array}
 */


function zeros(length) {
  var arr = [];

  for (var i = 0; i < length; i++) {
    arr.push(0);
  }

  return arr;
}
/**
 * Count the number of significant digits of a number.
 *
 * For example:
 *   2.34 returns 3
 *   0.0034 returns 2
 *   120.5e+30 returns 4
 *
 * @param {number} value
 * @return {number} digits   Number of significant digits
 */


exports.digits = function (value) {
  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
  .length;
};
/**
 * Minimum number added to one that makes the result different than one
 */


exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
/**
 * Compares two floating point numbers.
 * @param {number} x          First value to compare
 * @param {number} y          Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
*/

exports.nearlyEqual = function (x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon == null) {
    return x == y;
  } // use "==" operator, handles infinities


  if (x == y) {
    return true;
  } // NaN


  if (isNaN(x) || isNaN(y)) {
    return false;
  } // at this point x and y should be finite


  if (isFinite(x) && isFinite(y)) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = Math.abs(x - y);

    if (diff < exports.DBL_EPSILON) {
      return true;
    } else {
      // use relative error
      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases


  return false;
};

},{}],230:[function(require,module,exports){
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var isBigNumber = require('./bignumber/isBigNumber');
/**
 * Clone an object
 *
 *     clone(x)
 *
 * Can clone any primitive type, array, and object.
 * If x has a function clone, this function will be invoked to clone the object.
 *
 * @param {*} x
 * @return {*} clone
 */


exports.clone = function clone(x) {
  var type = _typeof(x); // immutable primitive types


  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
    return x;
  } // use clone function of the object when available


  if (typeof x.clone === 'function') {
    return x.clone();
  } // array


  if (Array.isArray(x)) {
    return x.map(function (value) {
      return clone(value);
    });
  }

  if (x instanceof Number) return new Number(x.valueOf());
  if (x instanceof String) return new String(x.valueOf());
  if (x instanceof Boolean) return new Boolean(x.valueOf());
  if (x instanceof Date) return new Date(x.valueOf());
  if (isBigNumber(x)) return x; // bignumbers are immutable

  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
  // object

  return exports.map(x, clone);
};
/**
 * Apply map to all properties of an object
 * @param {Object} object
 * @param {function} callback
 * @return {Object} Returns a copy of the object with mapped properties
 */


exports.map = function (object, callback) {
  var clone = {};

  for (var key in object) {
    if (exports.hasOwnProperty(object, key)) {
      clone[key] = callback(object[key]);
    }
  }

  return clone;
};
/**
 * Extend object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 */


exports.extend = function (a, b) {
  for (var prop in b) {
    if (exports.hasOwnProperty(b, prop)) {
      a[prop] = b[prop];
    }
  }

  return a;
};
/**
 * Deep extend an object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */


exports.deepExtend = function deepExtend(a, b) {
  // TODO: add support for Arrays to deepExtend
  if (Array.isArray(b)) {
    throw new TypeError('Arrays are not supported by deepExtend');
  }

  for (var prop in b) {
    if (exports.hasOwnProperty(b, prop)) {
      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === undefined) {
          a[prop] = {};
        }

        if (a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop]);
        } else {
          a[prop] = b[prop];
        }
      } else if (Array.isArray(b[prop])) {
        throw new TypeError('Arrays are not supported by deepExtend');
      } else {
        a[prop] = b[prop];
      }
    }
  }

  return a;
};
/**
 * Deep test equality of all fields in two pairs of arrays or objects.
 * @param {Array | Object} a
 * @param {Array | Object} b
 * @returns {boolean}
 */


exports.deepEqual = function deepEqual(a, b) {
  var prop, i, len;

  if (Array.isArray(a)) {
    if (!Array.isArray(b)) {
      return false;
    }

    if (a.length != b.length) {
      return false;
    }

    for (i = 0, len = a.length; i < len; i++) {
      if (!exports.deepEqual(a[i], b[i])) {
        return false;
      }
    }

    return true;
  } else if (a instanceof Object) {
    if (Array.isArray(b) || !(b instanceof Object)) {
      return false;
    }

    for (prop in a) {
      //noinspection JSUnfilteredForInLoop
      if (!exports.deepEqual(a[prop], b[prop])) {
        return false;
      }
    }

    for (prop in b) {
      //noinspection JSUnfilteredForInLoop
      if (!exports.deepEqual(a[prop], b[prop])) {
        return false;
      }
    }

    return true;
  } else {
    return _typeof(a) === _typeof(b) && a == b;
  }
};
/**
 * Test whether the current JavaScript engine supports Object.defineProperty
 * @returns {boolean} returns true if supported
 */


exports.canDefineProperty = function () {
  // test needed for broken IE8 implementation
  try {
    if (Object.defineProperty) {
      Object.defineProperty({}, 'x', {
        get: function get() {}
      });
      return true;
    }
  } catch (e) {}

  return false;
};
/**
 * Attach a lazy loading property to a constant.
 * The given function `fn` is called once when the property is first requested.
 * On older browsers (<IE8), the function will fall back to direct evaluation
 * of the properties value.
 * @param {Object} object   Object where to add the property
 * @param {string} prop     Property name
 * @param {Function} fn     Function returning the property value. Called
 *                          without arguments.
 */


exports.lazy = function (object, prop, fn) {
  if (exports.canDefineProperty()) {
    var _uninitialized = true;

    var _value;

    Object.defineProperty(object, prop, {
      get: function get() {
        if (_uninitialized) {
          _value = fn();
          _uninitialized = false;
        }

        return _value;
      },
      set: function set(value) {
        _value = value;
        _uninitialized = false;
      },
      configurable: true,
      enumerable: true
    });
  } else {
    // fall back to immediate evaluation
    object[prop] = fn();
  }
};
/**
 * Traverse a path into an object.
 * When a namespace is missing, it will be created
 * @param {Object} object
 * @param {string} path   A dot separated string like 'name.space'
 * @return {Object} Returns the object at the end of the path
 */


exports.traverse = function (object, path) {
  var obj = object;

  if (path) {
    var names = path.split('.');

    for (var i = 0; i < names.length; i++) {
      var name = names[i];

      if (!(name in obj)) {
        obj[name] = {};
      }

      obj = obj[name];
    }
  }

  return obj;
};
/**
 * A safe hasOwnProperty
 * @param {Object} object
 * @param {string} property
 */


exports.hasOwnProperty = function (object, property) {
  return object && Object.hasOwnProperty.call(object, property);
};
/**
 * Test whether an object is a factory. a factory has fields:
 *
 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
 * - name: string (optional)
 * - path: string    A dot separated path (optional)
 * - math: boolean   If true (false by default), the math namespace is passed
 *                   as fifth argument of the factory function
 *
 * @param {*} object
 * @returns {boolean}
 */


exports.isFactory = function (object) {
  return object && typeof object.factory === 'function';
};

},{"./bignumber/isBigNumber":214}],231:[function(require,module,exports){
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var formatNumber = require('./number').format;

var formatBigNumber = require('./bignumber/formatter').format;

var isBigNumber = require('./bignumber/isBigNumber');
/**
 * Test whether value is a string
 * @param {*} value
 * @return {boolean} isString
 */


exports.isString = function (value) {
  return typeof value === 'string';
};
/**
 * Check if a text ends with a certain string.
 * @param {string} text
 * @param {string} search
 */


exports.endsWith = function (text, search) {
  var start = text.length - search.length;
  var end = text.length;
  return text.substring(start, end) === search;
};
/**
 * Format a value of any type into a string.
 *
 * Usage:
 *     math.format(value)
 *     math.format(value, precision)
 *
 * When value is a function:
 *
 * - When the function has a property `syntax`, it returns this
 *   syntax description.
 * - In other cases, a string `'function'` is returned.
 *
 * When `value` is an Object:
 *
 * - When the object contains a property `format` being a function, this
 *   function is invoked as `value.format(options)` and the result is returned.
 * - When the object has its own `toString` method, this method is invoked
 *   and the result is returned.
 * - In other cases the function will loop over all object properties and
 *   return JSON object notation like '{"a": 2, "b": 3}'.
 *
 * Example usage:
 *     math.format(2/7);                // '0.2857142857142857'
 *     math.format(math.pi, 3);         // '3.14'
 *     math.format(new Complex(2, 3));  // '2 + 3i'
 *     math.format('hello');            // '"hello"'
 *
 * @param {*} value             Value to be stringified
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @return {string} str
 */


exports.format = function (value, options) {
  if (typeof value === 'number') {
    return formatNumber(value, options);
  }

  if (isBigNumber(value)) {
    return formatBigNumber(value, options);
  } // note: we use unsafe duck-typing here to check for Fractions, this is
  // ok here since we're only invoking toString or concatenating its values


  if (looksLikeFraction(value)) {
    if (!options || options.fraction !== 'decimal') {
      // output as ratio, like '1/3'
      return value.s * value.n + '/' + value.d;
    } else {
      // output as decimal, like '0.(3)'
      return value.toString();
    }
  }

  if (Array.isArray(value)) {
    return formatArray(value, options);
  }

  if (exports.isString(value)) {
    return '"' + value + '"';
  }

  if (typeof value === 'function') {
    return value.syntax ? String(value.syntax) : 'function';
  }

  if (value && _typeof(value) === 'object') {
    if (typeof value.format === 'function') {
      return value.format(options);
    } else if (value && value.toString() !== {}.toString()) {
      // this object has a non-native toString method, use that one
      return value.toString();
    } else {
      var entries = [];

      for (var key in value) {
        if (value.hasOwnProperty(key)) {
          entries.push('"' + key + '": ' + exports.format(value[key], options));
        }
      }

      return '{' + entries.join(', ') + '}';
    }
  }

  return String(value);
};
/**
 * Stringify a value into a string enclosed in double quotes.
 * Unescaped double quotes and backslashes inside the value are escaped.
 * @param {*} value
 * @return {string}
 */


exports.stringify = function (value) {
  var text = String(value);
  var escaped = '';
  var i = 0;

  while (i < text.length) {
    var c = text.charAt(i);

    if (c === '\\') {
      escaped += c;
      i++;
      c = text.charAt(i);

      if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
        escaped += '\\'; // no valid escape character -> escape it
      }

      escaped += c;
    } else if (c === '"') {
      escaped += '\\"';
    } else {
      escaped += c;
    }

    i++;
  }

  return '"' + escaped + '"';
};
/**
 * Escape special HTML characters
 * @param {*} value
 * @return {string}
 */


exports.escape = function (value) {
  var text = String(value);
  text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  return text;
};
/**
 * Recursively format an n-dimensional matrix
 * Example output: "[[1, 2], [3, 4]]"
 * @param {Array} array
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @returns {string} str
 */


function formatArray(array, options) {
  if (Array.isArray(array)) {
    var str = '[';
    var len = array.length;

    for (var i = 0; i < len; i++) {
      if (i != 0) {
        str += ', ';
      }

      str += formatArray(array[i], options);
    }

    str += ']';
    return str;
  } else {
    return exports.format(array, options);
  }
}
/**
 * Check whether a value looks like a Fraction (unsafe duck-type check)
 * @param {*} value
 * @return {boolean}
 */


function looksLikeFraction(value) {
  return value && _typeof(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
}

},{"./bignumber/formatter":213,"./bignumber/isBigNumber":214,"./number":229}],232:[function(require,module,exports){
'use strict';
/**
 * Determine the type of a variable
 *
 *     type(x)
 *
 * The following types are recognized:
 *
 *     'undefined'
 *     'null'
 *     'boolean'
 *     'number'
 *     'string'
 *     'Array'
 *     'Function'
 *     'Date'
 *     'RegExp'
 *     'Object'
 *
 * @param {*} x
 * @return {string} Returns the name of the type. Primitive types are lower case,
 *                  non-primitive types are upper-camel-case.
 *                  For example 'number', 'string', 'Array', 'Date'.
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.type = function (x) {
  var type = _typeof(x);

  if (type === 'object') {
    if (x === null) return 'null';
    if (Array.isArray(x)) return 'Array';
    if (x instanceof Date) return 'Date';
    if (x instanceof RegExp) return 'RegExp';
    if (x instanceof Boolean) return 'boolean';
    if (x instanceof Number) return 'number';
    if (x instanceof String) return 'string';
    return 'Object';
  }

  if (type === 'function') return 'Function';
  return type;
};

},{}],233:[function(require,module,exports){
(function (global){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var numeric = typeof exports === "undefined" ? function numeric() {} : exports;

if (typeof global !== "undefined") {
  global.numeric = numeric;
}

numeric.version = "1.2.6"; // 1. Utility functions

numeric.bench = function bench(f, interval) {
  var t1, t2, n, i;

  if (typeof interval === "undefined") {
    interval = 15;
  }

  n = 0.5;
  t1 = new Date();

  while (1) {
    n *= 2;

    for (i = n; i > 3; i -= 4) {
      f();
      f();
      f();
      f();
    }

    while (i > 0) {
      f();
      i--;
    }

    t2 = new Date();
    if (t2 - t1 > interval) break;
  }

  for (i = n; i > 3; i -= 4) {
    f();
    f();
    f();
    f();
  }

  while (i > 0) {
    f();
    i--;
  }

  t2 = new Date();
  return 1000 * (3 * n - 1) / (t2 - t1);
};

numeric._myIndexOf = function _myIndexOf(w) {
  var n = this.length,
      k;

  for (k = 0; k < n; ++k) {
    if (this[k] === w) return k;
  }

  return -1;
};

numeric.myIndexOf = Array.prototype.indexOf ? Array.prototype.indexOf : numeric._myIndexOf;
numeric.Function = Function;
numeric.precision = 4;
numeric.largeArray = 50;

numeric.prettyPrint = function prettyPrint(x) {
  function fmtnum(x) {
    if (x === 0) {
      return '0';
    }

    if (isNaN(x)) {
      return 'NaN';
    }

    if (x < 0) {
      return '-' + fmtnum(-x);
    }

    if (isFinite(x)) {
      var scale = Math.floor(Math.log(x) / Math.log(10));
      var normalized = x / Math.pow(10, scale);
      var basic = normalized.toPrecision(numeric.precision);

      if (parseFloat(basic) === 10) {
        scale++;
        normalized = 1;
        basic = normalized.toPrecision(numeric.precision);
      }

      return parseFloat(basic).toString() + 'e' + scale.toString();
    }

    return 'Infinity';
  }

  var ret = [];

  function foo(x) {
    var k;

    if (typeof x === "undefined") {
      ret.push(Array(numeric.precision + 8).join(' '));
      return false;
    }

    if (typeof x === "string") {
      ret.push('"' + x + '"');
      return false;
    }

    if (typeof x === "boolean") {
      ret.push(x.toString());
      return false;
    }

    if (typeof x === "number") {
      var a = fmtnum(x);
      var b = x.toPrecision(numeric.precision);
      var c = parseFloat(x.toString()).toString();
      var d = [a, b, c, parseFloat(b).toString(), parseFloat(c).toString()];

      for (k = 1; k < d.length; k++) {
        if (d[k].length < a.length) a = d[k];
      }

      ret.push(Array(numeric.precision + 8 - a.length).join(' ') + a);
      return false;
    }

    if (x === null) {
      ret.push("null");
      return false;
    }

    if (typeof x === "function") {
      ret.push(x.toString());
      var flag = false;

      for (k in x) {
        if (x.hasOwnProperty(k)) {
          if (flag) ret.push(',\n');else ret.push('\n{');
          flag = true;
          ret.push(k);
          ret.push(': \n');
          foo(x[k]);
        }
      }

      if (flag) ret.push('}\n');
      return true;
    }

    if (x instanceof Array) {
      if (x.length > numeric.largeArray) {
        ret.push('...Large Array...');
        return true;
      }

      var flag = false;
      ret.push('[');

      for (k = 0; k < x.length; k++) {
        if (k > 0) {
          ret.push(',');
          if (flag) ret.push('\n ');
        }

        flag = foo(x[k]);
      }

      ret.push(']');
      return true;
    }

    ret.push('{');
    var flag = false;

    for (k in x) {
      if (x.hasOwnProperty(k)) {
        if (flag) ret.push(',\n');
        flag = true;
        ret.push(k);
        ret.push(': \n');
        foo(x[k]);
      }
    }

    ret.push('}');
    return true;
  }

  foo(x);
  return ret.join('');
};

numeric.parseDate = function parseDate(d) {
  function foo(d) {
    if (typeof d === 'string') {
      return Date.parse(d.replace(/-/g, '/'));
    }

    if (!(d instanceof Array)) {
      throw new Error("parseDate: parameter must be arrays of strings");
    }

    var ret = [],
        k;

    for (k = 0; k < d.length; k++) {
      ret[k] = foo(d[k]);
    }

    return ret;
  }

  return foo(d);
};

numeric.parseFloat = function parseFloat_(d) {
  function foo(d) {
    if (typeof d === 'string') {
      return parseFloat(d);
    }

    if (!(d instanceof Array)) {
      throw new Error("parseFloat: parameter must be arrays of strings");
    }

    var ret = [],
        k;

    for (k = 0; k < d.length; k++) {
      ret[k] = foo(d[k]);
    }

    return ret;
  }

  return foo(d);
};

numeric.parseCSV = function parseCSV(t) {
  var foo = t.split('\n');
  var j, k;
  var ret = [];
  var pat = /(([^'",]*)|('[^']*')|("[^"]*")),/g;
  var patnum = /^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/;

  var stripper = function stripper(n) {
    return n.substr(0, n.length - 1);
  };

  var count = 0;

  for (k = 0; k < foo.length; k++) {
    var bar = (foo[k] + ",").match(pat),
        baz;

    if (bar.length > 0) {
      ret[count] = [];

      for (j = 0; j < bar.length; j++) {
        baz = stripper(bar[j]);

        if (patnum.test(baz)) {
          ret[count][j] = parseFloat(baz);
        } else ret[count][j] = baz;
      }

      count++;
    }
  }

  return ret;
};

numeric.toCSV = function toCSV(A) {
  var s = numeric.dim(A);
  var i, j, m, n, row, ret;
  m = s[0];
  n = s[1];
  ret = [];

  for (i = 0; i < m; i++) {
    row = [];

    for (j = 0; j < m; j++) {
      row[j] = A[i][j].toString();
    }

    ret[i] = row.join(', ');
  }

  return ret.join('\n') + '\n';
};

numeric.getURL = function getURL(url) {
  var client = new XMLHttpRequest();
  client.open("GET", url, false);
  client.send();
  return client;
};

numeric.imageURL = function imageURL(img) {
  function base64(A) {
    var n = A.length,
        i,
        x,
        y,
        z,
        p,
        q,
        r,
        s;
    var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var ret = "";

    for (i = 0; i < n; i += 3) {
      x = A[i];
      y = A[i + 1];
      z = A[i + 2];
      p = x >> 2;
      q = ((x & 3) << 4) + (y >> 4);
      r = ((y & 15) << 2) + (z >> 6);
      s = z & 63;

      if (i + 1 >= n) {
        r = s = 64;
      } else if (i + 2 >= n) {
        s = 64;
      }

      ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);
    }

    return ret;
  }

  function crc32Array(a, from, to) {
    if (typeof from === "undefined") {
      from = 0;
    }

    if (typeof to === "undefined") {
      to = a.length;
    }

    var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
    var crc = -1,
        y = 0,
        n = a.length,
        i;

    for (i = from; i < to; i++) {
      y = (crc ^ a[i]) & 0xFF;
      crc = crc >>> 8 ^ table[y];
    }

    return crc ^ -1;
  }

  var h = img[0].length,
      w = img[0][0].length,
      s1,
      s2,
      next,
      k,
      length,
      a,
      b,
      i,
      j,
      adler32,
      crc32;
  var stream = [137, 80, 78, 71, 13, 10, 26, 10, //  0: PNG signature
  0, 0, 0, 13, //  8: IHDR Chunk length
  73, 72, 68, 82, // 12: "IHDR" 
  w >> 24 & 255, w >> 16 & 255, w >> 8 & 255, w & 255, // 16: Width
  h >> 24 & 255, h >> 16 & 255, h >> 8 & 255, h & 255, // 20: Height
  8, // 24: bit depth
  2, // 25: RGB
  0, // 26: deflate
  0, // 27: no filter
  0, // 28: no interlace
  -1, -2, -3, -4, // 29: CRC
  -5, -6, -7, -8, // 33: IDAT Chunk length
  73, 68, 65, 84, // 37: "IDAT"
  // RFC 1950 header starts here
  8, // 41: RFC1950 CMF
  29 // 42: RFC1950 FLG
  ];
  crc32 = crc32Array(stream, 12, 29);
  stream[29] = crc32 >> 24 & 255;
  stream[30] = crc32 >> 16 & 255;
  stream[31] = crc32 >> 8 & 255;
  stream[32] = crc32 & 255;
  s1 = 1;
  s2 = 0;

  for (i = 0; i < h; i++) {
    if (i < h - 1) {
      stream.push(0);
    } else {
      stream.push(1);
    }

    a = 3 * w + 1 + (i === 0) & 255;
    b = 3 * w + 1 + (i === 0) >> 8 & 255;
    stream.push(a);
    stream.push(b);
    stream.push(~a & 255);
    stream.push(~b & 255);
    if (i === 0) stream.push(0);

    for (j = 0; j < w; j++) {
      for (k = 0; k < 3; k++) {
        a = img[k][i][j];
        if (a > 255) a = 255;else if (a < 0) a = 0;else a = Math.round(a);
        s1 = (s1 + a) % 65521;
        s2 = (s2 + s1) % 65521;
        stream.push(a);
      }
    }

    stream.push(0);
  }

  adler32 = (s2 << 16) + s1;
  stream.push(adler32 >> 24 & 255);
  stream.push(adler32 >> 16 & 255);
  stream.push(adler32 >> 8 & 255);
  stream.push(adler32 & 255);
  length = stream.length - 41;
  stream[33] = length >> 24 & 255;
  stream[34] = length >> 16 & 255;
  stream[35] = length >> 8 & 255;
  stream[36] = length & 255;
  crc32 = crc32Array(stream, 37);
  stream.push(crc32 >> 24 & 255);
  stream.push(crc32 >> 16 & 255);
  stream.push(crc32 >> 8 & 255);
  stream.push(crc32 & 255);
  stream.push(0);
  stream.push(0);
  stream.push(0);
  stream.push(0); //    a = stream.length;

  stream.push(73); // I

  stream.push(69); // E

  stream.push(78); // N

  stream.push(68); // D

  stream.push(174); // CRC1

  stream.push(66); // CRC2

  stream.push(96); // CRC3

  stream.push(130); // CRC4

  return 'data:image/png;base64,' + base64(stream);
}; // 2. Linear algebra with Arrays.


numeric._dim = function _dim(x) {
  var ret = [];

  while (_typeof(x) === "object") {
    ret.push(x.length);
    x = x[0];
  }

  return ret;
};

numeric.dim = function dim(x) {
  var y, z;

  if (_typeof(x) === "object") {
    y = x[0];

    if (_typeof(y) === "object") {
      z = y[0];

      if (_typeof(z) === "object") {
        return numeric._dim(x);
      }

      return [x.length, y.length];
    }

    return [x.length];
  }

  return [];
};

numeric.mapreduce = function mapreduce(body, init) {
  return Function('x', 'accum', '_s', '_k', 'if(typeof accum === "undefined") accum = ' + init + ';\n' + 'if(typeof x === "number") { var xi = x; ' + body + '; return accum; }\n' + 'if(typeof _s === "undefined") _s = numeric.dim(x);\n' + 'if(typeof _k === "undefined") _k = 0;\n' + 'var _n = _s[_k];\n' + 'var i,xi;\n' + 'if(_k < _s.length-1) {\n' + '    for(i=_n-1;i>=0;i--) {\n' + '        accum = arguments.callee(x[i],accum,_s,_k+1);\n' + '    }' + '    return accum;\n' + '}\n' + 'for(i=_n-1;i>=1;i-=2) { \n' + '    xi = x[i];\n' + '    ' + body + ';\n' + '    xi = x[i-1];\n' + '    ' + body + ';\n' + '}\n' + 'if(i === 0) {\n' + '    xi = x[i];\n' + '    ' + body + '\n' + '}\n' + 'return accum;');
};

numeric.mapreduce2 = function mapreduce2(body, setup) {
  return Function('x', 'var n = x.length;\n' + 'var i,xi;\n' + setup + ';\n' + 'for(i=n-1;i!==-1;--i) { \n' + '    xi = x[i];\n' + '    ' + body + ';\n' + '}\n' + 'return accum;');
};

numeric.same = function same(x, y) {
  var i, n;

  if (!(x instanceof Array) || !(y instanceof Array)) {
    return false;
  }

  n = x.length;

  if (n !== y.length) {
    return false;
  }

  for (i = 0; i < n; i++) {
    if (x[i] === y[i]) {
      continue;
    }

    if (_typeof(x[i]) === "object") {
      if (!same(x[i], y[i])) return false;
    } else {
      return false;
    }
  }

  return true;
};

numeric.rep = function rep(s, v, k) {
  if (typeof k === "undefined") {
    k = 0;
  }

  var n = s[k],
      ret = Array(n),
      i;

  if (k === s.length - 1) {
    for (i = n - 2; i >= 0; i -= 2) {
      ret[i + 1] = v;
      ret[i] = v;
    }

    if (i === -1) {
      ret[0] = v;
    }

    return ret;
  }

  for (i = n - 1; i >= 0; i--) {
    ret[i] = numeric.rep(s, v, k + 1);
  }

  return ret;
};

numeric.dotMMsmall = function dotMMsmall(x, y) {
  var i, j, k, p, q, r, ret, foo, bar, woo, i0, k0, p0, r0;
  p = x.length;
  q = y.length;
  r = y[0].length;
  ret = Array(p);

  for (i = p - 1; i >= 0; i--) {
    foo = Array(r);
    bar = x[i];

    for (k = r - 1; k >= 0; k--) {
      woo = bar[q - 1] * y[q - 1][k];

      for (j = q - 2; j >= 1; j -= 2) {
        i0 = j - 1;
        woo += bar[j] * y[j][k] + bar[i0] * y[i0][k];
      }

      if (j === 0) {
        woo += bar[0] * y[0][k];
      }

      foo[k] = woo;
    }

    ret[i] = foo;
  }

  return ret;
};

numeric._getCol = function _getCol(A, j, x) {
  var n = A.length,
      i;

  for (i = n - 1; i > 0; --i) {
    x[i] = A[i][j];
    --i;
    x[i] = A[i][j];
  }

  if (i === 0) x[0] = A[0][j];
};

numeric.dotMMbig = function dotMMbig(x, y) {
  var gc = numeric._getCol,
      p = y.length,
      v = Array(p);
  var m = x.length,
      n = y[0].length,
      A = new Array(m),
      xj;
  var VV = numeric.dotVV;
  var i, j, k, z;
  --p;
  --m;

  for (i = m; i !== -1; --i) {
    A[i] = Array(n);
  }

  --n;

  for (i = n; i !== -1; --i) {
    gc(y, i, v);

    for (j = m; j !== -1; --j) {
      z = 0;
      xj = x[j];
      A[j][i] = VV(xj, v);
    }
  }

  return A;
};

numeric.dotMV = function dotMV(x, y) {
  var p = x.length,
      q = y.length,
      i;
  var ret = Array(p),
      dotVV = numeric.dotVV;

  for (i = p - 1; i >= 0; i--) {
    ret[i] = dotVV(x[i], y);
  }

  return ret;
};

numeric.dotVM = function dotVM(x, y) {
  var i, j, k, p, q, r, ret, foo, bar, woo, i0, k0, p0, r0, s1, s2, s3, baz, accum;
  p = x.length;
  q = y[0].length;
  ret = Array(q);

  for (k = q - 1; k >= 0; k--) {
    woo = x[p - 1] * y[p - 1][k];

    for (j = p - 2; j >= 1; j -= 2) {
      i0 = j - 1;
      woo += x[j] * y[j][k] + x[i0] * y[i0][k];
    }

    if (j === 0) {
      woo += x[0] * y[0][k];
    }

    ret[k] = woo;
  }

  return ret;
};

numeric.dotVV = function dotVV(x, y) {
  var i,
      n = x.length,
      i1,
      ret = x[n - 1] * y[n - 1];

  for (i = n - 2; i >= 1; i -= 2) {
    i1 = i - 1;
    ret += x[i] * y[i] + x[i1] * y[i1];
  }

  if (i === 0) {
    ret += x[0] * y[0];
  }

  return ret;
};

numeric.dot = function dot(x, y) {
  var d = numeric.dim;

  switch (d(x).length * 1000 + d(y).length) {
    case 2002:
      if (y.length < 10) return numeric.dotMMsmall(x, y);else return numeric.dotMMbig(x, y);

    case 2001:
      return numeric.dotMV(x, y);

    case 1002:
      return numeric.dotVM(x, y);

    case 1001:
      return numeric.dotVV(x, y);

    case 1000:
      return numeric.mulVS(x, y);

    case 1:
      return numeric.mulSV(x, y);

    case 0:
      return x * y;

    default:
      throw new Error('numeric.dot only works on vectors and matrices');
  }
};

numeric.diag = function diag(d) {
  var i,
      i1,
      j,
      n = d.length,
      A = Array(n),
      Ai;

  for (i = n - 1; i >= 0; i--) {
    Ai = Array(n);
    i1 = i + 2;

    for (j = n - 1; j >= i1; j -= 2) {
      Ai[j] = 0;
      Ai[j - 1] = 0;
    }

    if (j > i) {
      Ai[j] = 0;
    }

    Ai[i] = d[i];

    for (j = i - 1; j >= 1; j -= 2) {
      Ai[j] = 0;
      Ai[j - 1] = 0;
    }

    if (j === 0) {
      Ai[0] = 0;
    }

    A[i] = Ai;
  }

  return A;
};

numeric.getDiag = function (A) {
  var n = Math.min(A.length, A[0].length),
      i,
      ret = Array(n);

  for (i = n - 1; i >= 1; --i) {
    ret[i] = A[i][i];
    --i;
    ret[i] = A[i][i];
  }

  if (i === 0) {
    ret[0] = A[0][0];
  }

  return ret;
};

numeric.identity = function identity(n) {
  return numeric.diag(numeric.rep([n], 1));
};

numeric.pointwise = function pointwise(params, body, setup) {
  if (typeof setup === "undefined") {
    setup = "";
  }

  var fun = [];
  var k;
  var avec = /\[i\]$/,
      p,
      thevec = '';
  var haveret = false;

  for (k = 0; k < params.length; k++) {
    if (avec.test(params[k])) {
      p = params[k].substring(0, params[k].length - 3);
      thevec = p;
    } else {
      p = params[k];
    }

    if (p === 'ret') haveret = true;
    fun.push(p);
  }

  fun[params.length] = '_s';
  fun[params.length + 1] = '_k';
  fun[params.length + 2] = 'if(typeof _s === "undefined") _s = numeric.dim(' + thevec + ');\n' + 'if(typeof _k === "undefined") _k = 0;\n' + 'var _n = _s[_k];\n' + 'var i' + (haveret ? '' : ', ret = Array(_n)') + ';\n' + 'if(_k < _s.length-1) {\n' + '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee(' + params.join(',') + ',_s,_k+1);\n' + '    return ret;\n' + '}\n' + setup + '\n' + 'for(i=_n-1;i!==-1;--i) {\n' + '    ' + body + '\n' + '}\n' + 'return ret;';
  return Function.apply(null, fun);
};

numeric.pointwise2 = function pointwise2(params, body, setup) {
  if (typeof setup === "undefined") {
    setup = "";
  }

  var fun = [];
  var k;
  var avec = /\[i\]$/,
      p,
      thevec = '';
  var haveret = false;

  for (k = 0; k < params.length; k++) {
    if (avec.test(params[k])) {
      p = params[k].substring(0, params[k].length - 3);
      thevec = p;
    } else {
      p = params[k];
    }

    if (p === 'ret') haveret = true;
    fun.push(p);
  }

  fun[params.length] = 'var _n = ' + thevec + '.length;\n' + 'var i' + (haveret ? '' : ', ret = Array(_n)') + ';\n' + setup + '\n' + 'for(i=_n-1;i!==-1;--i) {\n' + body + '\n' + '}\n' + 'return ret;';
  return Function.apply(null, fun);
};

numeric._biforeach = function _biforeach(x, y, s, k, f) {
  if (k === s.length - 1) {
    f(x, y);
    return;
  }

  var i,
      n = s[k];

  for (i = n - 1; i >= 0; i--) {
    _biforeach(_typeof(x) === "object" ? x[i] : x, _typeof(y) === "object" ? y[i] : y, s, k + 1, f);
  }
};

numeric._biforeach2 = function _biforeach2(x, y, s, k, f) {
  if (k === s.length - 1) {
    return f(x, y);
  }

  var i,
      n = s[k],
      ret = Array(n);

  for (i = n - 1; i >= 0; --i) {
    ret[i] = _biforeach2(_typeof(x) === "object" ? x[i] : x, _typeof(y) === "object" ? y[i] : y, s, k + 1, f);
  }

  return ret;
};

numeric._foreach = function _foreach(x, s, k, f) {
  if (k === s.length - 1) {
    f(x);
    return;
  }

  var i,
      n = s[k];

  for (i = n - 1; i >= 0; i--) {
    _foreach(x[i], s, k + 1, f);
  }
};

numeric._foreach2 = function _foreach2(x, s, k, f) {
  if (k === s.length - 1) {
    return f(x);
  }

  var i,
      n = s[k],
      ret = Array(n);

  for (i = n - 1; i >= 0; i--) {
    ret[i] = _foreach2(x[i], s, k + 1, f);
  }

  return ret;
};
/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');
numeric.allV = numeric.mapreduce('if(!xi) return false;','true');
numeric.any = function(x) { if(typeof x.length === "undefined") return x; return numeric.anyV(x); }
numeric.all = function(x) { if(typeof x.length === "undefined") return x; return numeric.allV(x); }*/


numeric.ops2 = {
  add: '+',
  sub: '-',
  mul: '*',
  div: '/',
  mod: '%',
  and: '&&',
  or: '||',
  eq: '===',
  neq: '!==',
  lt: '<',
  gt: '>',
  leq: '<=',
  geq: '>=',
  band: '&',
  bor: '|',
  bxor: '^',
  lshift: '<<',
  rshift: '>>',
  rrshift: '>>>'
};
numeric.opseq = {
  addeq: '+=',
  subeq: '-=',
  muleq: '*=',
  diveq: '/=',
  modeq: '%=',
  lshifteq: '<<=',
  rshifteq: '>>=',
  rrshifteq: '>>>=',
  bandeq: '&=',
  boreq: '|=',
  bxoreq: '^='
};
numeric.mathfuns = ['abs', 'acos', 'asin', 'atan', 'ceil', 'cos', 'exp', 'floor', 'log', 'round', 'sin', 'sqrt', 'tan', 'isNaN', 'isFinite'];
numeric.mathfuns2 = ['atan2', 'pow', 'max', 'min'];
numeric.ops1 = {
  neg: '-',
  not: '!',
  bnot: '~',
  clone: ''
};
numeric.mapreducers = {
  any: ['if(xi) return true;', 'var accum = false;'],
  all: ['if(!xi) return false;', 'var accum = true;'],
  sum: ['accum += xi;', 'var accum = 0;'],
  prod: ['accum *= xi;', 'var accum = 1;'],
  norm2Squared: ['accum += xi*xi;', 'var accum = 0;'],
  norminf: ['accum = max(accum,abs(xi));', 'var accum = 0, max = Math.max, abs = Math.abs;'],
  norm1: ['accum += abs(xi)', 'var accum = 0, abs = Math.abs;'],
  sup: ['accum = max(accum,xi);', 'var accum = -Infinity, max = Math.max;'],
  inf: ['accum = min(accum,xi);', 'var accum = Infinity, min = Math.min;']
};

(function () {
  var i, o;

  for (i = 0; i < numeric.mathfuns2.length; ++i) {
    o = numeric.mathfuns2[i];
    numeric.ops2[o] = o;
  }

  for (i in numeric.ops2) {
    if (numeric.ops2.hasOwnProperty(i)) {
      o = numeric.ops2[i];
      var code,
          codeeq,
          setup = '';

      if (numeric.myIndexOf.call(numeric.mathfuns2, i) !== -1) {
        setup = 'var ' + o + ' = Math.' + o + ';\n';

        code = function code(r, x, y) {
          return r + ' = ' + o + '(' + x + ',' + y + ')';
        };

        codeeq = function codeeq(x, y) {
          return x + ' = ' + o + '(' + x + ',' + y + ')';
        };
      } else {
        code = function code(r, x, y) {
          return r + ' = ' + x + ' ' + o + ' ' + y;
        };

        if (numeric.opseq.hasOwnProperty(i + 'eq')) {
          codeeq = function codeeq(x, y) {
            return x + ' ' + o + '= ' + y;
          };
        } else {
          codeeq = function codeeq(x, y) {
            return x + ' = ' + x + ' ' + o + ' ' + y;
          };
        }
      }

      numeric[i + 'VV'] = numeric.pointwise2(['x[i]', 'y[i]'], code('ret[i]', 'x[i]', 'y[i]'), setup);
      numeric[i + 'SV'] = numeric.pointwise2(['x', 'y[i]'], code('ret[i]', 'x', 'y[i]'), setup);
      numeric[i + 'VS'] = numeric.pointwise2(['x[i]', 'y'], code('ret[i]', 'x[i]', 'y'), setup);
      numeric[i] = Function('var n = arguments.length, i, x = arguments[0], y;\n' + 'var VV = numeric.' + i + 'VV, VS = numeric.' + i + 'VS, SV = numeric.' + i + 'SV;\n' + 'var dim = numeric.dim;\n' + 'for(i=1;i!==n;++i) { \n' + '  y = arguments[i];\n' + '  if(typeof x === "object") {\n' + '      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n' + '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n' + '  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n' + '  else ' + codeeq('x', 'y') + '\n' + '}\nreturn x;\n');
      numeric[o] = numeric[i];
      numeric[i + 'eqV'] = numeric.pointwise2(['ret[i]', 'x[i]'], codeeq('ret[i]', 'x[i]'), setup);
      numeric[i + 'eqS'] = numeric.pointwise2(['ret[i]', 'x'], codeeq('ret[i]', 'x'), setup);
      numeric[i + 'eq'] = Function('var n = arguments.length, i, x = arguments[0], y;\n' + 'var V = numeric.' + i + 'eqV, S = numeric.' + i + 'eqS\n' + 'var s = numeric.dim(x);\n' + 'for(i=1;i!==n;++i) { \n' + '  y = arguments[i];\n' + '  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n' + '  else numeric._biforeach(x,y,s,0,S);\n' + '}\nreturn x;\n');
    }
  }

  for (i = 0; i < numeric.mathfuns2.length; ++i) {
    o = numeric.mathfuns2[i];
    delete numeric.ops2[o];
  }

  for (i = 0; i < numeric.mathfuns.length; ++i) {
    o = numeric.mathfuns[i];
    numeric.ops1[o] = o;
  }

  for (i in numeric.ops1) {
    if (numeric.ops1.hasOwnProperty(i)) {
      setup = '';
      o = numeric.ops1[i];

      if (numeric.myIndexOf.call(numeric.mathfuns, i) !== -1) {
        if (Math.hasOwnProperty(o)) setup = 'var ' + o + ' = Math.' + o + ';\n';
      }

      numeric[i + 'eqV'] = numeric.pointwise2(['ret[i]'], 'ret[i] = ' + o + '(ret[i]);', setup);
      numeric[i + 'eq'] = Function('x', 'if(typeof x !== "object") return ' + o + 'x\n' + 'var i;\n' + 'var V = numeric.' + i + 'eqV;\n' + 'var s = numeric.dim(x);\n' + 'numeric._foreach(x,s,0,V);\n' + 'return x;\n');
      numeric[i + 'V'] = numeric.pointwise2(['x[i]'], 'ret[i] = ' + o + '(x[i]);', setup);
      numeric[i] = Function('x', 'if(typeof x !== "object") return ' + o + '(x)\n' + 'var i;\n' + 'var V = numeric.' + i + 'V;\n' + 'var s = numeric.dim(x);\n' + 'return numeric._foreach2(x,s,0,V);\n');
    }
  }

  for (i = 0; i < numeric.mathfuns.length; ++i) {
    o = numeric.mathfuns[i];
    delete numeric.ops1[o];
  }

  for (i in numeric.mapreducers) {
    if (numeric.mapreducers.hasOwnProperty(i)) {
      o = numeric.mapreducers[i];
      numeric[i + 'V'] = numeric.mapreduce2(o[0], o[1]);
      numeric[i] = Function('x', 's', 'k', o[1] + 'if(typeof x !== "object") {' + '    xi = x;\n' + o[0] + ';\n' + '    return accum;\n' + '}' + 'if(typeof s === "undefined") s = numeric.dim(x);\n' + 'if(typeof k === "undefined") k = 0;\n' + 'if(k === s.length-1) return numeric.' + i + 'V(x);\n' + 'var xi;\n' + 'var n = x.length, i;\n' + 'for(i=n-1;i!==-1;--i) {\n' + '   xi = arguments.callee(x[i]);\n' + o[0] + ';\n' + '}\n' + 'return accum;\n');
    }
  }
})();

numeric.truncVV = numeric.pointwise(['x[i]', 'y[i]'], 'ret[i] = round(x[i]/y[i])*y[i];', 'var round = Math.round;');
numeric.truncVS = numeric.pointwise(['x[i]', 'y'], 'ret[i] = round(x[i]/y)*y;', 'var round = Math.round;');
numeric.truncSV = numeric.pointwise(['x', 'y[i]'], 'ret[i] = round(x/y[i])*y[i];', 'var round = Math.round;');

numeric.trunc = function trunc(x, y) {
  if (_typeof(x) === "object") {
    if (_typeof(y) === "object") return numeric.truncVV(x, y);
    return numeric.truncVS(x, y);
  }

  if (_typeof(y) === "object") return numeric.truncSV(x, y);
  return Math.round(x / y) * y;
};

numeric.inv = function inv(x) {
  var s = numeric.dim(x),
      abs = Math.abs,
      m = s[0],
      n = s[1];
  var A = numeric.clone(x),
      Ai,
      Aj;
  var I = numeric.identity(m),
      Ii,
      Ij;
  var i, j, k, x;

  for (j = 0; j < n; ++j) {
    var i0 = -1;
    var v0 = -1;

    for (i = j; i !== m; ++i) {
      k = abs(A[i][j]);

      if (k > v0) {
        i0 = i;
        v0 = k;
      }
    }

    Aj = A[i0];
    A[i0] = A[j];
    A[j] = Aj;
    Ij = I[i0];
    I[i0] = I[j];
    I[j] = Ij;
    x = Aj[j];

    for (k = j; k !== n; ++k) {
      Aj[k] /= x;
    }

    for (k = n - 1; k !== -1; --k) {
      Ij[k] /= x;
    }

    for (i = m - 1; i !== -1; --i) {
      if (i !== j) {
        Ai = A[i];
        Ii = I[i];
        x = Ai[j];

        for (k = j + 1; k !== n; ++k) {
          Ai[k] -= Aj[k] * x;
        }

        for (k = n - 1; k > 0; --k) {
          Ii[k] -= Ij[k] * x;
          --k;
          Ii[k] -= Ij[k] * x;
        }

        if (k === 0) Ii[0] -= Ij[0] * x;
      }
    }
  }

  return I;
};

numeric.det = function det(x) {
  var s = numeric.dim(x);

  if (s.length !== 2 || s[0] !== s[1]) {
    throw new Error('numeric: det() only works on square matrices');
  }

  var n = s[0],
      ret = 1,
      i,
      j,
      k,
      A = numeric.clone(x),
      Aj,
      Ai,
      alpha,
      temp,
      k1,
      k2,
      k3;

  for (j = 0; j < n - 1; j++) {
    k = j;

    for (i = j + 1; i < n; i++) {
      if (Math.abs(A[i][j]) > Math.abs(A[k][j])) {
        k = i;
      }
    }

    if (k !== j) {
      temp = A[k];
      A[k] = A[j];
      A[j] = temp;
      ret *= -1;
    }

    Aj = A[j];

    for (i = j + 1; i < n; i++) {
      Ai = A[i];
      alpha = Ai[j] / Aj[j];

      for (k = j + 1; k < n - 1; k += 2) {
        k1 = k + 1;
        Ai[k] -= Aj[k] * alpha;
        Ai[k1] -= Aj[k1] * alpha;
      }

      if (k !== n) {
        Ai[k] -= Aj[k] * alpha;
      }
    }

    if (Aj[j] === 0) {
      return 0;
    }

    ret *= Aj[j];
  }

  return ret * A[j][j];
};

numeric.transpose = function transpose(x) {
  var i,
      j,
      m = x.length,
      n = x[0].length,
      ret = Array(n),
      A0,
      A1,
      Bj;

  for (j = 0; j < n; j++) {
    ret[j] = Array(m);
  }

  for (i = m - 1; i >= 1; i -= 2) {
    A1 = x[i];
    A0 = x[i - 1];

    for (j = n - 1; j >= 1; --j) {
      Bj = ret[j];
      Bj[i] = A1[j];
      Bj[i - 1] = A0[j];
      --j;
      Bj = ret[j];
      Bj[i] = A1[j];
      Bj[i - 1] = A0[j];
    }

    if (j === 0) {
      Bj = ret[0];
      Bj[i] = A1[0];
      Bj[i - 1] = A0[0];
    }
  }

  if (i === 0) {
    A0 = x[0];

    for (j = n - 1; j >= 1; --j) {
      ret[j][0] = A0[j];
      --j;
      ret[j][0] = A0[j];
    }

    if (j === 0) {
      ret[0][0] = A0[0];
    }
  }

  return ret;
};

numeric.negtranspose = function negtranspose(x) {
  var i,
      j,
      m = x.length,
      n = x[0].length,
      ret = Array(n),
      A0,
      A1,
      Bj;

  for (j = 0; j < n; j++) {
    ret[j] = Array(m);
  }

  for (i = m - 1; i >= 1; i -= 2) {
    A1 = x[i];
    A0 = x[i - 1];

    for (j = n - 1; j >= 1; --j) {
      Bj = ret[j];
      Bj[i] = -A1[j];
      Bj[i - 1] = -A0[j];
      --j;
      Bj = ret[j];
      Bj[i] = -A1[j];
      Bj[i - 1] = -A0[j];
    }

    if (j === 0) {
      Bj = ret[0];
      Bj[i] = -A1[0];
      Bj[i - 1] = -A0[0];
    }
  }

  if (i === 0) {
    A0 = x[0];

    for (j = n - 1; j >= 1; --j) {
      ret[j][0] = -A0[j];
      --j;
      ret[j][0] = -A0[j];
    }

    if (j === 0) {
      ret[0][0] = -A0[0];
    }
  }

  return ret;
};

numeric._random = function _random(s, k) {
  var i,
      n = s[k],
      ret = Array(n),
      rnd;

  if (k === s.length - 1) {
    rnd = Math.random;

    for (i = n - 1; i >= 1; i -= 2) {
      ret[i] = rnd();
      ret[i - 1] = rnd();
    }

    if (i === 0) {
      ret[0] = rnd();
    }

    return ret;
  }

  for (i = n - 1; i >= 0; i--) {
    ret[i] = _random(s, k + 1);
  }

  return ret;
};

numeric.random = function random(s) {
  return numeric._random(s, 0);
};

numeric.norm2 = function norm2(x) {
  return Math.sqrt(numeric.norm2Squared(x));
};

numeric.linspace = function linspace(a, b, n) {
  if (typeof n === "undefined") n = Math.max(Math.round(b - a) + 1, 1);

  if (n < 2) {
    return n === 1 ? [a] : [];
  }

  var i,
      ret = Array(n);
  n--;

  for (i = n; i >= 0; i--) {
    ret[i] = (i * b + (n - i) * a) / n;
  }

  return ret;
};

numeric.getBlock = function getBlock(x, from, to) {
  var s = numeric.dim(x);

  function foo(x, k) {
    var i,
        a = from[k],
        n = to[k] - a,
        ret = Array(n);

    if (k === s.length - 1) {
      for (i = n; i >= 0; i--) {
        ret[i] = x[i + a];
      }

      return ret;
    }

    for (i = n; i >= 0; i--) {
      ret[i] = foo(x[i + a], k + 1);
    }

    return ret;
  }

  return foo(x, 0);
};

numeric.setBlock = function setBlock(x, from, to, B) {
  var s = numeric.dim(x);

  function foo(x, y, k) {
    var i,
        a = from[k],
        n = to[k] - a;

    if (k === s.length - 1) {
      for (i = n; i >= 0; i--) {
        x[i + a] = y[i];
      }
    }

    for (i = n; i >= 0; i--) {
      foo(x[i + a], y[i], k + 1);
    }
  }

  foo(x, B, 0);
  return x;
};

numeric.getRange = function getRange(A, I, J) {
  var m = I.length,
      n = J.length;
  var i, j;
  var B = Array(m),
      Bi,
      AI;

  for (i = m - 1; i !== -1; --i) {
    B[i] = Array(n);
    Bi = B[i];
    AI = A[I[i]];

    for (j = n - 1; j !== -1; --j) {
      Bi[j] = AI[J[j]];
    }
  }

  return B;
};

numeric.blockMatrix = function blockMatrix(X) {
  var s = numeric.dim(X);
  if (s.length < 4) return numeric.blockMatrix([X]);
  var m = s[0],
      n = s[1],
      M,
      N,
      i,
      j,
      Xij;
  M = 0;
  N = 0;

  for (i = 0; i < m; ++i) {
    M += X[i][0].length;
  }

  for (j = 0; j < n; ++j) {
    N += X[0][j][0].length;
  }

  var Z = Array(M);

  for (i = 0; i < M; ++i) {
    Z[i] = Array(N);
  }

  var I = 0,
      J,
      ZI,
      k,
      l,
      Xijk;

  for (i = 0; i < m; ++i) {
    J = N;

    for (j = n - 1; j !== -1; --j) {
      Xij = X[i][j];
      J -= Xij[0].length;

      for (k = Xij.length - 1; k !== -1; --k) {
        Xijk = Xij[k];
        ZI = Z[I + k];

        for (l = Xijk.length - 1; l !== -1; --l) {
          ZI[J + l] = Xijk[l];
        }
      }
    }

    I += X[i][0].length;
  }

  return Z;
};

numeric.tensor = function tensor(x, y) {
  if (typeof x === "number" || typeof y === "number") return numeric.mul(x, y);
  var s1 = numeric.dim(x),
      s2 = numeric.dim(y);

  if (s1.length !== 1 || s2.length !== 1) {
    throw new Error('numeric: tensor product is only defined for vectors');
  }

  var m = s1[0],
      n = s2[0],
      A = Array(m),
      Ai,
      i,
      j,
      xi;

  for (i = m - 1; i >= 0; i--) {
    Ai = Array(n);
    xi = x[i];

    for (j = n - 1; j >= 3; --j) {
      Ai[j] = xi * y[j];
      --j;
      Ai[j] = xi * y[j];
      --j;
      Ai[j] = xi * y[j];
      --j;
      Ai[j] = xi * y[j];
    }

    while (j >= 0) {
      Ai[j] = xi * y[j];
      --j;
    }

    A[i] = Ai;
  }

  return A;
}; // 3. The Tensor type T


numeric.T = function T(x, y) {
  this.x = x;
  this.y = y;
};

numeric.t = function t(x, y) {
  return new numeric.T(x, y);
};

numeric.Tbinop = function Tbinop(rr, rc, cr, cc, setup) {
  var io = numeric.indexOf;

  if (typeof setup !== "string") {
    var k;
    setup = '';

    for (k in numeric) {
      if (numeric.hasOwnProperty(k) && (rr.indexOf(k) >= 0 || rc.indexOf(k) >= 0 || cr.indexOf(k) >= 0 || cc.indexOf(k) >= 0) && k.length > 1) {
        setup += 'var ' + k + ' = numeric.' + k + ';\n';
      }
    }
  }

  return Function(['y'], 'var x = this;\n' + 'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n' + setup + '\n' + 'if(x.y) {' + '  if(y.y) {' + '    return new numeric.T(' + cc + ');\n' + '  }\n' + '  return new numeric.T(' + cr + ');\n' + '}\n' + 'if(y.y) {\n' + '  return new numeric.T(' + rc + ');\n' + '}\n' + 'return new numeric.T(' + rr + ');\n');
};

numeric.T.prototype.add = numeric.Tbinop('add(x.x,y.x)', 'add(x.x,y.x),y.y', 'add(x.x,y.x),x.y', 'add(x.x,y.x),add(x.y,y.y)');
numeric.T.prototype.sub = numeric.Tbinop('sub(x.x,y.x)', 'sub(x.x,y.x),neg(y.y)', 'sub(x.x,y.x),x.y', 'sub(x.x,y.x),sub(x.y,y.y)');
numeric.T.prototype.mul = numeric.Tbinop('mul(x.x,y.x)', 'mul(x.x,y.x),mul(x.x,y.y)', 'mul(x.x,y.x),mul(x.y,y.x)', 'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');

numeric.T.prototype.reciprocal = function reciprocal() {
  var mul = numeric.mul,
      div = numeric.div;

  if (this.y) {
    var d = numeric.add(mul(this.x, this.x), mul(this.y, this.y));
    return new numeric.T(div(this.x, d), div(numeric.neg(this.y), d));
  }

  return new T(div(1, this.x));
};

numeric.T.prototype.div = function div(y) {
  if (!(y instanceof numeric.T)) y = new numeric.T(y);

  if (y.y) {
    return this.mul(y.reciprocal());
  }

  var div = numeric.div;

  if (this.y) {
    return new numeric.T(div(this.x, y.x), div(this.y, y.x));
  }

  return new numeric.T(div(this.x, y.x));
};

numeric.T.prototype.dot = numeric.Tbinop('dot(x.x,y.x)', 'dot(x.x,y.x),dot(x.x,y.y)', 'dot(x.x,y.x),dot(x.y,y.x)', 'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))');

numeric.T.prototype.transpose = function transpose() {
  var t = numeric.transpose,
      x = this.x,
      y = this.y;

  if (y) {
    return new numeric.T(t(x), t(y));
  }

  return new numeric.T(t(x));
};

numeric.T.prototype.transjugate = function transjugate() {
  var t = numeric.transpose,
      x = this.x,
      y = this.y;

  if (y) {
    return new numeric.T(t(x), numeric.negtranspose(y));
  }

  return new numeric.T(t(x));
};

numeric.Tunop = function Tunop(r, c, s) {
  if (typeof s !== "string") {
    s = '';
  }

  return Function('var x = this;\n' + s + '\n' + 'if(x.y) {' + '  ' + c + ';\n' + '}\n' + r + ';\n');
};

numeric.T.prototype.exp = numeric.Tunop('return new numeric.T(ex)', 'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))', 'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');
numeric.T.prototype.conj = numeric.Tunop('return new numeric.T(x.x);', 'return new numeric.T(x.x,numeric.neg(x.y));');
numeric.T.prototype.neg = numeric.Tunop('return new numeric.T(neg(x.x));', 'return new numeric.T(neg(x.x),neg(x.y));', 'var neg = numeric.neg;');
numeric.T.prototype.sin = numeric.Tunop('return new numeric.T(numeric.sin(x.x))', 'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');
numeric.T.prototype.cos = numeric.Tunop('return new numeric.T(numeric.cos(x.x))', 'return x.exp().add(x.neg().exp()).div(2);');
numeric.T.prototype.abs = numeric.Tunop('return new numeric.T(numeric.abs(x.x));', 'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));', 'var mul = numeric.mul;');
numeric.T.prototype.log = numeric.Tunop('return new numeric.T(numeric.log(x.x));', 'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\n' + 'return new numeric.T(numeric.log(r.x),theta.x);');
numeric.T.prototype.norm2 = numeric.Tunop('return numeric.norm2(x.x);', 'var f = numeric.norm2Squared;\n' + 'return Math.sqrt(f(x.x)+f(x.y));');

numeric.T.prototype.inv = function inv() {
  var A = this;

  if (typeof A.y === "undefined") {
    return new numeric.T(numeric.inv(A.x));
  }

  var n = A.x.length,
      i,
      j,
      k;
  var Rx = numeric.identity(n),
      Ry = numeric.rep([n, n], 0);
  var Ax = numeric.clone(A.x),
      Ay = numeric.clone(A.y);
  var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;
  var i, j, k, d, d1, ax, ay, bx, by, temp;

  for (i = 0; i < n; i++) {
    ax = Ax[i][i];
    ay = Ay[i][i];
    d = ax * ax + ay * ay;
    k = i;

    for (j = i + 1; j < n; j++) {
      ax = Ax[j][i];
      ay = Ay[j][i];
      d1 = ax * ax + ay * ay;

      if (d1 > d) {
        k = j;
        d = d1;
      }
    }

    if (k !== i) {
      temp = Ax[i];
      Ax[i] = Ax[k];
      Ax[k] = temp;
      temp = Ay[i];
      Ay[i] = Ay[k];
      Ay[k] = temp;
      temp = Rx[i];
      Rx[i] = Rx[k];
      Rx[k] = temp;
      temp = Ry[i];
      Ry[i] = Ry[k];
      Ry[k] = temp;
    }

    Aix = Ax[i];
    Aiy = Ay[i];
    Rix = Rx[i];
    Riy = Ry[i];
    ax = Aix[i];
    ay = Aiy[i];

    for (j = i + 1; j < n; j++) {
      bx = Aix[j];
      by = Aiy[j];
      Aix[j] = (bx * ax + by * ay) / d;
      Aiy[j] = (by * ax - bx * ay) / d;
    }

    for (j = 0; j < n; j++) {
      bx = Rix[j];
      by = Riy[j];
      Rix[j] = (bx * ax + by * ay) / d;
      Riy[j] = (by * ax - bx * ay) / d;
    }

    for (j = i + 1; j < n; j++) {
      Ajx = Ax[j];
      Ajy = Ay[j];
      Rjx = Rx[j];
      Rjy = Ry[j];
      ax = Ajx[i];
      ay = Ajy[i];

      for (k = i + 1; k < n; k++) {
        bx = Aix[k];
        by = Aiy[k];
        Ajx[k] -= bx * ax - by * ay;
        Ajy[k] -= by * ax + bx * ay;
      }

      for (k = 0; k < n; k++) {
        bx = Rix[k];
        by = Riy[k];
        Rjx[k] -= bx * ax - by * ay;
        Rjy[k] -= by * ax + bx * ay;
      }
    }
  }

  for (i = n - 1; i > 0; i--) {
    Rix = Rx[i];
    Riy = Ry[i];

    for (j = i - 1; j >= 0; j--) {
      Rjx = Rx[j];
      Rjy = Ry[j];
      ax = Ax[j][i];
      ay = Ay[j][i];

      for (k = n - 1; k >= 0; k--) {
        bx = Rix[k];
        by = Riy[k];
        Rjx[k] -= ax * bx - ay * by;
        Rjy[k] -= ax * by + ay * bx;
      }
    }
  }

  return new numeric.T(Rx, Ry);
};

numeric.T.prototype.get = function get(i) {
  var x = this.x,
      y = this.y,
      k = 0,
      ik,
      n = i.length;

  if (y) {
    while (k < n) {
      ik = i[k];
      x = x[ik];
      y = y[ik];
      k++;
    }

    return new numeric.T(x, y);
  }

  while (k < n) {
    ik = i[k];
    x = x[ik];
    k++;
  }

  return new numeric.T(x);
};

numeric.T.prototype.set = function set(i, v) {
  var x = this.x,
      y = this.y,
      k = 0,
      ik,
      n = i.length,
      vx = v.x,
      vy = v.y;

  if (n === 0) {
    if (vy) {
      this.y = vy;
    } else if (y) {
      this.y = undefined;
    }

    this.x = x;
    return this;
  }

  if (vy) {
    if (y) {
      /* ok */
    } else {
      y = numeric.rep(numeric.dim(x), 0);
      this.y = y;
    }

    while (k < n - 1) {
      ik = i[k];
      x = x[ik];
      y = y[ik];
      k++;
    }

    ik = i[k];
    x[ik] = vx;
    y[ik] = vy;
    return this;
  }

  if (y) {
    while (k < n - 1) {
      ik = i[k];
      x = x[ik];
      y = y[ik];
      k++;
    }

    ik = i[k];
    x[ik] = vx;
    if (vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx), 0);else y[ik] = 0;
    return this;
  }

  while (k < n - 1) {
    ik = i[k];
    x = x[ik];
    k++;
  }

  ik = i[k];
  x[ik] = vx;
  return this;
};

numeric.T.prototype.getRows = function getRows(i0, i1) {
  var n = i1 - i0 + 1,
      j;
  var rx = Array(n),
      ry,
      x = this.x,
      y = this.y;

  for (j = i0; j <= i1; j++) {
    rx[j - i0] = x[j];
  }

  if (y) {
    ry = Array(n);

    for (j = i0; j <= i1; j++) {
      ry[j - i0] = y[j];
    }

    return new numeric.T(rx, ry);
  }

  return new numeric.T(rx);
};

numeric.T.prototype.setRows = function setRows(i0, i1, A) {
  var j;
  var rx = this.x,
      ry = this.y,
      x = A.x,
      y = A.y;

  for (j = i0; j <= i1; j++) {
    rx[j] = x[j - i0];
  }

  if (y) {
    if (!ry) {
      ry = numeric.rep(numeric.dim(rx), 0);
      this.y = ry;
    }

    for (j = i0; j <= i1; j++) {
      ry[j] = y[j - i0];
    }
  } else if (ry) {
    for (j = i0; j <= i1; j++) {
      ry[j] = numeric.rep([x[j - i0].length], 0);
    }
  }

  return this;
};

numeric.T.prototype.getRow = function getRow(k) {
  var x = this.x,
      y = this.y;

  if (y) {
    return new numeric.T(x[k], y[k]);
  }

  return new numeric.T(x[k]);
};

numeric.T.prototype.setRow = function setRow(i, v) {
  var rx = this.x,
      ry = this.y,
      x = v.x,
      y = v.y;
  rx[i] = x;

  if (y) {
    if (!ry) {
      ry = numeric.rep(numeric.dim(rx), 0);
      this.y = ry;
    }

    ry[i] = y;
  } else if (ry) {
    ry = numeric.rep([x.length], 0);
  }

  return this;
};

numeric.T.prototype.getBlock = function getBlock(from, to) {
  var x = this.x,
      y = this.y,
      b = numeric.getBlock;

  if (y) {
    return new numeric.T(b(x, from, to), b(y, from, to));
  }

  return new numeric.T(b(x, from, to));
};

numeric.T.prototype.setBlock = function setBlock(from, to, A) {
  if (!(A instanceof numeric.T)) A = new numeric.T(A);
  var x = this.x,
      y = this.y,
      b = numeric.setBlock,
      Ax = A.x,
      Ay = A.y;

  if (Ay) {
    if (!y) {
      this.y = numeric.rep(numeric.dim(this), 0);
      y = this.y;
    }

    b(x, from, to, Ax);
    b(y, from, to, Ay);
    return this;
  }

  b(x, from, to, Ax);
  if (y) b(y, from, to, numeric.rep(numeric.dim(Ax), 0));
};

numeric.T.rep = function rep(s, v) {
  var T = numeric.T;
  if (!(v instanceof T)) v = new T(v);
  var x = v.x,
      y = v.y,
      r = numeric.rep;
  if (y) return new T(r(s, x), r(s, y));
  return new T(r(s, x));
};

numeric.T.diag = function diag(d) {
  if (!(d instanceof numeric.T)) d = new numeric.T(d);
  var x = d.x,
      y = d.y,
      diag = numeric.diag;
  if (y) return new numeric.T(diag(x), diag(y));
  return new numeric.T(diag(x));
};

numeric.T.eig = function eig() {
  if (this.y) {
    throw new Error('eig: not implemented for complex matrices.');
  }

  return numeric.eig(this.x);
};

numeric.T.identity = function identity(n) {
  return new numeric.T(numeric.identity(n));
};

numeric.T.prototype.getDiag = function getDiag() {
  var n = numeric;
  var x = this.x,
      y = this.y;

  if (y) {
    return new n.T(n.getDiag(x), n.getDiag(y));
  }

  return new n.T(n.getDiag(x));
}; // 4. Eigenvalues of real matrices


numeric.house = function house(x) {
  var v = numeric.clone(x);
  var s = x[0] >= 0 ? 1 : -1;
  var alpha = s * numeric.norm2(x);
  v[0] += alpha;
  var foo = numeric.norm2(v);

  if (foo === 0) {
    /* this should not happen */
    throw new Error('eig: internal error');
  }

  return numeric.div(v, foo);
};

numeric.toUpperHessenberg = function toUpperHessenberg(me) {
  var s = numeric.dim(me);

  if (s.length !== 2 || s[0] !== s[1]) {
    throw new Error('numeric: toUpperHessenberg() only works on square matrices');
  }

  var m = s[0],
      i,
      j,
      k,
      x,
      v,
      A = numeric.clone(me),
      B,
      C,
      Ai,
      Ci,
      Q = numeric.identity(m),
      Qi;

  for (j = 0; j < m - 2; j++) {
    x = Array(m - j - 1);

    for (i = j + 1; i < m; i++) {
      x[i - j - 1] = A[i][j];
    }

    if (numeric.norm2(x) > 0) {
      v = numeric.house(x);
      B = numeric.getBlock(A, [j + 1, j], [m - 1, m - 1]);
      C = numeric.tensor(v, numeric.dot(v, B));

      for (i = j + 1; i < m; i++) {
        Ai = A[i];
        Ci = C[i - j - 1];

        for (k = j; k < m; k++) {
          Ai[k] -= 2 * Ci[k - j];
        }
      }

      B = numeric.getBlock(A, [0, j + 1], [m - 1, m - 1]);
      C = numeric.tensor(numeric.dot(B, v), v);

      for (i = 0; i < m; i++) {
        Ai = A[i];
        Ci = C[i];

        for (k = j + 1; k < m; k++) {
          Ai[k] -= 2 * Ci[k - j - 1];
        }
      }

      B = Array(m - j - 1);

      for (i = j + 1; i < m; i++) {
        B[i - j - 1] = Q[i];
      }

      C = numeric.tensor(v, numeric.dot(v, B));

      for (i = j + 1; i < m; i++) {
        Qi = Q[i];
        Ci = C[i - j - 1];

        for (k = 0; k < m; k++) {
          Qi[k] -= 2 * Ci[k];
        }
      }
    }
  }

  return {
    H: A,
    Q: Q
  };
};

numeric.epsilon = 2.220446049250313e-16;

numeric.QRFrancis = function (H, maxiter) {
  if (typeof maxiter === "undefined") {
    maxiter = 10000;
  }

  H = numeric.clone(H);
  var H0 = numeric.clone(H);
  var s = numeric.dim(H),
      m = s[0],
      x,
      v,
      a,
      b,
      c,
      d,
      det,
      tr,
      Hloc,
      Q = numeric.identity(m),
      Qi,
      Hi,
      B,
      C,
      Ci,
      i,
      j,
      k,
      iter;

  if (m < 3) {
    return {
      Q: Q,
      B: [[0, m - 1]]
    };
  }

  var epsilon = numeric.epsilon;

  for (iter = 0; iter < maxiter; iter++) {
    for (j = 0; j < m - 1; j++) {
      if (Math.abs(H[j + 1][j]) < epsilon * (Math.abs(H[j][j]) + Math.abs(H[j + 1][j + 1]))) {
        var QH1 = numeric.QRFrancis(numeric.getBlock(H, [0, 0], [j, j]), maxiter);
        var QH2 = numeric.QRFrancis(numeric.getBlock(H, [j + 1, j + 1], [m - 1, m - 1]), maxiter);
        B = Array(j + 1);

        for (i = 0; i <= j; i++) {
          B[i] = Q[i];
        }

        C = numeric.dot(QH1.Q, B);

        for (i = 0; i <= j; i++) {
          Q[i] = C[i];
        }

        B = Array(m - j - 1);

        for (i = j + 1; i < m; i++) {
          B[i - j - 1] = Q[i];
        }

        C = numeric.dot(QH2.Q, B);

        for (i = j + 1; i < m; i++) {
          Q[i] = C[i - j - 1];
        }

        return {
          Q: Q,
          B: QH1.B.concat(numeric.add(QH2.B, j + 1))
        };
      }
    }

    a = H[m - 2][m - 2];
    b = H[m - 2][m - 1];
    c = H[m - 1][m - 2];
    d = H[m - 1][m - 1];
    tr = a + d;
    det = a * d - b * c;
    Hloc = numeric.getBlock(H, [0, 0], [2, 2]);

    if (tr * tr >= 4 * det) {
      var s1, s2;
      s1 = 0.5 * (tr + Math.sqrt(tr * tr - 4 * det));
      s2 = 0.5 * (tr - Math.sqrt(tr * tr - 4 * det));
      Hloc = numeric.add(numeric.sub(numeric.dot(Hloc, Hloc), numeric.mul(Hloc, s1 + s2)), numeric.diag(numeric.rep([3], s1 * s2)));
    } else {
      Hloc = numeric.add(numeric.sub(numeric.dot(Hloc, Hloc), numeric.mul(Hloc, tr)), numeric.diag(numeric.rep([3], det)));
    }

    x = [Hloc[0][0], Hloc[1][0], Hloc[2][0]];
    v = numeric.house(x);
    B = [H[0], H[1], H[2]];
    C = numeric.tensor(v, numeric.dot(v, B));

    for (i = 0; i < 3; i++) {
      Hi = H[i];
      Ci = C[i];

      for (k = 0; k < m; k++) {
        Hi[k] -= 2 * Ci[k];
      }
    }

    B = numeric.getBlock(H, [0, 0], [m - 1, 2]);
    C = numeric.tensor(numeric.dot(B, v), v);

    for (i = 0; i < m; i++) {
      Hi = H[i];
      Ci = C[i];

      for (k = 0; k < 3; k++) {
        Hi[k] -= 2 * Ci[k];
      }
    }

    B = [Q[0], Q[1], Q[2]];
    C = numeric.tensor(v, numeric.dot(v, B));

    for (i = 0; i < 3; i++) {
      Qi = Q[i];
      Ci = C[i];

      for (k = 0; k < m; k++) {
        Qi[k] -= 2 * Ci[k];
      }
    }

    var J;

    for (j = 0; j < m - 2; j++) {
      for (k = j; k <= j + 1; k++) {
        if (Math.abs(H[k + 1][k]) < epsilon * (Math.abs(H[k][k]) + Math.abs(H[k + 1][k + 1]))) {
          var QH1 = numeric.QRFrancis(numeric.getBlock(H, [0, 0], [k, k]), maxiter);
          var QH2 = numeric.QRFrancis(numeric.getBlock(H, [k + 1, k + 1], [m - 1, m - 1]), maxiter);
          B = Array(k + 1);

          for (i = 0; i <= k; i++) {
            B[i] = Q[i];
          }

          C = numeric.dot(QH1.Q, B);

          for (i = 0; i <= k; i++) {
            Q[i] = C[i];
          }

          B = Array(m - k - 1);

          for (i = k + 1; i < m; i++) {
            B[i - k - 1] = Q[i];
          }

          C = numeric.dot(QH2.Q, B);

          for (i = k + 1; i < m; i++) {
            Q[i] = C[i - k - 1];
          }

          return {
            Q: Q,
            B: QH1.B.concat(numeric.add(QH2.B, k + 1))
          };
        }
      }

      J = Math.min(m - 1, j + 3);
      x = Array(J - j);

      for (i = j + 1; i <= J; i++) {
        x[i - j - 1] = H[i][j];
      }

      v = numeric.house(x);
      B = numeric.getBlock(H, [j + 1, j], [J, m - 1]);
      C = numeric.tensor(v, numeric.dot(v, B));

      for (i = j + 1; i <= J; i++) {
        Hi = H[i];
        Ci = C[i - j - 1];

        for (k = j; k < m; k++) {
          Hi[k] -= 2 * Ci[k - j];
        }
      }

      B = numeric.getBlock(H, [0, j + 1], [m - 1, J]);
      C = numeric.tensor(numeric.dot(B, v), v);

      for (i = 0; i < m; i++) {
        Hi = H[i];
        Ci = C[i];

        for (k = j + 1; k <= J; k++) {
          Hi[k] -= 2 * Ci[k - j - 1];
        }
      }

      B = Array(J - j);

      for (i = j + 1; i <= J; i++) {
        B[i - j - 1] = Q[i];
      }

      C = numeric.tensor(v, numeric.dot(v, B));

      for (i = j + 1; i <= J; i++) {
        Qi = Q[i];
        Ci = C[i - j - 1];

        for (k = 0; k < m; k++) {
          Qi[k] -= 2 * Ci[k];
        }
      }
    }
  }

  throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');
};

numeric.eig = function eig(A, maxiter) {
  var QH = numeric.toUpperHessenberg(A);
  var QB = numeric.QRFrancis(QH.H, maxiter);
  var T = numeric.T;
  var n = A.length,
      i,
      k,
      flag = false,
      B = QB.B,
      H = numeric.dot(QB.Q, numeric.dot(QH.H, numeric.transpose(QB.Q)));
  var Q = new T(numeric.dot(QB.Q, QH.Q)),
      Q0;
  var m = B.length,
      j;
  var a, b, c, d, p1, p2, disc, x, y, p, q, n1, n2;
  var sqrt = Math.sqrt;

  for (k = 0; k < m; k++) {
    i = B[k][0];

    if (i === B[k][1]) {// nothing
    } else {
      j = i + 1;
      a = H[i][i];
      b = H[i][j];
      c = H[j][i];
      d = H[j][j];
      if (b === 0 && c === 0) continue;
      p1 = -a - d;
      p2 = a * d - b * c;
      disc = p1 * p1 - 4 * p2;

      if (disc >= 0) {
        if (p1 < 0) x = -0.5 * (p1 - sqrt(disc));else x = -0.5 * (p1 + sqrt(disc));
        n1 = (a - x) * (a - x) + b * b;
        n2 = c * c + (d - x) * (d - x);

        if (n1 > n2) {
          n1 = sqrt(n1);
          p = (a - x) / n1;
          q = b / n1;
        } else {
          n2 = sqrt(n2);
          p = c / n2;
          q = (d - x) / n2;
        }

        Q0 = new T([[q, -p], [p, q]]);
        Q.setRows(i, j, Q0.dot(Q.getRows(i, j)));
      } else {
        x = -0.5 * p1;
        y = 0.5 * sqrt(-disc);
        n1 = (a - x) * (a - x) + b * b;
        n2 = c * c + (d - x) * (d - x);

        if (n1 > n2) {
          n1 = sqrt(n1 + y * y);
          p = (a - x) / n1;
          q = b / n1;
          x = 0;
          y /= n1;
        } else {
          n2 = sqrt(n2 + y * y);
          p = c / n2;
          q = (d - x) / n2;
          x = y / n2;
          y = 0;
        }

        Q0 = new T([[q, -p], [p, q]], [[x, y], [y, -x]]);
        Q.setRows(i, j, Q0.dot(Q.getRows(i, j)));
      }
    }
  }

  var R = Q.dot(A).dot(Q.transjugate()),
      n = A.length,
      E = numeric.T.identity(n);

  for (j = 0; j < n; j++) {
    if (j > 0) {
      for (k = j - 1; k >= 0; k--) {
        var Rk = R.get([k, k]),
            Rj = R.get([j, j]);

        if (numeric.neq(Rk.x, Rj.x) || numeric.neq(Rk.y, Rj.y)) {
          x = R.getRow(k).getBlock([k], [j - 1]);
          y = E.getRow(j).getBlock([k], [j - 1]);
          E.set([j, k], R.get([k, j]).neg().sub(x.dot(y)).div(Rk.sub(Rj)));
        } else {
          E.setRow(j, E.getRow(k));
          continue;
        }
      }
    }
  }

  for (j = 0; j < n; j++) {
    x = E.getRow(j);
    E.setRow(j, x.div(x.norm2()));
  }

  E = E.transpose();
  E = Q.transjugate().dot(E);
  return {
    lambda: R.getDiag(),
    E: E
  };
}; // 5. Compressed Column Storage matrices


numeric.ccsSparse = function ccsSparse(A) {
  var m = A.length,
      n,
      foo,
      i,
      j,
      counts = [];

  for (i = m - 1; i !== -1; --i) {
    foo = A[i];

    for (j in foo) {
      j = parseInt(j);

      while (j >= counts.length) {
        counts[counts.length] = 0;
      }

      if (foo[j] !== 0) counts[j]++;
    }
  }

  var n = counts.length;
  var Ai = Array(n + 1);
  Ai[0] = 0;

  for (i = 0; i < n; ++i) {
    Ai[i + 1] = Ai[i] + counts[i];
  }

  var Aj = Array(Ai[n]),
      Av = Array(Ai[n]);

  for (i = m - 1; i !== -1; --i) {
    foo = A[i];

    for (j in foo) {
      if (foo[j] !== 0) {
        counts[j]--;
        Aj[Ai[j] + counts[j]] = i;
        Av[Ai[j] + counts[j]] = foo[j];
      }
    }
  }

  return [Ai, Aj, Av];
};

numeric.ccsFull = function ccsFull(A) {
  var Ai = A[0],
      Aj = A[1],
      Av = A[2],
      s = numeric.ccsDim(A),
      m = s[0],
      n = s[1],
      i,
      j,
      j0,
      j1,
      k;
  var B = numeric.rep([m, n], 0);

  for (i = 0; i < n; i++) {
    j0 = Ai[i];
    j1 = Ai[i + 1];

    for (j = j0; j < j1; ++j) {
      B[Aj[j]][i] = Av[j];
    }
  }

  return B;
};

numeric.ccsTSolve = function ccsTSolve(A, b, x, bj, xj) {
  var Ai = A[0],
      Aj = A[1],
      Av = A[2],
      m = Ai.length - 1,
      max = Math.max,
      n = 0;
  if (typeof bj === "undefined") x = numeric.rep([m], 0);
  if (typeof bj === "undefined") bj = numeric.linspace(0, x.length - 1);
  if (typeof xj === "undefined") xj = [];

  function dfs(j) {
    var k;
    if (x[j] !== 0) return;
    x[j] = 1;

    for (k = Ai[j]; k < Ai[j + 1]; ++k) {
      dfs(Aj[k]);
    }

    xj[n] = j;
    ++n;
  }

  var i, j, j0, j1, k, l, l0, l1, a;

  for (i = bj.length - 1; i !== -1; --i) {
    dfs(bj[i]);
  }

  xj.length = n;

  for (i = xj.length - 1; i !== -1; --i) {
    x[xj[i]] = 0;
  }

  for (i = bj.length - 1; i !== -1; --i) {
    j = bj[i];
    x[j] = b[j];
  }

  for (i = xj.length - 1; i !== -1; --i) {
    j = xj[i];
    j0 = Ai[j];
    j1 = max(Ai[j + 1], j0);

    for (k = j0; k !== j1; ++k) {
      if (Aj[k] === j) {
        x[j] /= Av[k];
        break;
      }
    }

    a = x[j];

    for (k = j0; k !== j1; ++k) {
      l = Aj[k];
      if (l !== j) x[l] -= a * Av[k];
    }
  }

  return x;
};

numeric.ccsDFS = function ccsDFS(n) {
  this.k = Array(n);
  this.k1 = Array(n);
  this.j = Array(n);
};

numeric.ccsDFS.prototype.dfs = function dfs(J, Ai, Aj, x, xj, Pinv) {
  var m = 0,
      foo,
      n = xj.length;
  var k = this.k,
      k1 = this.k1,
      j = this.j,
      km,
      k11;
  if (x[J] !== 0) return;
  x[J] = 1;
  j[0] = J;
  k[0] = km = Ai[J];
  k1[0] = k11 = Ai[J + 1];

  while (1) {
    if (km >= k11) {
      xj[n] = j[m];
      if (m === 0) return;
      ++n;
      --m;
      km = k[m];
      k11 = k1[m];
    } else {
      foo = Pinv[Aj[km]];

      if (x[foo] === 0) {
        x[foo] = 1;
        k[m] = km;
        ++m;
        j[m] = foo;
        km = Ai[foo];
        k1[m] = k11 = Ai[foo + 1];
      } else ++km;
    }
  }
};

numeric.ccsLPSolve = function ccsLPSolve(A, B, x, xj, I, Pinv, dfs) {
  var Ai = A[0],
      Aj = A[1],
      Av = A[2],
      m = Ai.length - 1,
      n = 0;
  var Bi = B[0],
      Bj = B[1],
      Bv = B[2];
  var i, i0, i1, j, J, j0, j1, k, l, l0, l1, a;
  i0 = Bi[I];
  i1 = Bi[I + 1];
  xj.length = 0;

  for (i = i0; i < i1; ++i) {
    dfs.dfs(Pinv[Bj[i]], Ai, Aj, x, xj, Pinv);
  }

  for (i = xj.length - 1; i !== -1; --i) {
    x[xj[i]] = 0;
  }

  for (i = i0; i !== i1; ++i) {
    j = Pinv[Bj[i]];
    x[j] = Bv[i];
  }

  for (i = xj.length - 1; i !== -1; --i) {
    j = xj[i];
    j0 = Ai[j];
    j1 = Ai[j + 1];

    for (k = j0; k < j1; ++k) {
      if (Pinv[Aj[k]] === j) {
        x[j] /= Av[k];
        break;
      }
    }

    a = x[j];

    for (k = j0; k < j1; ++k) {
      l = Pinv[Aj[k]];
      if (l !== j) x[l] -= a * Av[k];
    }
  }

  return x;
};

numeric.ccsLUP1 = function ccsLUP1(A, threshold) {
  var m = A[0].length - 1;
  var L = [numeric.rep([m + 1], 0), [], []],
      U = [numeric.rep([m + 1], 0), [], []];
  var Li = L[0],
      Lj = L[1],
      Lv = L[2],
      Ui = U[0],
      Uj = U[1],
      Uv = U[2];
  var x = numeric.rep([m], 0),
      xj = numeric.rep([m], 0);
  var i, j, k, j0, j1, a, e, c, d, K;
  var sol = numeric.ccsLPSolve,
      max = Math.max,
      abs = Math.abs;
  var P = numeric.linspace(0, m - 1),
      Pinv = numeric.linspace(0, m - 1);
  var dfs = new numeric.ccsDFS(m);

  if (typeof threshold === "undefined") {
    threshold = 1;
  }

  for (i = 0; i < m; ++i) {
    sol(L, A, x, xj, i, Pinv, dfs);
    a = -1;
    e = -1;

    for (j = xj.length - 1; j !== -1; --j) {
      k = xj[j];
      if (k <= i) continue;
      c = abs(x[k]);

      if (c > a) {
        e = k;
        a = c;
      }
    }

    if (abs(x[i]) < threshold * a) {
      j = P[i];
      a = P[e];
      P[i] = a;
      Pinv[a] = i;
      P[e] = j;
      Pinv[j] = e;
      a = x[i];
      x[i] = x[e];
      x[e] = a;
    }

    a = Li[i];
    e = Ui[i];
    d = x[i];
    Lj[a] = P[i];
    Lv[a] = 1;
    ++a;

    for (j = xj.length - 1; j !== -1; --j) {
      k = xj[j];
      c = x[k];
      xj[j] = 0;
      x[k] = 0;

      if (k <= i) {
        Uj[e] = k;
        Uv[e] = c;
        ++e;
      } else {
        Lj[a] = P[k];
        Lv[a] = c / d;
        ++a;
      }
    }

    Li[i + 1] = a;
    Ui[i + 1] = e;
  }

  for (j = Lj.length - 1; j !== -1; --j) {
    Lj[j] = Pinv[Lj[j]];
  }

  return {
    L: L,
    U: U,
    P: P,
    Pinv: Pinv
  };
};

numeric.ccsDFS0 = function ccsDFS0(n) {
  this.k = Array(n);
  this.k1 = Array(n);
  this.j = Array(n);
};

numeric.ccsDFS0.prototype.dfs = function dfs(J, Ai, Aj, x, xj, Pinv, P) {
  var m = 0,
      foo,
      n = xj.length;
  var k = this.k,
      k1 = this.k1,
      j = this.j,
      km,
      k11;
  if (x[J] !== 0) return;
  x[J] = 1;
  j[0] = J;
  k[0] = km = Ai[Pinv[J]];
  k1[0] = k11 = Ai[Pinv[J] + 1];

  while (1) {
    if (isNaN(km)) throw new Error("Ow!");

    if (km >= k11) {
      xj[n] = Pinv[j[m]];
      if (m === 0) return;
      ++n;
      --m;
      km = k[m];
      k11 = k1[m];
    } else {
      foo = Aj[km];

      if (x[foo] === 0) {
        x[foo] = 1;
        k[m] = km;
        ++m;
        j[m] = foo;
        foo = Pinv[foo];
        km = Ai[foo];
        k1[m] = k11 = Ai[foo + 1];
      } else ++km;
    }
  }
};

numeric.ccsLPSolve0 = function ccsLPSolve0(A, B, y, xj, I, Pinv, P, dfs) {
  var Ai = A[0],
      Aj = A[1],
      Av = A[2],
      m = Ai.length - 1,
      n = 0;
  var Bi = B[0],
      Bj = B[1],
      Bv = B[2];
  var i, i0, i1, j, J, j0, j1, k, l, l0, l1, a;
  i0 = Bi[I];
  i1 = Bi[I + 1];
  xj.length = 0;

  for (i = i0; i < i1; ++i) {
    dfs.dfs(Bj[i], Ai, Aj, y, xj, Pinv, P);
  }

  for (i = xj.length - 1; i !== -1; --i) {
    j = xj[i];
    y[P[j]] = 0;
  }

  for (i = i0; i !== i1; ++i) {
    j = Bj[i];
    y[j] = Bv[i];
  }

  for (i = xj.length - 1; i !== -1; --i) {
    j = xj[i];
    l = P[j];
    j0 = Ai[j];
    j1 = Ai[j + 1];

    for (k = j0; k < j1; ++k) {
      if (Aj[k] === l) {
        y[l] /= Av[k];
        break;
      }
    }

    a = y[l];

    for (k = j0; k < j1; ++k) {
      y[Aj[k]] -= a * Av[k];
    }

    y[l] = a;
  }
};

numeric.ccsLUP0 = function ccsLUP0(A, threshold) {
  var m = A[0].length - 1;
  var L = [numeric.rep([m + 1], 0), [], []],
      U = [numeric.rep([m + 1], 0), [], []];
  var Li = L[0],
      Lj = L[1],
      Lv = L[2],
      Ui = U[0],
      Uj = U[1],
      Uv = U[2];
  var y = numeric.rep([m], 0),
      xj = numeric.rep([m], 0);
  var i, j, k, j0, j1, a, e, c, d, K;
  var sol = numeric.ccsLPSolve0,
      max = Math.max,
      abs = Math.abs;
  var P = numeric.linspace(0, m - 1),
      Pinv = numeric.linspace(0, m - 1);
  var dfs = new numeric.ccsDFS0(m);

  if (typeof threshold === "undefined") {
    threshold = 1;
  }

  for (i = 0; i < m; ++i) {
    sol(L, A, y, xj, i, Pinv, P, dfs);
    a = -1;
    e = -1;

    for (j = xj.length - 1; j !== -1; --j) {
      k = xj[j];
      if (k <= i) continue;
      c = abs(y[P[k]]);

      if (c > a) {
        e = k;
        a = c;
      }
    }

    if (abs(y[P[i]]) < threshold * a) {
      j = P[i];
      a = P[e];
      P[i] = a;
      Pinv[a] = i;
      P[e] = j;
      Pinv[j] = e;
    }

    a = Li[i];
    e = Ui[i];
    d = y[P[i]];
    Lj[a] = P[i];
    Lv[a] = 1;
    ++a;

    for (j = xj.length - 1; j !== -1; --j) {
      k = xj[j];
      c = y[P[k]];
      xj[j] = 0;
      y[P[k]] = 0;

      if (k <= i) {
        Uj[e] = k;
        Uv[e] = c;
        ++e;
      } else {
        Lj[a] = P[k];
        Lv[a] = c / d;
        ++a;
      }
    }

    Li[i + 1] = a;
    Ui[i + 1] = e;
  }

  for (j = Lj.length - 1; j !== -1; --j) {
    Lj[j] = Pinv[Lj[j]];
  }

  return {
    L: L,
    U: U,
    P: P,
    Pinv: Pinv
  };
};

numeric.ccsLUP = numeric.ccsLUP0;

numeric.ccsDim = function ccsDim(A) {
  return [numeric.sup(A[1]) + 1, A[0].length - 1];
};

numeric.ccsGetBlock = function ccsGetBlock(A, i, j) {
  var s = numeric.ccsDim(A),
      m = s[0],
      n = s[1];

  if (typeof i === "undefined") {
    i = numeric.linspace(0, m - 1);
  } else if (typeof i === "number") {
    i = [i];
  }

  if (typeof j === "undefined") {
    j = numeric.linspace(0, n - 1);
  } else if (typeof j === "number") {
    j = [j];
  }

  var p,
      p0,
      p1,
      P = i.length,
      q,
      Q = j.length,
      r,
      jq,
      ip;
  var Bi = numeric.rep([n], 0),
      Bj = [],
      Bv = [],
      B = [Bi, Bj, Bv];
  var Ai = A[0],
      Aj = A[1],
      Av = A[2];
  var x = numeric.rep([m], 0),
      count = 0,
      flags = numeric.rep([m], 0);

  for (q = 0; q < Q; ++q) {
    jq = j[q];
    var q0 = Ai[jq];
    var q1 = Ai[jq + 1];

    for (p = q0; p < q1; ++p) {
      r = Aj[p];
      flags[r] = 1;
      x[r] = Av[p];
    }

    for (p = 0; p < P; ++p) {
      ip = i[p];

      if (flags[ip]) {
        Bj[count] = p;
        Bv[count] = x[i[p]];
        ++count;
      }
    }

    for (p = q0; p < q1; ++p) {
      r = Aj[p];
      flags[r] = 0;
    }

    Bi[q + 1] = count;
  }

  return B;
};

numeric.ccsDot = function ccsDot(A, B) {
  var Ai = A[0],
      Aj = A[1],
      Av = A[2];
  var Bi = B[0],
      Bj = B[1],
      Bv = B[2];
  var sA = numeric.ccsDim(A),
      sB = numeric.ccsDim(B);
  var m = sA[0],
      n = sA[1],
      o = sB[1];
  var x = numeric.rep([m], 0),
      flags = numeric.rep([m], 0),
      xj = Array(m);
  var Ci = numeric.rep([o], 0),
      Cj = [],
      Cv = [],
      C = [Ci, Cj, Cv];
  var i, j, k, j0, j1, i0, i1, l, p, a, b;

  for (k = 0; k !== o; ++k) {
    j0 = Bi[k];
    j1 = Bi[k + 1];
    p = 0;

    for (j = j0; j < j1; ++j) {
      a = Bj[j];
      b = Bv[j];
      i0 = Ai[a];
      i1 = Ai[a + 1];

      for (i = i0; i < i1; ++i) {
        l = Aj[i];

        if (flags[l] === 0) {
          xj[p] = l;
          flags[l] = 1;
          p = p + 1;
        }

        x[l] = x[l] + Av[i] * b;
      }
    }

    j0 = Ci[k];
    j1 = j0 + p;
    Ci[k + 1] = j1;

    for (j = p - 1; j !== -1; --j) {
      b = j0 + j;
      i = xj[j];
      Cj[b] = i;
      Cv[b] = x[i];
      flags[i] = 0;
      x[i] = 0;
    }

    Ci[k + 1] = Ci[k] + p;
  }

  return C;
};

numeric.ccsLUPSolve = function ccsLUPSolve(LUP, B) {
  var L = LUP.L,
      U = LUP.U,
      P = LUP.P;
  var Bi = B[0];
  var flag = false;

  if (_typeof(Bi) !== "object") {
    B = [[0, B.length], numeric.linspace(0, B.length - 1), B];
    Bi = B[0];
    flag = true;
  }

  var Bj = B[1],
      Bv = B[2];
  var n = L[0].length - 1,
      m = Bi.length - 1;
  var x = numeric.rep([n], 0),
      xj = Array(n);
  var b = numeric.rep([n], 0),
      bj = Array(n);
  var Xi = numeric.rep([m + 1], 0),
      Xj = [],
      Xv = [];
  var sol = numeric.ccsTSolve;
  var i,
      j,
      j0,
      j1,
      k,
      J,
      N = 0;

  for (i = 0; i < m; ++i) {
    k = 0;
    j0 = Bi[i];
    j1 = Bi[i + 1];

    for (j = j0; j < j1; ++j) {
      J = LUP.Pinv[Bj[j]];
      bj[k] = J;
      b[J] = Bv[j];
      ++k;
    }

    bj.length = k;
    sol(L, b, x, bj, xj);

    for (j = bj.length - 1; j !== -1; --j) {
      b[bj[j]] = 0;
    }

    sol(U, x, b, xj, bj);
    if (flag) return b;

    for (j = xj.length - 1; j !== -1; --j) {
      x[xj[j]] = 0;
    }

    for (j = bj.length - 1; j !== -1; --j) {
      J = bj[j];
      Xj[N] = J;
      Xv[N] = b[J];
      b[J] = 0;
      ++N;
    }

    Xi[i + 1] = N;
  }

  return [Xi, Xj, Xv];
};

numeric.ccsbinop = function ccsbinop(body, setup) {
  if (typeof setup === "undefined") setup = '';
  return Function('X', 'Y', 'var Xi = X[0], Xj = X[1], Xv = X[2];\n' + 'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\n' + 'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\n' + 'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\n' + 'var x = numeric.rep([m],0),y = numeric.rep([m],0);\n' + 'var xk,yk,zk;\n' + 'var i,j,j0,j1,k,p=0;\n' + setup + 'for(i=0;i<n;++i) {\n' + '  j0 = Xi[i]; j1 = Xi[i+1];\n' + '  for(j=j0;j!==j1;++j) {\n' + '    k = Xj[j];\n' + '    x[k] = 1;\n' + '    Zj[p] = k;\n' + '    ++p;\n' + '  }\n' + '  j0 = Yi[i]; j1 = Yi[i+1];\n' + '  for(j=j0;j!==j1;++j) {\n' + '    k = Yj[j];\n' + '    y[k] = Yv[j];\n' + '    if(x[k] === 0) {\n' + '      Zj[p] = k;\n' + '      ++p;\n' + '    }\n' + '  }\n' + '  Zi[i+1] = p;\n' + '  j0 = Xi[i]; j1 = Xi[i+1];\n' + '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n' + '  j0 = Zi[i]; j1 = Zi[i+1];\n' + '  for(j=j0;j!==j1;++j) {\n' + '    k = Zj[j];\n' + '    xk = x[k];\n' + '    yk = y[k];\n' + body + '\n' + '    Zv[j] = zk;\n' + '  }\n' + '  j0 = Xi[i]; j1 = Xi[i+1];\n' + '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n' + '  j0 = Yi[i]; j1 = Yi[i+1];\n' + '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n' + '}\n' + 'return [Zi,Zj,Zv];');
};

(function () {
  var k, A, B, C;

  for (k in numeric.ops2) {
    if (isFinite(eval('1' + numeric.ops2[k] + '0'))) A = '[Y[0],Y[1],numeric.' + k + '(X,Y[2])]';else A = 'NaN';
    if (isFinite(eval('0' + numeric.ops2[k] + '1'))) B = '[X[0],X[1],numeric.' + k + '(X[2],Y)]';else B = 'NaN';
    if (isFinite(eval('1' + numeric.ops2[k] + '0')) && isFinite(eval('0' + numeric.ops2[k] + '1'))) C = 'numeric.ccs' + k + 'MM(X,Y)';else C = 'NaN';
    numeric['ccs' + k + 'MM'] = numeric.ccsbinop('zk = xk ' + numeric.ops2[k] + 'yk;');
    numeric['ccs' + k] = Function('X', 'Y', 'if(typeof X === "number") return ' + A + ';\n' + 'if(typeof Y === "number") return ' + B + ';\n' + 'return ' + C + ';\n');
  }
})();

numeric.ccsScatter = function ccsScatter(A) {
  var Ai = A[0],
      Aj = A[1],
      Av = A[2];
  var n = numeric.sup(Aj) + 1,
      m = Ai.length;
  var Ri = numeric.rep([n], 0),
      Rj = Array(m),
      Rv = Array(m);
  var counts = numeric.rep([n], 0),
      i;

  for (i = 0; i < m; ++i) {
    counts[Aj[i]]++;
  }

  for (i = 0; i < n; ++i) {
    Ri[i + 1] = Ri[i] + counts[i];
  }

  var ptr = Ri.slice(0),
      k,
      Aii;

  for (i = 0; i < m; ++i) {
    Aii = Aj[i];
    k = ptr[Aii];
    Rj[k] = Ai[i];
    Rv[k] = Av[i];
    ptr[Aii] = ptr[Aii] + 1;
  }

  return [Ri, Rj, Rv];
};

numeric.ccsGather = function ccsGather(A) {
  var Ai = A[0],
      Aj = A[1],
      Av = A[2];
  var n = Ai.length - 1,
      m = Aj.length;
  var Ri = Array(m),
      Rj = Array(m),
      Rv = Array(m);
  var i, j, j0, j1, p;
  p = 0;

  for (i = 0; i < n; ++i) {
    j0 = Ai[i];
    j1 = Ai[i + 1];

    for (j = j0; j !== j1; ++j) {
      Rj[p] = i;
      Ri[p] = Aj[j];
      Rv[p] = Av[j];
      ++p;
    }
  }

  return [Ri, Rj, Rv];
}; // The following sparse linear algebra routines are deprecated.


numeric.sdim = function dim(A, ret, k) {
  if (typeof ret === "undefined") {
    ret = [];
  }

  if (_typeof(A) !== "object") return ret;

  if (typeof k === "undefined") {
    k = 0;
  }

  if (!(k in ret)) {
    ret[k] = 0;
  }

  if (A.length > ret[k]) ret[k] = A.length;
  var i;

  for (i in A) {
    if (A.hasOwnProperty(i)) dim(A[i], ret, k + 1);
  }

  return ret;
};

numeric.sclone = function clone(A, k, n) {
  if (typeof k === "undefined") {
    k = 0;
  }

  if (typeof n === "undefined") {
    n = numeric.sdim(A).length;
  }

  var i,
      ret = Array(A.length);

  if (k === n - 1) {
    for (i in A) {
      if (A.hasOwnProperty(i)) ret[i] = A[i];
    }

    return ret;
  }

  for (i in A) {
    if (A.hasOwnProperty(i)) ret[i] = clone(A[i], k + 1, n);
  }

  return ret;
};

numeric.sdiag = function diag(d) {
  var n = d.length,
      i,
      ret = Array(n),
      i1,
      i2,
      i3;

  for (i = n - 1; i >= 1; i -= 2) {
    i1 = i - 1;
    ret[i] = [];
    ret[i][i] = d[i];
    ret[i1] = [];
    ret[i1][i1] = d[i1];
  }

  if (i === 0) {
    ret[0] = [];
    ret[0][0] = d[i];
  }

  return ret;
};

numeric.sidentity = function identity(n) {
  return numeric.sdiag(numeric.rep([n], 1));
};

numeric.stranspose = function transpose(A) {
  var ret = [],
      n = A.length,
      i,
      j,
      Ai;

  for (i in A) {
    if (!A.hasOwnProperty(i)) continue;
    Ai = A[i];

    for (j in Ai) {
      if (!Ai.hasOwnProperty(j)) continue;

      if (_typeof(ret[j]) !== "object") {
        ret[j] = [];
      }

      ret[j][i] = Ai[j];
    }
  }

  return ret;
};

numeric.sLUP = function LUP(A, tol) {
  throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.");
};

numeric.sdotMM = function dotMM(A, B) {
  var p = A.length,
      q = B.length,
      BT = numeric.stranspose(B),
      r = BT.length,
      Ai,
      BTk;
  var i, j, k, accum;
  var ret = Array(p),
      reti;

  for (i = p - 1; i >= 0; i--) {
    reti = [];
    Ai = A[i];

    for (k = r - 1; k >= 0; k--) {
      accum = 0;
      BTk = BT[k];

      for (j in Ai) {
        if (!Ai.hasOwnProperty(j)) continue;

        if (j in BTk) {
          accum += Ai[j] * BTk[j];
        }
      }

      if (accum) reti[k] = accum;
    }

    ret[i] = reti;
  }

  return ret;
};

numeric.sdotMV = function dotMV(A, x) {
  var p = A.length,
      Ai,
      i,
      j;
  var ret = Array(p),
      accum;

  for (i = p - 1; i >= 0; i--) {
    Ai = A[i];
    accum = 0;

    for (j in Ai) {
      if (!Ai.hasOwnProperty(j)) continue;
      if (x[j]) accum += Ai[j] * x[j];
    }

    if (accum) ret[i] = accum;
  }

  return ret;
};

numeric.sdotVM = function dotMV(x, A) {
  var i, j, Ai, alpha;
  var ret = [],
      accum;

  for (i in x) {
    if (!x.hasOwnProperty(i)) continue;
    Ai = A[i];
    alpha = x[i];

    for (j in Ai) {
      if (!Ai.hasOwnProperty(j)) continue;

      if (!ret[j]) {
        ret[j] = 0;
      }

      ret[j] += alpha * Ai[j];
    }
  }

  return ret;
};

numeric.sdotVV = function dotVV(x, y) {
  var i,
      ret = 0;

  for (i in x) {
    if (x[i] && y[i]) ret += x[i] * y[i];
  }

  return ret;
};

numeric.sdot = function dot(A, B) {
  var m = numeric.sdim(A).length,
      n = numeric.sdim(B).length;
  var k = m * 1000 + n;

  switch (k) {
    case 0:
      return A * B;

    case 1001:
      return numeric.sdotVV(A, B);

    case 2001:
      return numeric.sdotMV(A, B);

    case 1002:
      return numeric.sdotVM(A, B);

    case 2002:
      return numeric.sdotMM(A, B);

    default:
      throw new Error('numeric.sdot not implemented for tensors of order ' + m + ' and ' + n);
  }
};

numeric.sscatter = function scatter(V) {
  var n = V[0].length,
      Vij,
      i,
      j,
      m = V.length,
      A = [],
      Aj;

  for (i = n - 1; i >= 0; --i) {
    if (!V[m - 1][i]) continue;
    Aj = A;

    for (j = 0; j < m - 2; j++) {
      Vij = V[j][i];
      if (!Aj[Vij]) Aj[Vij] = [];
      Aj = Aj[Vij];
    }

    Aj[V[j][i]] = V[j + 1][i];
  }

  return A;
};

numeric.sgather = function gather(A, ret, k) {
  if (typeof ret === "undefined") ret = [];
  if (typeof k === "undefined") k = [];
  var n, i, Ai;
  n = k.length;

  for (i in A) {
    if (A.hasOwnProperty(i)) {
      k[n] = parseInt(i);
      Ai = A[i];

      if (typeof Ai === "number") {
        if (Ai) {
          if (ret.length === 0) {
            for (i = n + 1; i >= 0; --i) {
              ret[i] = [];
            }
          }

          for (i = n; i >= 0; --i) {
            ret[i].push(k[i]);
          }

          ret[n + 1].push(Ai);
        }
      } else gather(Ai, ret, k);
    }
  }

  if (k.length > n) k.pop();
  return ret;
}; // 6. Coordinate matrices


numeric.cLU = function LU(A) {
  var I = A[0],
      J = A[1],
      V = A[2];
  var p = I.length,
      m = 0,
      i,
      j,
      k,
      a,
      b,
      c;

  for (i = 0; i < p; i++) {
    if (I[i] > m) m = I[i];
  }

  m++;
  var L = Array(m),
      U = Array(m),
      left = numeric.rep([m], Infinity),
      right = numeric.rep([m], -Infinity);
  var Ui, Uj, alpha;

  for (k = 0; k < p; k++) {
    i = I[k];
    j = J[k];
    if (j < left[i]) left[i] = j;
    if (j > right[i]) right[i] = j;
  }

  for (i = 0; i < m - 1; i++) {
    if (right[i] > right[i + 1]) right[i + 1] = right[i];
  }

  for (i = m - 1; i >= 1; i--) {
    if (left[i] < left[i - 1]) left[i - 1] = left[i];
  }

  var countL = 0,
      countU = 0;

  for (i = 0; i < m; i++) {
    U[i] = numeric.rep([right[i] - left[i] + 1], 0);
    L[i] = numeric.rep([i - left[i]], 0);
    countL += i - left[i] + 1;
    countU += right[i] - i + 1;
  }

  for (k = 0; k < p; k++) {
    i = I[k];
    U[i][J[k] - left[i]] = V[k];
  }

  for (i = 0; i < m - 1; i++) {
    a = i - left[i];
    Ui = U[i];

    for (j = i + 1; left[j] <= i && j < m; j++) {
      b = i - left[j];
      c = right[i] - i;
      Uj = U[j];
      alpha = Uj[b] / Ui[a];

      if (alpha) {
        for (k = 1; k <= c; k++) {
          Uj[k + b] -= alpha * Ui[k + a];
        }

        L[j][i - left[j]] = alpha;
      }
    }
  }

  var Ui = [],
      Uj = [],
      Uv = [],
      Li = [],
      Lj = [],
      Lv = [];
  var p, q, foo;
  p = 0;
  q = 0;

  for (i = 0; i < m; i++) {
    a = left[i];
    b = right[i];
    foo = U[i];

    for (j = i; j <= b; j++) {
      if (foo[j - a]) {
        Ui[p] = i;
        Uj[p] = j;
        Uv[p] = foo[j - a];
        p++;
      }
    }

    foo = L[i];

    for (j = a; j < i; j++) {
      if (foo[j - a]) {
        Li[q] = i;
        Lj[q] = j;
        Lv[q] = foo[j - a];
        q++;
      }
    }

    Li[q] = i;
    Lj[q] = i;
    Lv[q] = 1;
    q++;
  }

  return {
    U: [Ui, Uj, Uv],
    L: [Li, Lj, Lv]
  };
};

numeric.cLUsolve = function LUsolve(lu, b) {
  var L = lu.L,
      U = lu.U,
      ret = numeric.clone(b);
  var Li = L[0],
      Lj = L[1],
      Lv = L[2];
  var Ui = U[0],
      Uj = U[1],
      Uv = U[2];
  var p = Ui.length,
      q = Li.length;
  var m = ret.length,
      i,
      j,
      k;
  k = 0;

  for (i = 0; i < m; i++) {
    while (Lj[k] < i) {
      ret[i] -= Lv[k] * ret[Lj[k]];
      k++;
    }

    k++;
  }

  k = p - 1;

  for (i = m - 1; i >= 0; i--) {
    while (Uj[k] > i) {
      ret[i] -= Uv[k] * ret[Uj[k]];
      k--;
    }

    ret[i] /= Uv[k];
    k--;
  }

  return ret;
};

numeric.cgrid = function grid(n, shape) {
  if (typeof n === "number") n = [n, n];
  var ret = numeric.rep(n, -1);
  var i, j, count;

  if (typeof shape !== "function") {
    switch (shape) {
      case 'L':
        shape = function shape(i, j) {
          return i >= n[0] / 2 || j < n[1] / 2;
        };

        break;

      default:
        shape = function shape(i, j) {
          return true;
        };

        break;
    }
  }

  count = 0;

  for (i = 1; i < n[0] - 1; i++) {
    for (j = 1; j < n[1] - 1; j++) {
      if (shape(i, j)) {
        ret[i][j] = count;
        count++;
      }
    }
  }

  return ret;
};

numeric.cdelsq = function delsq(g) {
  var dir = [[-1, 0], [0, -1], [0, 1], [1, 0]];
  var s = numeric.dim(g),
      m = s[0],
      n = s[1],
      i,
      j,
      k,
      p,
      q;
  var Li = [],
      Lj = [],
      Lv = [];

  for (i = 1; i < m - 1; i++) {
    for (j = 1; j < n - 1; j++) {
      if (g[i][j] < 0) continue;

      for (k = 0; k < 4; k++) {
        p = i + dir[k][0];
        q = j + dir[k][1];
        if (g[p][q] < 0) continue;
        Li.push(g[i][j]);
        Lj.push(g[p][q]);
        Lv.push(-1);
      }

      Li.push(g[i][j]);
      Lj.push(g[i][j]);
      Lv.push(4);
    }
  }

  return [Li, Lj, Lv];
};

numeric.cdotMV = function dotMV(A, x) {
  var ret,
      Ai = A[0],
      Aj = A[1],
      Av = A[2],
      k,
      p = Ai.length,
      N;
  N = 0;

  for (k = 0; k < p; k++) {
    if (Ai[k] > N) N = Ai[k];
  }

  N++;
  ret = numeric.rep([N], 0);

  for (k = 0; k < p; k++) {
    ret[Ai[k]] += Av[k] * x[Aj[k]];
  }

  return ret;
}; // 7. Splines


numeric.Spline = function Spline(x, yl, yr, kl, kr) {
  this.x = x;
  this.yl = yl;
  this.yr = yr;
  this.kl = kl;
  this.kr = kr;
};

numeric.Spline.prototype._at = function _at(x1, p) {
  var x = this.x;
  var yl = this.yl;
  var yr = this.yr;
  var kl = this.kl;
  var kr = this.kr;
  var x1, a, b, t;
  var add = numeric.add,
      sub = numeric.sub,
      mul = numeric.mul;
  a = sub(mul(kl[p], x[p + 1] - x[p]), sub(yr[p + 1], yl[p]));
  b = add(mul(kr[p + 1], x[p] - x[p + 1]), sub(yr[p + 1], yl[p]));
  t = (x1 - x[p]) / (x[p + 1] - x[p]);
  var s = t * (1 - t);
  return add(add(add(mul(1 - t, yl[p]), mul(t, yr[p + 1])), mul(a, s * (1 - t))), mul(b, s * t));
};

numeric.Spline.prototype.at = function at(x0) {
  if (typeof x0 === "number") {
    var x = this.x;
    var n = x.length;
    var p,
        q,
        mid,
        floor = Math.floor,
        a,
        b,
        t;
    p = 0;
    q = n - 1;

    while (q - p > 1) {
      mid = floor((p + q) / 2);
      if (x[mid] <= x0) p = mid;else q = mid;
    }

    return this._at(x0, p);
  }

  var n = x0.length,
      i,
      ret = Array(n);

  for (i = n - 1; i !== -1; --i) {
    ret[i] = this.at(x0[i]);
  }

  return ret;
};

numeric.Spline.prototype.diff = function diff() {
  var x = this.x;
  var yl = this.yl;
  var yr = this.yr;
  var kl = this.kl;
  var kr = this.kr;
  var n = yl.length;
  var i, dx, dy;
  var zl = kl,
      zr = kr,
      pl = Array(n),
      pr = Array(n);
  var add = numeric.add,
      mul = numeric.mul,
      div = numeric.div,
      sub = numeric.sub;

  for (i = n - 1; i !== -1; --i) {
    dx = x[i + 1] - x[i];
    dy = sub(yr[i + 1], yl[i]);
    pl[i] = div(add(mul(dy, 6), mul(kl[i], -4 * dx), mul(kr[i + 1], -2 * dx)), dx * dx);
    pr[i + 1] = div(add(mul(dy, -6), mul(kl[i], 2 * dx), mul(kr[i + 1], 4 * dx)), dx * dx);
  }

  return new numeric.Spline(x, zl, zr, pl, pr);
};

numeric.Spline.prototype.roots = function roots() {
  function sqr(x) {
    return x * x;
  }

  function heval(y0, y1, k0, k1, x) {
    var A = k0 * 2 - (y1 - y0);
    var B = -k1 * 2 + (y1 - y0);
    var t = (x + 1) * 0.5;
    var s = t * (1 - t);
    return (1 - t) * y0 + t * y1 + A * s * (1 - t) + B * s * t;
  }

  var ret = [];
  var x = this.x,
      yl = this.yl,
      yr = this.yr,
      kl = this.kl,
      kr = this.kr;

  if (typeof yl[0] === "number") {
    yl = [yl];
    yr = [yr];
    kl = [kl];
    kr = [kr];
  }

  var m = yl.length,
      n = x.length - 1,
      i,
      j,
      k,
      y,
      s,
      t;
  var ai,
      bi,
      ci,
      di,
      ret = Array(m),
      ri,
      k0,
      k1,
      y0,
      y1,
      A,
      B,
      D,
      dx,
      cx,
      stops,
      z0,
      z1,
      zm,
      t0,
      t1,
      tm;
  var sqrt = Math.sqrt;

  for (i = 0; i !== m; ++i) {
    ai = yl[i];
    bi = yr[i];
    ci = kl[i];
    di = kr[i];
    ri = [];

    for (j = 0; j !== n; j++) {
      if (j > 0 && bi[j] * ai[j] < 0) ri.push(x[j]);
      dx = x[j + 1] - x[j];
      cx = x[j];
      y0 = ai[j];
      y1 = bi[j + 1];
      k0 = ci[j] / dx;
      k1 = di[j + 1] / dx;
      D = sqr(k0 - k1 + 3 * (y0 - y1)) + 12 * k1 * y0;
      A = k1 + 3 * y0 + 2 * k0 - 3 * y1;
      B = 3 * (k1 + k0 + 2 * (y0 - y1));

      if (D <= 0) {
        z0 = A / B;
        if (z0 > x[j] && z0 < x[j + 1]) stops = [x[j], z0, x[j + 1]];else stops = [x[j], x[j + 1]];
      } else {
        z0 = (A - sqrt(D)) / B;
        z1 = (A + sqrt(D)) / B;
        stops = [x[j]];
        if (z0 > x[j] && z0 < x[j + 1]) stops.push(z0);
        if (z1 > x[j] && z1 < x[j + 1]) stops.push(z1);
        stops.push(x[j + 1]);
      }

      t0 = stops[0];
      z0 = this._at(t0, j);

      for (k = 0; k < stops.length - 1; k++) {
        t1 = stops[k + 1];
        z1 = this._at(t1, j);

        if (z0 === 0) {
          ri.push(t0);
          t0 = t1;
          z0 = z1;
          continue;
        }

        if (z1 === 0 || z0 * z1 > 0) {
          t0 = t1;
          z0 = z1;
          continue;
        }

        var side = 0;

        while (1) {
          tm = (z0 * t1 - z1 * t0) / (z0 - z1);

          if (tm <= t0 || tm >= t1) {
            break;
          }

          zm = this._at(tm, j);

          if (zm * z1 > 0) {
            t1 = tm;
            z1 = zm;
            if (side === -1) z0 *= 0.5;
            side = -1;
          } else if (zm * z0 > 0) {
            t0 = tm;
            z0 = zm;
            if (side === 1) z1 *= 0.5;
            side = 1;
          } else break;
        }

        ri.push(tm);
        t0 = stops[k + 1];
        z0 = this._at(t0, j);
      }

      if (z1 === 0) ri.push(t1);
    }

    ret[i] = ri;
  }

  if (typeof this.yl[0] === "number") return ret[0];
  return ret;
};

numeric.spline = function spline(x, y, k1, kn) {
  var n = x.length,
      b = [],
      dx = [],
      dy = [];
  var i;
  var sub = numeric.sub,
      mul = numeric.mul,
      add = numeric.add;

  for (i = n - 2; i >= 0; i--) {
    dx[i] = x[i + 1] - x[i];
    dy[i] = sub(y[i + 1], y[i]);
  }

  if (typeof k1 === "string" || typeof kn === "string") {
    k1 = kn = "periodic";
  } // Build sparse tridiagonal system


  var T = [[], [], []];

  switch (_typeof(k1)) {
    case "undefined":
      b[0] = mul(3 / (dx[0] * dx[0]), dy[0]);
      T[0].push(0, 0);
      T[1].push(0, 1);
      T[2].push(2 / dx[0], 1 / dx[0]);
      break;

    case "string":
      b[0] = add(mul(3 / (dx[n - 2] * dx[n - 2]), dy[n - 2]), mul(3 / (dx[0] * dx[0]), dy[0]));
      T[0].push(0, 0, 0);
      T[1].push(n - 2, 0, 1);
      T[2].push(1 / dx[n - 2], 2 / dx[n - 2] + 2 / dx[0], 1 / dx[0]);
      break;

    default:
      b[0] = k1;
      T[0].push(0);
      T[1].push(0);
      T[2].push(1);
      break;
  }

  for (i = 1; i < n - 1; i++) {
    b[i] = add(mul(3 / (dx[i - 1] * dx[i - 1]), dy[i - 1]), mul(3 / (dx[i] * dx[i]), dy[i]));
    T[0].push(i, i, i);
    T[1].push(i - 1, i, i + 1);
    T[2].push(1 / dx[i - 1], 2 / dx[i - 1] + 2 / dx[i], 1 / dx[i]);
  }

  switch (_typeof(kn)) {
    case "undefined":
      b[n - 1] = mul(3 / (dx[n - 2] * dx[n - 2]), dy[n - 2]);
      T[0].push(n - 1, n - 1);
      T[1].push(n - 2, n - 1);
      T[2].push(1 / dx[n - 2], 2 / dx[n - 2]);
      break;

    case "string":
      T[1][T[1].length - 1] = 0;
      break;

    default:
      b[n - 1] = kn;
      T[0].push(n - 1);
      T[1].push(n - 1);
      T[2].push(1);
      break;
  }

  if (typeof b[0] !== "number") b = numeric.transpose(b);else b = [b];
  var k = Array(b.length);

  if (typeof k1 === "string") {
    for (i = k.length - 1; i !== -1; --i) {
      k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)), b[i]);
      k[i][n - 1] = k[i][0];
    }
  } else {
    for (i = k.length - 1; i !== -1; --i) {
      k[i] = numeric.cLUsolve(numeric.cLU(T), b[i]);
    }
  }

  if (typeof y[0] === "number") k = k[0];else k = numeric.transpose(k);
  return new numeric.Spline(x, y, y, k, k);
}; // 8. FFT


numeric.fftpow2 = function fftpow2(x, y) {
  var n = x.length;
  if (n === 1) return;
  var cos = Math.cos,
      sin = Math.sin,
      i,
      j;
  var xe = Array(n / 2),
      ye = Array(n / 2),
      xo = Array(n / 2),
      yo = Array(n / 2);
  j = n / 2;

  for (i = n - 1; i !== -1; --i) {
    --j;
    xo[j] = x[i];
    yo[j] = y[i];
    --i;
    xe[j] = x[i];
    ye[j] = y[i];
  }

  fftpow2(xe, ye);
  fftpow2(xo, yo);
  j = n / 2;
  var t,
      k = -6.2831853071795864769252867665590057683943387987502116419 / n,
      ci,
      si;

  for (i = n - 1; i !== -1; --i) {
    --j;
    if (j === -1) j = n / 2 - 1;
    t = k * i;
    ci = cos(t);
    si = sin(t);
    x[i] = xe[j] + ci * xo[j] - si * yo[j];
    y[i] = ye[j] + ci * yo[j] + si * xo[j];
  }
};

numeric._ifftpow2 = function _ifftpow2(x, y) {
  var n = x.length;
  if (n === 1) return;
  var cos = Math.cos,
      sin = Math.sin,
      i,
      j;
  var xe = Array(n / 2),
      ye = Array(n / 2),
      xo = Array(n / 2),
      yo = Array(n / 2);
  j = n / 2;

  for (i = n - 1; i !== -1; --i) {
    --j;
    xo[j] = x[i];
    yo[j] = y[i];
    --i;
    xe[j] = x[i];
    ye[j] = y[i];
  }

  _ifftpow2(xe, ye);

  _ifftpow2(xo, yo);

  j = n / 2;
  var t,
      k = 6.2831853071795864769252867665590057683943387987502116419 / n,
      ci,
      si;

  for (i = n - 1; i !== -1; --i) {
    --j;
    if (j === -1) j = n / 2 - 1;
    t = k * i;
    ci = cos(t);
    si = sin(t);
    x[i] = xe[j] + ci * xo[j] - si * yo[j];
    y[i] = ye[j] + ci * yo[j] + si * xo[j];
  }
};

numeric.ifftpow2 = function ifftpow2(x, y) {
  numeric._ifftpow2(x, y);

  numeric.diveq(x, x.length);
  numeric.diveq(y, y.length);
};

numeric.convpow2 = function convpow2(ax, ay, bx, by) {
  numeric.fftpow2(ax, ay);
  numeric.fftpow2(bx, by);
  var i,
      n = ax.length,
      axi,
      bxi,
      ayi,
      byi;

  for (i = n - 1; i !== -1; --i) {
    axi = ax[i];
    ayi = ay[i];
    bxi = bx[i];
    byi = by[i];
    ax[i] = axi * bxi - ayi * byi;
    ay[i] = axi * byi + ayi * bxi;
  }

  numeric.ifftpow2(ax, ay);
};

numeric.T.prototype.fft = function fft() {
  var x = this.x,
      y = this.y;
  var n = x.length,
      log = Math.log,
      log2 = log(2),
      p = Math.ceil(log(2 * n - 1) / log2),
      m = Math.pow(2, p);
  var cx = numeric.rep([m], 0),
      cy = numeric.rep([m], 0),
      cos = Math.cos,
      sin = Math.sin;
  var k,
      c = -3.141592653589793238462643383279502884197169399375105820 / n,
      t;
  var a = numeric.rep([m], 0),
      b = numeric.rep([m], 0),
      nhalf = Math.floor(n / 2);

  for (k = 0; k < n; k++) {
    a[k] = x[k];
  }

  if (typeof y !== "undefined") for (k = 0; k < n; k++) {
    b[k] = y[k];
  }
  cx[0] = 1;

  for (k = 1; k <= m / 2; k++) {
    t = c * k * k;
    cx[k] = cos(t);
    cy[k] = sin(t);
    cx[m - k] = cos(t);
    cy[m - k] = sin(t);
  }

  var X = new numeric.T(a, b),
      Y = new numeric.T(cx, cy);
  X = X.mul(Y);
  numeric.convpow2(X.x, X.y, numeric.clone(Y.x), numeric.neg(Y.y));
  X = X.mul(Y);
  X.x.length = n;
  X.y.length = n;
  return X;
};

numeric.T.prototype.ifft = function ifft() {
  var x = this.x,
      y = this.y;
  var n = x.length,
      log = Math.log,
      log2 = log(2),
      p = Math.ceil(log(2 * n - 1) / log2),
      m = Math.pow(2, p);
  var cx = numeric.rep([m], 0),
      cy = numeric.rep([m], 0),
      cos = Math.cos,
      sin = Math.sin;
  var k,
      c = 3.141592653589793238462643383279502884197169399375105820 / n,
      t;
  var a = numeric.rep([m], 0),
      b = numeric.rep([m], 0),
      nhalf = Math.floor(n / 2);

  for (k = 0; k < n; k++) {
    a[k] = x[k];
  }

  if (typeof y !== "undefined") for (k = 0; k < n; k++) {
    b[k] = y[k];
  }
  cx[0] = 1;

  for (k = 1; k <= m / 2; k++) {
    t = c * k * k;
    cx[k] = cos(t);
    cy[k] = sin(t);
    cx[m - k] = cos(t);
    cy[m - k] = sin(t);
  }

  var X = new numeric.T(a, b),
      Y = new numeric.T(cx, cy);
  X = X.mul(Y);
  numeric.convpow2(X.x, X.y, numeric.clone(Y.x), numeric.neg(Y.y));
  X = X.mul(Y);
  X.x.length = n;
  X.y.length = n;
  return X.div(n);
}; //9. Unconstrained optimization


numeric.gradient = function gradient(f, x) {
  var n = x.length;
  var f0 = f(x);
  if (isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');
  var max = Math.max;
  var i,
      x0 = numeric.clone(x),
      f1,
      f2,
      J = Array(n);
  var div = numeric.div,
      sub = numeric.sub,
      errest,
      roundoff,
      max = Math.max,
      eps = 1e-3,
      abs = Math.abs,
      min = Math.min;
  var t0,
      t1,
      t2,
      it = 0,
      d1,
      d2,
      N;

  for (i = 0; i < n; i++) {
    var h = max(1e-6 * f0, 1e-8);

    while (1) {
      ++it;

      if (it > 20) {
        throw new Error("Numerical gradient fails");
      }

      x0[i] = x[i] + h;
      f1 = f(x0);
      x0[i] = x[i] - h;
      f2 = f(x0);
      x0[i] = x[i];

      if (isNaN(f1) || isNaN(f2)) {
        h /= 16;
        continue;
      }

      J[i] = (f1 - f2) / (2 * h);
      t0 = x[i] - h;
      t1 = x[i];
      t2 = x[i] + h;
      d1 = (f1 - f0) / h;
      d2 = (f0 - f2) / h;
      N = max(abs(J[i]), abs(f0), abs(f1), abs(f2), abs(t0), abs(t1), abs(t2), 1e-8);
      errest = min(max(abs(d1 - J[i]), abs(d2 - J[i]), abs(d1 - d2)) / N, h / N);

      if (errest > eps) {
        h /= 16;
      } else break;
    }
  }

  return J;
};

numeric.uncmin = function uncmin(f, x0, tol, gradient, maxit, callback, options) {
  var grad = numeric.gradient;

  if (typeof options === "undefined") {
    options = {};
  }

  if (typeof tol === "undefined") {
    tol = 1e-8;
  }

  if (typeof gradient === "undefined") {
    gradient = function gradient(x) {
      return grad(f, x);
    };
  }

  if (typeof maxit === "undefined") maxit = 1000;
  x0 = numeric.clone(x0);
  var n = x0.length;
  var f0 = f(x0),
      f1,
      df0;
  if (isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');
  var max = Math.max,
      norm2 = numeric.norm2;
  tol = max(tol, numeric.epsilon);
  var step,
      g0,
      g1,
      H1 = options.Hinv || numeric.identity(n);
  var dot = numeric.dot,
      inv = numeric.inv,
      sub = numeric.sub,
      add = numeric.add,
      ten = numeric.tensor,
      div = numeric.div,
      mul = numeric.mul;
  var all = numeric.all,
      isfinite = numeric.isFinite,
      neg = numeric.neg;
  var it = 0,
      i,
      s,
      x1,
      y,
      Hy,
      Hs,
      ys,
      i0,
      t,
      nstep,
      t1,
      t2;
  var msg = "";
  g0 = gradient(x0);

  while (it < maxit) {
    if (typeof callback === "function") {
      if (callback(it, x0, f0, g0, H1)) {
        msg = "Callback returned true";
        break;
      }
    }

    if (!all(isfinite(g0))) {
      msg = "Gradient has Infinity or NaN";
      break;
    }

    step = neg(dot(H1, g0));

    if (!all(isfinite(step))) {
      msg = "Search direction has Infinity or NaN";
      break;
    }

    nstep = norm2(step);

    if (nstep < tol) {
      msg = "Newton step smaller than tol";
      break;
    }

    t = 1;
    df0 = dot(g0, step); // line search

    x1 = x0;

    while (it < maxit) {
      if (t * nstep < tol) {
        break;
      }

      s = mul(step, t);
      x1 = add(x0, s);
      f1 = f(x1);

      if (f1 - f0 >= 0.1 * t * df0 || isNaN(f1)) {
        t *= 0.5;
        ++it;
        continue;
      }

      break;
    }

    if (t * nstep < tol) {
      msg = "Line search step size smaller than tol";
      break;
    }

    if (it === maxit) {
      msg = "maxit reached during line search";
      break;
    }

    g1 = gradient(x1);
    y = sub(g1, g0);
    ys = dot(y, s);
    Hy = dot(H1, y);
    H1 = sub(add(H1, mul((ys + dot(y, Hy)) / (ys * ys), ten(s, s))), div(add(ten(Hy, s), ten(s, Hy)), ys));
    x0 = x1;
    f0 = f1;
    g0 = g1;
    ++it;
  }

  return {
    solution: x0,
    f: f0,
    gradient: g0,
    invHessian: H1,
    iterations: it,
    message: msg
  };
}; // 10. Ode solver (Dormand-Prince)


numeric.Dopri = function Dopri(x, y, f, ymid, iterations, msg, events) {
  this.x = x;
  this.y = y;
  this.f = f;
  this.ymid = ymid;
  this.iterations = iterations;
  this.events = events;
  this.message = msg;
};

numeric.Dopri.prototype._at = function _at(xi, j) {
  function sqr(x) {
    return x * x;
  }

  var sol = this;
  var xs = sol.x;
  var ys = sol.y;
  var k1 = sol.f;
  var ymid = sol.ymid;
  var n = xs.length;
  var x0, x1, xh, y0, y1, yh, xi;
  var floor = Math.floor,
      h;
  var c = 0.5;
  var add = numeric.add,
      mul = numeric.mul,
      sub = numeric.sub,
      p,
      q,
      w;
  x0 = xs[j];
  x1 = xs[j + 1];
  y0 = ys[j];
  y1 = ys[j + 1];
  h = x1 - x0;
  xh = x0 + c * h;
  yh = ymid[j];
  p = sub(k1[j], mul(y0, 1 / (x0 - xh) + 2 / (x0 - x1)));
  q = sub(k1[j + 1], mul(y1, 1 / (x1 - xh) + 2 / (x1 - x0)));
  w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh), sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh), sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh), (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh), (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0 - x1) / (x1 - xh)];
  return add(add(add(add(mul(y0, w[0]), mul(yh, w[1])), mul(y1, w[2])), mul(p, w[3])), mul(q, w[4]));
};

numeric.Dopri.prototype.at = function at(x) {
  var i,
      j,
      k,
      floor = Math.floor;

  if (typeof x !== "number") {
    var n = x.length,
        ret = Array(n);

    for (i = n - 1; i !== -1; --i) {
      ret[i] = this.at(x[i]);
    }

    return ret;
  }

  var x0 = this.x;
  i = 0;
  j = x0.length - 1;

  while (j - i > 1) {
    k = floor(0.5 * (i + j));
    if (x0[k] <= x) i = k;else j = k;
  }

  return this._at(x, i);
};

numeric.dopri = function dopri(x0, x1, y0, f, tol, maxit, event) {
  if (typeof tol === "undefined") {
    tol = 1e-6;
  }

  if (typeof maxit === "undefined") {
    maxit = 1000;
  }

  var xs = [x0],
      ys = [y0],
      k1 = [f(x0, y0)],
      k2,
      k3,
      k4,
      k5,
      k6,
      k7,
      ymid = [];
  var A2 = 1 / 5;
  var A3 = [3 / 40, 9 / 40];
  var A4 = [44 / 45, -56 / 15, 32 / 9];
  var A5 = [19372 / 6561, -25360 / 2187, 64448 / 6561, -212 / 729];
  var A6 = [9017 / 3168, -355 / 33, 46732 / 5247, 49 / 176, -5103 / 18656];
  var b = [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84];
  var bm = [0.5 * 6025192743 / 30085553152, 0, 0.5 * 51252292925 / 65400821598, 0.5 * -2691868925 / 45128329728, 0.5 * 187940372067 / 1594534317056, 0.5 * -1776094331 / 19743644256, 0.5 * 11237099 / 235043384];
  var c = [1 / 5, 3 / 10, 4 / 5, 8 / 9, 1, 1];
  var e = [-71 / 57600, 0, 71 / 16695, -71 / 1920, 17253 / 339200, -22 / 525, 1 / 40];
  var i = 0,
      er,
      j;
  var h = (x1 - x0) / 10;
  var it = 0;
  var add = numeric.add,
      mul = numeric.mul,
      y1,
      erinf;
  var max = Math.max,
      min = Math.min,
      abs = Math.abs,
      norminf = numeric.norminf,
      pow = Math.pow;
  var any = numeric.any,
      lt = numeric.lt,
      and = numeric.and,
      sub = numeric.sub;
  var e0, e1, ev;
  var ret = new numeric.Dopri(xs, ys, k1, ymid, -1, "");
  if (typeof event === "function") e0 = event(x0, y0);

  while (x0 < x1 && it < maxit) {
    ++it;
    if (x0 + h > x1) h = x1 - x0;
    k2 = f(x0 + c[0] * h, add(y0, mul(A2 * h, k1[i])));
    k3 = f(x0 + c[1] * h, add(add(y0, mul(A3[0] * h, k1[i])), mul(A3[1] * h, k2)));
    k4 = f(x0 + c[2] * h, add(add(add(y0, mul(A4[0] * h, k1[i])), mul(A4[1] * h, k2)), mul(A4[2] * h, k3)));
    k5 = f(x0 + c[3] * h, add(add(add(add(y0, mul(A5[0] * h, k1[i])), mul(A5[1] * h, k2)), mul(A5[2] * h, k3)), mul(A5[3] * h, k4)));
    k6 = f(x0 + c[4] * h, add(add(add(add(add(y0, mul(A6[0] * h, k1[i])), mul(A6[1] * h, k2)), mul(A6[2] * h, k3)), mul(A6[3] * h, k4)), mul(A6[4] * h, k5)));
    y1 = add(add(add(add(add(y0, mul(k1[i], h * b[0])), mul(k3, h * b[2])), mul(k4, h * b[3])), mul(k5, h * b[4])), mul(k6, h * b[5]));
    k7 = f(x0 + h, y1);
    er = add(add(add(add(add(mul(k1[i], h * e[0]), mul(k3, h * e[2])), mul(k4, h * e[3])), mul(k5, h * e[4])), mul(k6, h * e[5])), mul(k7, h * e[6]));
    if (typeof er === "number") erinf = abs(er);else erinf = norminf(er);

    if (erinf > tol) {
      // reject
      h = 0.2 * h * pow(tol / erinf, 0.25);

      if (x0 + h === x0) {
        ret.msg = "Step size became too small";
        break;
      }

      continue;
    }

    ymid[i] = add(add(add(add(add(add(y0, mul(k1[i], h * bm[0])), mul(k3, h * bm[2])), mul(k4, h * bm[3])), mul(k5, h * bm[4])), mul(k6, h * bm[5])), mul(k7, h * bm[6]));
    ++i;
    xs[i] = x0 + h;
    ys[i] = y1;
    k1[i] = k7;

    if (typeof event === "function") {
      var yi,
          xl = x0,
          xr = x0 + 0.5 * h,
          xi;
      e1 = event(xr, ymid[i - 1]);
      ev = and(lt(e0, 0), lt(0, e1));

      if (!any(ev)) {
        xl = xr;
        xr = x0 + h;
        e0 = e1;
        e1 = event(xr, y1);
        ev = and(lt(e0, 0), lt(0, e1));
      }

      if (any(ev)) {
        var xc, yc, en, ei;
        var side = 0,
            sl = 1.0,
            sr = 1.0;

        while (1) {
          if (typeof e0 === "number") xi = (sr * e1 * xl - sl * e0 * xr) / (sr * e1 - sl * e0);else {
            xi = xr;

            for (j = e0.length - 1; j !== -1; --j) {
              if (e0[j] < 0 && e1[j] > 0) xi = min(xi, (sr * e1[j] * xl - sl * e0[j] * xr) / (sr * e1[j] - sl * e0[j]));
            }
          }
          if (xi <= xl || xi >= xr) break;
          yi = ret._at(xi, i - 1);
          ei = event(xi, yi);
          en = and(lt(e0, 0), lt(0, ei));

          if (any(en)) {
            xr = xi;
            e1 = ei;
            ev = en;
            sr = 1.0;
            if (side === -1) sl *= 0.5;else sl = 1.0;
            side = -1;
          } else {
            xl = xi;
            e0 = ei;
            sl = 1.0;
            if (side === 1) sr *= 0.5;else sr = 1.0;
            side = 1;
          }
        }

        y1 = ret._at(0.5 * (x0 + xi), i - 1);
        ret.f[i] = f(xi, yi);
        ret.x[i] = xi;
        ret.y[i] = yi;
        ret.ymid[i - 1] = y1;
        ret.events = ev;
        ret.iterations = it;
        return ret;
      }
    }

    x0 += h;
    y0 = y1;
    e0 = e1;
    h = min(0.8 * h * pow(tol / erinf, 0.25), 4 * h);
  }

  ret.iterations = it;
  return ret;
}; // 11. Ax = b


numeric.LU = function (A, fast) {
  fast = fast || false;
  var abs = Math.abs;
  var i, j, k, absAjk, Akk, Ak, Pk, Ai;
  var max;
  var n = A.length,
      n1 = n - 1;
  var P = new Array(n);
  if (!fast) A = numeric.clone(A);

  for (k = 0; k < n; ++k) {
    Pk = k;
    Ak = A[k];
    max = abs(Ak[k]);

    for (j = k + 1; j < n; ++j) {
      absAjk = abs(A[j][k]);

      if (max < absAjk) {
        max = absAjk;
        Pk = j;
      }
    }

    P[k] = Pk;

    if (Pk != k) {
      A[k] = A[Pk];
      A[Pk] = Ak;
      Ak = A[k];
    }

    Akk = Ak[k];

    for (i = k + 1; i < n; ++i) {
      A[i][k] /= Akk;
    }

    for (i = k + 1; i < n; ++i) {
      Ai = A[i];

      for (j = k + 1; j < n1; ++j) {
        Ai[j] -= Ai[k] * Ak[j];
        ++j;
        Ai[j] -= Ai[k] * Ak[j];
      }

      if (j === n1) Ai[j] -= Ai[k] * Ak[j];
    }
  }

  return {
    LU: A,
    P: P
  };
};

numeric.LUsolve = function LUsolve(LUP, b) {
  var i, j;
  var LU = LUP.LU;
  var n = LU.length;
  var x = numeric.clone(b);
  var P = LUP.P;
  var Pi, LUi, LUii, tmp;

  for (i = n - 1; i !== -1; --i) {
    x[i] = b[i];
  }

  for (i = 0; i < n; ++i) {
    Pi = P[i];

    if (P[i] !== i) {
      tmp = x[i];
      x[i] = x[Pi];
      x[Pi] = tmp;
    }

    LUi = LU[i];

    for (j = 0; j < i; ++j) {
      x[i] -= x[j] * LUi[j];
    }
  }

  for (i = n - 1; i >= 0; --i) {
    LUi = LU[i];

    for (j = i + 1; j < n; ++j) {
      x[i] -= x[j] * LUi[j];
    }

    x[i] /= LUi[i];
  }

  return x;
};

numeric.solve = function solve(A, b, fast) {
  return numeric.LUsolve(numeric.LU(A, fast), b);
}; // 12. Linear programming


numeric.echelonize = function echelonize(A) {
  var s = numeric.dim(A),
      m = s[0],
      n = s[1];
  var I = numeric.identity(m);
  var P = Array(m);
  var i, j, k, l, Ai, Ii, Z, a;
  var abs = Math.abs;
  var diveq = numeric.diveq;
  A = numeric.clone(A);

  for (i = 0; i < m; ++i) {
    k = 0;
    Ai = A[i];
    Ii = I[i];

    for (j = 1; j < n; ++j) {
      if (abs(Ai[k]) < abs(Ai[j])) k = j;
    }

    P[i] = k;
    diveq(Ii, Ai[k]);
    diveq(Ai, Ai[k]);

    for (j = 0; j < m; ++j) {
      if (j !== i) {
        Z = A[j];
        a = Z[k];

        for (l = n - 1; l !== -1; --l) {
          Z[l] -= Ai[l] * a;
        }

        Z = I[j];

        for (l = m - 1; l !== -1; --l) {
          Z[l] -= Ii[l] * a;
        }
      }
    }
  }

  return {
    I: I,
    A: A,
    P: P
  };
};

numeric.__solveLP = function __solveLP(c, A, b, tol, maxit, x, flag) {
  var sum = numeric.sum,
      log = numeric.log,
      mul = numeric.mul,
      sub = numeric.sub,
      dot = numeric.dot,
      div = numeric.div,
      add = numeric.add;
  var m = c.length,
      n = b.length,
      y;
  var unbounded = false,
      cb,
      i0 = 0;
  var alpha = 1.0;
  var f0,
      df0,
      AT = numeric.transpose(A),
      svd = numeric.svd,
      transpose = numeric.transpose,
      leq = numeric.leq,
      sqrt = Math.sqrt,
      abs = Math.abs;
  var muleq = numeric.muleq;
  var norm = numeric.norminf,
      any = numeric.any,
      min = Math.min;
  var all = numeric.all,
      gt = numeric.gt;
  var p = Array(m),
      A0 = Array(n),
      e = numeric.rep([n], 1),
      H;
  var solve = numeric.solve,
      z = sub(b, dot(A, x)),
      count;
  var dotcc = dot(c, c);
  var g;

  for (count = i0; count < maxit; ++count) {
    var i, j, d;

    for (i = n - 1; i !== -1; --i) {
      A0[i] = div(A[i], z[i]);
    }

    var A1 = transpose(A0);

    for (i = m - 1; i !== -1; --i) {
      p[i] =
      /*x[i]+*/
      sum(A1[i]);
    }

    alpha = 0.25 * abs(dotcc / dot(c, p));
    var a1 = 100 * sqrt(dotcc / dot(p, p));
    if (!isFinite(alpha) || alpha > a1) alpha = a1;
    g = add(c, mul(alpha, p));
    H = dot(A1, A0);

    for (i = m - 1; i !== -1; --i) {
      H[i][i] += 1;
    }

    d = solve(H, div(g, alpha), true);
    var t0 = div(z, dot(A, d));
    var t = 1.0;

    for (i = n - 1; i !== -1; --i) {
      if (t0[i] < 0) t = min(t, -0.999 * t0[i]);
    }

    y = sub(x, mul(d, t));
    z = sub(b, dot(A, y));
    if (!all(gt(z, 0))) return {
      solution: x,
      message: "",
      iterations: count
    };
    x = y;
    if (alpha < tol) return {
      solution: y,
      message: "",
      iterations: count
    };

    if (flag) {
      var s = dot(c, g),
          Ag = dot(A, g);
      unbounded = true;

      for (i = n - 1; i !== -1; --i) {
        if (s * Ag[i] < 0) {
          unbounded = false;
          break;
        }
      }
    } else {
      if (x[m - 1] >= 0) unbounded = false;else unbounded = true;
    }

    if (unbounded) return {
      solution: y,
      message: "Unbounded",
      iterations: count
    };
  }

  return {
    solution: x,
    message: "maximum iteration count exceeded",
    iterations: count
  };
};

numeric._solveLP = function _solveLP(c, A, b, tol, maxit) {
  var m = c.length,
      n = b.length,
      y;
  var sum = numeric.sum,
      log = numeric.log,
      mul = numeric.mul,
      sub = numeric.sub,
      dot = numeric.dot,
      div = numeric.div,
      add = numeric.add;
  var c0 = numeric.rep([m], 0).concat([1]);
  var J = numeric.rep([n, 1], -1);
  var A0 = numeric.blockMatrix([[A, J]]);
  var b0 = b;
  var y = numeric.rep([m], 0).concat(Math.max(0, numeric.sup(numeric.neg(b))) + 1);

  var x0 = numeric.__solveLP(c0, A0, b0, tol, maxit, y, false);

  var x = numeric.clone(x0.solution);
  x.length = m;
  var foo = numeric.inf(sub(b, dot(A, x)));

  if (foo < 0) {
    return {
      solution: NaN,
      message: "Infeasible",
      iterations: x0.iterations
    };
  }

  var ret = numeric.__solveLP(c, A, b, tol, maxit - x0.iterations, x, true);

  ret.iterations += x0.iterations;
  return ret;
};

numeric.solveLP = function solveLP(c, A, b, Aeq, beq, tol, maxit) {
  if (typeof maxit === "undefined") maxit = 1000;
  if (typeof tol === "undefined") tol = numeric.epsilon;
  if (typeof Aeq === "undefined") return numeric._solveLP(c, A, b, tol, maxit);
  var m = Aeq.length,
      n = Aeq[0].length,
      o = A.length;
  var B = numeric.echelonize(Aeq);
  var flags = numeric.rep([n], 0);
  var P = B.P;
  var Q = [];
  var i;

  for (i = P.length - 1; i !== -1; --i) {
    flags[P[i]] = 1;
  }

  for (i = n - 1; i !== -1; --i) {
    if (flags[i] === 0) Q.push(i);
  }

  var g = numeric.getRange;
  var I = numeric.linspace(0, m - 1),
      J = numeric.linspace(0, o - 1);
  var Aeq2 = g(Aeq, I, Q),
      A1 = g(A, J, P),
      A2 = g(A, J, Q),
      dot = numeric.dot,
      sub = numeric.sub;
  var A3 = dot(A1, B.I);
  var A4 = sub(A2, dot(A3, Aeq2)),
      b4 = sub(b, dot(A3, beq));
  var c1 = Array(P.length),
      c2 = Array(Q.length);

  for (i = P.length - 1; i !== -1; --i) {
    c1[i] = c[P[i]];
  }

  for (i = Q.length - 1; i !== -1; --i) {
    c2[i] = c[Q[i]];
  }

  var c4 = sub(c2, dot(c1, dot(B.I, Aeq2)));

  var S = numeric._solveLP(c4, A4, b4, tol, maxit);

  var x2 = S.solution;
  if (x2 !== x2) return S;
  var x1 = dot(B.I, sub(beq, dot(Aeq2, x2)));
  var x = Array(c.length);

  for (i = P.length - 1; i !== -1; --i) {
    x[P[i]] = x1[i];
  }

  for (i = Q.length - 1; i !== -1; --i) {
    x[Q[i]] = x2[i];
  }

  return {
    solution: x,
    message: S.message,
    iterations: S.iterations
  };
};

numeric.MPStoLP = function MPStoLP(MPS) {
  if (MPS instanceof String) {
    MPS.split('\n');
  }

  var state = 0;
  var states = ['Initial state', 'NAME', 'ROWS', 'COLUMNS', 'RHS', 'BOUNDS', 'ENDATA'];
  var n = MPS.length;
  var i,
      j,
      z,
      N = 0,
      rows = {},
      sign = [],
      rl = 0,
      vars = {},
      nv = 0;
  var name;
  var c = [],
      A = [],
      b = [];

  function err(e) {
    throw new Error('MPStoLP: ' + e + '\nLine ' + i + ': ' + MPS[i] + '\nCurrent state: ' + states[state] + '\n');
  }

  for (i = 0; i < n; ++i) {
    z = MPS[i];
    var w0 = z.match(/\S*/g);
    var w = [];

    for (j = 0; j < w0.length; ++j) {
      if (w0[j] !== "") w.push(w0[j]);
    }

    if (w.length === 0) continue;

    for (j = 0; j < states.length; ++j) {
      if (z.substr(0, states[j].length) === states[j]) break;
    }

    if (j < states.length) {
      state = j;

      if (j === 1) {
        name = w[1];
      }

      if (j === 6) return {
        name: name,
        c: c,
        A: numeric.transpose(A),
        b: b,
        rows: rows,
        vars: vars
      };
      continue;
    }

    switch (state) {
      case 0:
      case 1:
        err('Unexpected line');

      case 2:
        switch (w[0]) {
          case 'N':
            if (N === 0) N = w[1];else err('Two or more N rows');
            break;

          case 'L':
            rows[w[1]] = rl;
            sign[rl] = 1;
            b[rl] = 0;
            ++rl;
            break;

          case 'G':
            rows[w[1]] = rl;
            sign[rl] = -1;
            b[rl] = 0;
            ++rl;
            break;

          case 'E':
            rows[w[1]] = rl;
            sign[rl] = 0;
            b[rl] = 0;
            ++rl;
            break;

          default:
            err('Parse error ' + numeric.prettyPrint(w));
        }

        break;

      case 3:
        if (!vars.hasOwnProperty(w[0])) {
          vars[w[0]] = nv;
          c[nv] = 0;
          A[nv] = numeric.rep([rl], 0);
          ++nv;
        }

        var p = vars[w[0]];

        for (j = 1; j < w.length; j += 2) {
          if (w[j] === N) {
            c[p] = parseFloat(w[j + 1]);
            continue;
          }

          var q = rows[w[j]];
          A[p][q] = (sign[q] < 0 ? -1 : 1) * parseFloat(w[j + 1]);
        }

        break;

      case 4:
        for (j = 1; j < w.length; j += 2) {
          b[rows[w[j]]] = (sign[rows[w[j]]] < 0 ? -1 : 1) * parseFloat(w[j + 1]);
        }

        break;

      case 5:
        /*FIXME*/
        break;

      case 6:
        err('Internal error');
    }
  }

  err('Reached end of file without ENDATA');
}; // seedrandom.js version 2.0.
// Author: David Bau 4/2/2011
//
// Defines a method Math.seedrandom() that, when called, substitutes
// an explicitly seeded RC4-based algorithm for Math.random().  Also
// supports automatic seeding from local or network sources of entropy.
//
// Usage:
//
//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
//
//   Math.seedrandom('yipee'); Sets Math.random to a function that is
//                             initialized using the given explicit seed.
//
//   Math.seedrandom();        Sets Math.random to a function that is
//                             seeded using the current time, dom state,
//                             and other accumulated local entropy.
//                             The generated seed string is returned.
//
//   Math.seedrandom('yowza', true);
//                             Seeds using the given explicit seed mixed
//                             together with accumulated entropy.
//
//   <script src="http://bit.ly/srandom-512"></script>
//                             Seeds using physical random bits downloaded
//                             from random.org.
//
//   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
//   </script>                 Seeds using urandom bits from call.jsonlib.com,
//                             which is faster than random.org.
//
// Examples:
//
//   Math.seedrandom("hello");            // Use "hello" as the seed.
//   document.write(Math.random());       // Always 0.5463663768140734
//   document.write(Math.random());       // Always 0.43973793770592234
//   var rng1 = Math.random;              // Remember the current prng.
//
//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
//   document.write(Math.random());       // Pretty much unpredictable.
//
//   Math.random = rng1;                  // Continue "hello" prng sequence.
//   document.write(Math.random());       // Always 0.554769432473455
//
//   Math.seedrandom(autoseed);           // Restart at the previous seed.
//   document.write(Math.random());       // Repeat the 'unpredictable' value.
//
// Notes:
//
// Each time seedrandom('arg') is called, entropy from the passed seed
// is accumulated in a pool to help generate future seeds for the
// zero-argument form of Math.seedrandom, so entropy can be injected over
// time by calling seedrandom with explicit data repeatedly.
//
// On speed - This javascript implementation of Math.random() is about
// 3-10x slower than the built-in Math.random() because it is not native
// code, but this is typically fast enough anyway.  Seeding is more expensive,
// especially if you use auto-seeding.  Some details (timings on Chrome 4):
//
// Our Math.random()            - avg less than 0.002 milliseconds per call
// seedrandom('explicit')       - avg less than 0.5 milliseconds per call
// seedrandom('explicit', true) - avg less than 2 milliseconds per call
// seedrandom()                 - avg about 38 milliseconds per call
//
// LICENSE (BSD):
//
// Copyright 2010 David Bau, all rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
// 
//   3. Neither the name of this module nor the names of its contributors may
//      be used to endorse or promote products derived from this software
//      without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

/**
 * All code is in an anonymous closure to keep the global namespace clean.
 *
 * @param {number=} overflow 
 * @param {number=} startdenom
 */
// Patched by Seb so that seedrandom.js does not pollute the Math object.
// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%
// slower.


numeric.seedrandom = {
  pow: Math.pow,
  random: Math.random
};

(function (pool, math, width, chunks, significance, overflow, startdenom) {
  //
  // seedrandom()
  // This is the seedrandom function described above.
  //
  math['seedrandom'] = function seedrandom(seed, use_entropy) {
    var key = [];
    var arc4; // Flatten the seed string or build one from local entropy if needed.

    seed = mixkey(flatten(use_entropy ? [seed, pool] : arguments.length ? seed : [new Date().getTime(), pool, window], 3), key); // Use the seed to initialize an ARC4 generator.

    arc4 = new ARC4(key); // Mix the randomness into accumulated entropy.

    mixkey(arc4.S, pool); // Override Math.random
    // This function returns a random double in [0, 1) that contains
    // randomness in every bit of the mantissa of the IEEE 754 value.

    math['random'] = function random() {
      // Closure to return a random double:
      var n = arc4.g(chunks); // Start with a numerator n < 2 ^ 48

      var d = startdenom; //   and denominator d = 2 ^ 48.

      var x = 0; //   and no 'extra last byte'.

      while (n < significance) {
        // Fill up all significant digits by
        n = (n + x) * width; //   shifting numerator and

        d *= width; //   denominator and generating a

        x = arc4.g(1); //   new least-significant-byte.
      }

      while (n >= overflow) {
        // To avoid rounding up, before adding
        n /= 2; //   last byte, shift everything

        d /= 2; //   right using integer math until

        x >>>= 1; //   we have exactly the desired bits.
      }

      return (n + x) / d; // Form the number within [0, 1).
    }; // Return the seed that was used


    return seed;
  }; //
  // ARC4
  //
  // An ARC4 implementation.  The constructor takes a key in the form of
  // an array of at most (width) integers that should be 0 <= x < (width).
  //
  // The g(count) method returns a pseudorandom integer that concatenates
  // the next (count) outputs from ARC4.  Its return value is a number x
  // that is in the range 0 <= x < (width ^ count).
  //

  /** @constructor */


  function ARC4(key) {
    var t,
        u,
        me = this,
        keylen = key.length;
    var i = 0,
        j = me.i = me.j = me.m = 0;
    me.S = [];
    me.c = []; // The empty key [] is treated as [0].

    if (!keylen) {
      key = [keylen++];
    } // Set up S using the standard key scheduling algorithm.


    while (i < width) {
      me.S[i] = i++;
    }

    for (i = 0; i < width; i++) {
      t = me.S[i];
      j = lowbits(j + t + key[i % keylen]);
      u = me.S[j];
      me.S[i] = u;
      me.S[j] = t;
    } // The "g" method returns the next (count) outputs as one number.


    me.g = function getnext(count) {
      var s = me.S;
      var i = lowbits(me.i + 1);
      var t = s[i];
      var j = lowbits(me.j + t);
      var u = s[j];
      s[i] = u;
      s[j] = t;
      var r = s[lowbits(t + u)];

      while (--count) {
        i = lowbits(i + 1);
        t = s[i];
        j = lowbits(j + t);
        u = s[j];
        s[i] = u;
        s[j] = t;
        r = r * width + s[lowbits(t + u)];
      }

      me.i = i;
      me.j = j;
      return r;
    }; // For robust unpredictability discard an initial batch of values.
    // See http://www.rsa.com/rsalabs/node.asp?id=2009


    me.g(width);
  } //
  // flatten()
  // Converts an object tree to nested arrays of strings.
  //

  /** @param {Object=} result 
    * @param {string=} prop
    * @param {string=} typ */


  function flatten(obj, depth, result, prop, typ) {
    result = [];
    typ = _typeof(obj);

    if (depth && typ == 'object') {
      for (prop in obj) {
        if (prop.indexOf('S') < 5) {
          // Avoid FF3 bug (local/sessionStorage)
          try {
            result.push(flatten(obj[prop], depth - 1));
          } catch (e) {}
        }
      }
    }

    return result.length ? result : obj + (typ != 'string' ? '\0' : '');
  } //
  // mixkey()
  // Mixes a string seed into a key that is an array of integers, and
  // returns a shortened string seed that is equivalent to the result key.
  //

  /** @param {number=} smear 
    * @param {number=} j */


  function mixkey(seed, key, smear, j) {
    seed += ''; // Ensure the seed is a string

    smear = 0;

    for (j = 0; j < seed.length; j++) {
      key[lowbits(j)] = lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
    }

    seed = '';

    for (j in key) {
      seed += String.fromCharCode(key[j]);
    }

    return seed;
  } //
  // lowbits()
  // A quick "n mod width" for width a power of 2.
  //


  function lowbits(n) {
    return n & width - 1;
  } //
  // The following constants are related to IEEE 754 limits.
  //


  startdenom = math.pow(width, chunks);
  significance = math.pow(2, significance);
  overflow = significance * 2; //
  // When seedrandom.js is loaded, we immediately mix a few bits
  // from the built-in RNG into the entropy pool.  Because we do
  // not want to intefere with determinstic PRNG state later,
  // seedrandom will not call math.random on its own again after
  // initialization.
  //

  mixkey(math.random(), pool); // End anonymous scope, and pass initial values.
})([], // pool: entropy pool starts empty
numeric.seedrandom, // math: package containing random, pow, and seedrandom
256, // width: each RC4 output is 0 <= x < 256
6, // chunks: at least six RC4 outputs for each double
52 // significance: there are 52 significant digits in a double
);
/* This file is a slightly modified version of quadprog.js from Alberto Santini.
 * It has been slightly modified by Sébastien Loisel to make sure that it handles
 * 0-based Arrays instead of 1-based Arrays.
 * License is in resources/LICENSE.quadprog */


(function (exports) {
  function base0to1(A) {
    if (_typeof(A) !== "object") {
      return A;
    }

    var ret = [],
        i,
        n = A.length;

    for (i = 0; i < n; i++) {
      ret[i + 1] = base0to1(A[i]);
    }

    return ret;
  }

  function base1to0(A) {
    if (_typeof(A) !== "object") {
      return A;
    }

    var ret = [],
        i,
        n = A.length;

    for (i = 1; i < n; i++) {
      ret[i - 1] = base1to0(A[i]);
    }

    return ret;
  }

  function dpori(a, lda, n) {
    var i, j, k, kp1, t;

    for (k = 1; k <= n; k = k + 1) {
      a[k][k] = 1 / a[k][k];
      t = -a[k][k]; //~ dscal(k - 1, t, a[1][k], 1);

      for (i = 1; i < k; i = i + 1) {
        a[i][k] = t * a[i][k];
      }

      kp1 = k + 1;

      if (n < kp1) {
        break;
      }

      for (j = kp1; j <= n; j = j + 1) {
        t = a[k][j];
        a[k][j] = 0; //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);

        for (i = 1; i <= k; i = i + 1) {
          a[i][j] = a[i][j] + t * a[i][k];
        }
      }
    }
  }

  function dposl(a, lda, n, b) {
    var i, k, kb, t;

    for (k = 1; k <= n; k = k + 1) {
      //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);
      t = 0;

      for (i = 1; i < k; i = i + 1) {
        t = t + a[i][k] * b[i];
      }

      b[k] = (b[k] - t) / a[k][k];
    }

    for (kb = 1; kb <= n; kb = kb + 1) {
      k = n + 1 - kb;
      b[k] = b[k] / a[k][k];
      t = -b[k]; //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);

      for (i = 1; i < k; i = i + 1) {
        b[i] = b[i] + t * a[i][k];
      }
    }
  }

  function dpofa(a, lda, n, info) {
    var i, j, jm1, k, t, s;

    for (j = 1; j <= n; j = j + 1) {
      info[1] = j;
      s = 0;
      jm1 = j - 1;

      if (jm1 < 1) {
        s = a[j][j] - s;

        if (s <= 0) {
          break;
        }

        a[j][j] = Math.sqrt(s);
      } else {
        for (k = 1; k <= jm1; k = k + 1) {
          //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);
          t = a[k][j];

          for (i = 1; i < k; i = i + 1) {
            t = t - a[i][j] * a[i][k];
          }

          t = t / a[k][k];
          a[k][j] = t;
          s = s + t * t;
        }

        s = a[j][j] - s;

        if (s <= 0) {
          break;
        }

        a[j][j] = Math.sqrt(s);
      }

      info[1] = 0;
    }
  }

  function qpgen2(dmat, dvec, fddmat, n, sol, crval, amat, bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {
    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv, temp, sum, t1, tt, gc, gs, nu, t1inf, t2min, vsmall, tmpa, tmpb, go;
    r = Math.min(n, q);
    l = 2 * n + r * (r + 5) / 2 + 2 * q + 1;
    vsmall = 1.0e-60;

    do {
      vsmall = vsmall + vsmall;
      tmpa = 1 + 0.1 * vsmall;
      tmpb = 1 + 0.2 * vsmall;
    } while (tmpa <= 1 || tmpb <= 1);

    for (i = 1; i <= n; i = i + 1) {
      work[i] = dvec[i];
    }

    for (i = n + 1; i <= l; i = i + 1) {
      work[i] = 0;
    }

    for (i = 1; i <= q; i = i + 1) {
      iact[i] = 0;
    }

    info = [];

    if (ierr[1] === 0) {
      dpofa(dmat, fddmat, n, info);

      if (info[1] !== 0) {
        ierr[1] = 2;
        return;
      }

      dposl(dmat, fddmat, n, dvec);
      dpori(dmat, fddmat, n);
    } else {
      for (j = 1; j <= n; j = j + 1) {
        sol[j] = 0;

        for (i = 1; i <= j; i = i + 1) {
          sol[j] = sol[j] + dmat[i][j] * dvec[i];
        }
      }

      for (j = 1; j <= n; j = j + 1) {
        dvec[j] = 0;

        for (i = j; i <= n; i = i + 1) {
          dvec[j] = dvec[j] + dmat[j][i] * sol[i];
        }
      }
    }

    crval[1] = 0;

    for (j = 1; j <= n; j = j + 1) {
      sol[j] = dvec[j];
      crval[1] = crval[1] + work[j] * sol[j];
      work[j] = 0;

      for (i = j + 1; i <= n; i = i + 1) {
        dmat[i][j] = 0;
      }
    }

    crval[1] = -crval[1] / 2;
    ierr[1] = 0;
    iwzv = n;
    iwrv = iwzv + n;
    iwuv = iwrv + r;
    iwrm = iwuv + r + 1;
    iwsv = iwrm + r * (r + 1) / 2;
    iwnbv = iwsv + q;

    for (i = 1; i <= q; i = i + 1) {
      sum = 0;

      for (j = 1; j <= n; j = j + 1) {
        sum = sum + amat[j][i] * amat[j][i];
      }

      work[iwnbv + i] = Math.sqrt(sum);
    }

    nact = 0;
    iter[1] = 0;
    iter[2] = 0;

    function fn_goto_50() {
      iter[1] = iter[1] + 1;
      l = iwsv;

      for (i = 1; i <= q; i = i + 1) {
        l = l + 1;
        sum = -bvec[i];

        for (j = 1; j <= n; j = j + 1) {
          sum = sum + amat[j][i] * sol[j];
        }

        if (Math.abs(sum) < vsmall) {
          sum = 0;
        }

        if (i > meq) {
          work[l] = sum;
        } else {
          work[l] = -Math.abs(sum);

          if (sum > 0) {
            for (j = 1; j <= n; j = j + 1) {
              amat[j][i] = -amat[j][i];
            }

            bvec[i] = -bvec[i];
          }
        }
      }

      for (i = 1; i <= nact; i = i + 1) {
        work[iwsv + iact[i]] = 0;
      }

      nvl = 0;
      temp = 0;

      for (i = 1; i <= q; i = i + 1) {
        if (work[iwsv + i] < temp * work[iwnbv + i]) {
          nvl = i;
          temp = work[iwsv + i] / work[iwnbv + i];
        }
      }

      if (nvl === 0) {
        return 999;
      }

      return 0;
    }

    function fn_goto_55() {
      for (i = 1; i <= n; i = i + 1) {
        sum = 0;

        for (j = 1; j <= n; j = j + 1) {
          sum = sum + dmat[j][i] * amat[j][nvl];
        }

        work[i] = sum;
      }

      l1 = iwzv;

      for (i = 1; i <= n; i = i + 1) {
        work[l1 + i] = 0;
      }

      for (j = nact + 1; j <= n; j = j + 1) {
        for (i = 1; i <= n; i = i + 1) {
          work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];
        }
      }

      t1inf = true;

      for (i = nact; i >= 1; i = i - 1) {
        sum = work[i];
        l = iwrm + i * (i + 3) / 2;
        l1 = l - i;

        for (j = i + 1; j <= nact; j = j + 1) {
          sum = sum - work[l] * work[iwrv + j];
          l = l + j;
        }

        sum = sum / work[l1];
        work[iwrv + i] = sum;

        if (iact[i] < meq) {
          // continue;
          break;
        }

        if (sum < 0) {
          // continue;
          break;
        }

        t1inf = false;
        it1 = i;
      }

      if (!t1inf) {
        t1 = work[iwuv + it1] / work[iwrv + it1];

        for (i = 1; i <= nact; i = i + 1) {
          if (iact[i] < meq) {
            // continue;
            break;
          }

          if (work[iwrv + i] < 0) {
            // continue;
            break;
          }

          temp = work[iwuv + i] / work[iwrv + i];

          if (temp < t1) {
            t1 = temp;
            it1 = i;
          }
        }
      }

      sum = 0;

      for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {
        sum = sum + work[i] * work[i];
      }

      if (Math.abs(sum) <= vsmall) {
        if (t1inf) {
          ierr[1] = 1; // GOTO 999

          return 999;
        } else {
          for (i = 1; i <= nact; i = i + 1) {
            work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];
          }

          work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1; // GOTO 700

          return 700;
        }
      } else {
        sum = 0;

        for (i = 1; i <= n; i = i + 1) {
          sum = sum + work[iwzv + i] * amat[i][nvl];
        }

        tt = -work[iwsv + nvl] / sum;
        t2min = true;

        if (!t1inf) {
          if (t1 < tt) {
            tt = t1;
            t2min = false;
          }
        }

        for (i = 1; i <= n; i = i + 1) {
          sol[i] = sol[i] + tt * work[iwzv + i];

          if (Math.abs(sol[i]) < vsmall) {
            sol[i] = 0;
          }
        }

        crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);

        for (i = 1; i <= nact; i = i + 1) {
          work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];
        }

        work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;

        if (t2min) {
          nact = nact + 1;
          iact[nact] = nvl;
          l = iwrm + (nact - 1) * nact / 2 + 1;

          for (i = 1; i <= nact - 1; i = i + 1) {
            work[l] = work[i];
            l = l + 1;
          }

          if (nact === n) {
            work[l] = work[n];
          } else {
            for (i = n; i >= nact + 1; i = i - 1) {
              if (work[i] === 0) {
                // continue;
                break;
              }

              gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));
              gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));

              if (work[i - 1] >= 0) {
                temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
              } else {
                temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
              }

              gc = work[i - 1] / temp;
              gs = work[i] / temp;

              if (gc === 1) {
                // continue;
                break;
              }

              if (gc === 0) {
                work[i - 1] = gs * temp;

                for (j = 1; j <= n; j = j + 1) {
                  temp = dmat[j][i - 1];
                  dmat[j][i - 1] = dmat[j][i];
                  dmat[j][i] = temp;
                }
              } else {
                work[i - 1] = temp;
                nu = gs / (1 + gc);

                for (j = 1; j <= n; j = j + 1) {
                  temp = gc * dmat[j][i - 1] + gs * dmat[j][i];
                  dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];
                  dmat[j][i - 1] = temp;
                }
              }
            }

            work[l] = work[nact];
          }
        } else {
          sum = -bvec[nvl];

          for (j = 1; j <= n; j = j + 1) {
            sum = sum + sol[j] * amat[j][nvl];
          }

          if (nvl > meq) {
            work[iwsv + nvl] = sum;
          } else {
            work[iwsv + nvl] = -Math.abs(sum);

            if (sum > 0) {
              for (j = 1; j <= n; j = j + 1) {
                amat[j][nvl] = -amat[j][nvl];
              }

              bvec[nvl] = -bvec[nvl];
            }
          } // GOTO 700


          return 700;
        }
      }

      return 0;
    }

    function fn_goto_797() {
      l = iwrm + it1 * (it1 + 1) / 2 + 1;
      l1 = l + it1;

      if (work[l1] === 0) {
        // GOTO 798
        return 798;
      }

      gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
      gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));

      if (work[l1 - 1] >= 0) {
        temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
      } else {
        temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
      }

      gc = work[l1 - 1] / temp;
      gs = work[l1] / temp;

      if (gc === 1) {
        // GOTO 798
        return 798;
      }

      if (gc === 0) {
        for (i = it1 + 1; i <= nact; i = i + 1) {
          temp = work[l1 - 1];
          work[l1 - 1] = work[l1];
          work[l1] = temp;
          l1 = l1 + i;
        }

        for (i = 1; i <= n; i = i + 1) {
          temp = dmat[i][it1];
          dmat[i][it1] = dmat[i][it1 + 1];
          dmat[i][it1 + 1] = temp;
        }
      } else {
        nu = gs / (1 + gc);

        for (i = it1 + 1; i <= nact; i = i + 1) {
          temp = gc * work[l1 - 1] + gs * work[l1];
          work[l1] = nu * (work[l1 - 1] + temp) - work[l1];
          work[l1 - 1] = temp;
          l1 = l1 + i;
        }

        for (i = 1; i <= n; i = i + 1) {
          temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];
          dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];
          dmat[i][it1] = temp;
        }
      }

      return 0;
    }

    function fn_goto_798() {
      l1 = l - it1;

      for (i = 1; i <= it1; i = i + 1) {
        work[l1] = work[l];
        l = l + 1;
        l1 = l1 + 1;
      }

      work[iwuv + it1] = work[iwuv + it1 + 1];
      iact[it1] = iact[it1 + 1];
      it1 = it1 + 1;

      if (it1 < nact) {
        // GOTO 797
        return 797;
      }

      return 0;
    }

    function fn_goto_799() {
      work[iwuv + nact] = work[iwuv + nact + 1];
      work[iwuv + nact + 1] = 0;
      iact[nact] = 0;
      nact = nact - 1;
      iter[2] = iter[2] + 1;
      return 0;
    }

    go = 0;

    while (true) {
      go = fn_goto_50();

      if (go === 999) {
        return;
      }

      while (true) {
        go = fn_goto_55();

        if (go === 0) {
          break;
        }

        if (go === 999) {
          return;
        }

        if (go === 700) {
          if (it1 === nact) {
            fn_goto_799();
          } else {
            while (true) {
              fn_goto_797();
              go = fn_goto_798();

              if (go !== 797) {
                break;
              }
            }

            fn_goto_799();
          }
        }
      }
    }
  }

  function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {
    Dmat = base0to1(Dmat);
    dvec = base0to1(dvec);
    Amat = base0to1(Amat);
    var i,
        n,
        q,
        nact,
        r,
        crval = [],
        iact = [],
        sol = [],
        work = [],
        iter = [],
        message;
    meq = meq || 0;
    factorized = factorized ? base0to1(factorized) : [undefined, 0];
    bvec = bvec ? base0to1(bvec) : []; // In Fortran the array index starts from 1

    n = Dmat.length - 1;
    q = Amat[1].length - 1;

    if (!bvec) {
      for (i = 1; i <= q; i = i + 1) {
        bvec[i] = 0;
      }
    }

    for (i = 1; i <= q; i = i + 1) {
      iact[i] = 0;
    }

    nact = 0;
    r = Math.min(n, q);

    for (i = 1; i <= n; i = i + 1) {
      sol[i] = 0;
    }

    crval[1] = 0;

    for (i = 1; i <= 2 * n + r * (r + 5) / 2 + 2 * q + 1; i = i + 1) {
      work[i] = 0;
    }

    for (i = 1; i <= 2; i = i + 1) {
      iter[i] = 0;
    }

    qpgen2(Dmat, dvec, n, n, sol, crval, Amat, bvec, n, q, meq, iact, nact, iter, work, factorized);
    message = "";

    if (factorized[1] === 1) {
      message = "constraints are inconsistent, no solution!";
    }

    if (factorized[1] === 2) {
      message = "matrix D in quadratic function is not positive definite!";
    }

    return {
      solution: base1to0(sol),
      value: base1to0(crval),
      unconstrained_solution: base1to0(dvec),
      iterations: base1to0(iter),
      iact: base1to0(iact),
      message: message
    };
  }

  exports.solveQP = solveQP;
})(numeric);
/*
Shanti Rao sent me this routine by private email. I had to modify it
slightly to work on Arrays instead of using a Matrix object.
It is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py
*/


numeric.svd = function svd(A) {
  var temp; //Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)

  var prec = numeric.epsilon; //Math.pow(2,-52) // assumes double prec

  var tolerance = 1.e-64 / prec;
  var itmax = 50;
  var c = 0;
  var i = 0;
  var j = 0;
  var k = 0;
  var l = 0;
  var u = numeric.clone(A);
  var m = u.length;
  var n = u[0].length;
  if (m < n) throw "Need more rows than columns";
  var e = new Array(n);
  var q = new Array(n);

  for (i = 0; i < n; i++) {
    e[i] = q[i] = 0.0;
  }

  var v = numeric.rep([n, n], 0); //	v.zero();

  function pythag(a, b) {
    a = Math.abs(a);
    b = Math.abs(b);
    if (a > b) return a * Math.sqrt(1.0 + b * b / a / a);else if (b == 0.0) return a;
    return b * Math.sqrt(1.0 + a * a / b / b);
  } //Householder's reduction to bidiagonal form


  var f = 0.0;
  var g = 0.0;
  var h = 0.0;
  var x = 0.0;
  var y = 0.0;
  var z = 0.0;
  var s = 0.0;

  for (i = 0; i < n; i++) {
    e[i] = g;
    s = 0.0;
    l = i + 1;

    for (j = i; j < m; j++) {
      s += u[j][i] * u[j][i];
    }

    if (s <= tolerance) g = 0.0;else {
      f = u[i][i];
      g = Math.sqrt(s);
      if (f >= 0.0) g = -g;
      h = f * g - s;
      u[i][i] = f - g;

      for (j = l; j < n; j++) {
        s = 0.0;

        for (k = i; k < m; k++) {
          s += u[k][i] * u[k][j];
        }

        f = s / h;

        for (k = i; k < m; k++) {
          u[k][j] += f * u[k][i];
        }
      }
    }
    q[i] = g;
    s = 0.0;

    for (j = l; j < n; j++) {
      s = s + u[i][j] * u[i][j];
    }

    if (s <= tolerance) g = 0.0;else {
      f = u[i][i + 1];
      g = Math.sqrt(s);
      if (f >= 0.0) g = -g;
      h = f * g - s;
      u[i][i + 1] = f - g;

      for (j = l; j < n; j++) {
        e[j] = u[i][j] / h;
      }

      for (j = l; j < m; j++) {
        s = 0.0;

        for (k = l; k < n; k++) {
          s += u[j][k] * u[i][k];
        }

        for (k = l; k < n; k++) {
          u[j][k] += s * e[k];
        }
      }
    }
    y = Math.abs(q[i]) + Math.abs(e[i]);
    if (y > x) x = y;
  } // accumulation of right hand gtransformations


  for (i = n - 1; i != -1; i += -1) {
    if (g != 0.0) {
      h = g * u[i][i + 1];

      for (j = l; j < n; j++) {
        v[j][i] = u[i][j] / h;
      }

      for (j = l; j < n; j++) {
        s = 0.0;

        for (k = l; k < n; k++) {
          s += u[i][k] * v[k][j];
        }

        for (k = l; k < n; k++) {
          v[k][j] += s * v[k][i];
        }
      }
    }

    for (j = l; j < n; j++) {
      v[i][j] = 0;
      v[j][i] = 0;
    }

    v[i][i] = 1;
    g = e[i];
    l = i;
  } // accumulation of left hand transformations


  for (i = n - 1; i != -1; i += -1) {
    l = i + 1;
    g = q[i];

    for (j = l; j < n; j++) {
      u[i][j] = 0;
    }

    if (g != 0.0) {
      h = u[i][i] * g;

      for (j = l; j < n; j++) {
        s = 0.0;

        for (k = l; k < m; k++) {
          s += u[k][i] * u[k][j];
        }

        f = s / h;

        for (k = i; k < m; k++) {
          u[k][j] += f * u[k][i];
        }
      }

      for (j = i; j < m; j++) {
        u[j][i] = u[j][i] / g;
      }
    } else for (j = i; j < m; j++) {
      u[j][i] = 0;
    }

    u[i][i] += 1;
  } // diagonalization of the bidiagonal form


  prec = prec * x;

  for (k = n - 1; k != -1; k += -1) {
    for (var iteration = 0; iteration < itmax; iteration++) {
      // test f splitting
      var test_convergence = false;

      for (l = k; l != -1; l += -1) {
        if (Math.abs(e[l]) <= prec) {
          test_convergence = true;
          break;
        }

        if (Math.abs(q[l - 1]) <= prec) break;
      }

      if (!test_convergence) {
        // cancellation of e[l] if l>0
        c = 0.0;
        s = 1.0;
        var l1 = l - 1;

        for (i = l; i < k + 1; i++) {
          f = s * e[i];
          e[i] = c * e[i];
          if (Math.abs(f) <= prec) break;
          g = q[i];
          h = pythag(f, g);
          q[i] = h;
          c = g / h;
          s = -f / h;

          for (j = 0; j < m; j++) {
            y = u[j][l1];
            z = u[j][i];
            u[j][l1] = y * c + z * s;
            u[j][i] = -y * s + z * c;
          }
        }
      } // test f convergence


      z = q[k];

      if (l == k) {
        //convergence
        if (z < 0.0) {
          //q[k] is made non-negative
          q[k] = -z;

          for (j = 0; j < n; j++) {
            v[j][k] = -v[j][k];
          }
        }

        break; //break out of iteration loop and move on to next k value
      }

      if (iteration >= itmax - 1) throw 'Error: no convergence.'; // shift from bottom 2x2 minor

      x = q[l];
      y = q[k - 1];
      g = e[k - 1];
      h = e[k];
      f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);
      g = pythag(f, 1.0);
      if (f < 0.0) f = ((x - z) * (x + z) + h * (y / (f - g) - h)) / x;else f = ((x - z) * (x + z) + h * (y / (f + g) - h)) / x; // next QR transformation

      c = 1.0;
      s = 1.0;

      for (i = l + 1; i < k + 1; i++) {
        g = e[i];
        y = q[i];
        h = s * g;
        g = c * g;
        z = pythag(f, h);
        e[i - 1] = z;
        c = f / z;
        s = h / z;
        f = x * c + g * s;
        g = -x * s + g * c;
        h = y * s;
        y = y * c;

        for (j = 0; j < n; j++) {
          x = v[j][i - 1];
          z = v[j][i];
          v[j][i - 1] = x * c + z * s;
          v[j][i] = -x * s + z * c;
        }

        z = pythag(f, h);
        q[i - 1] = z;
        c = f / z;
        s = h / z;
        f = c * g + s * y;
        x = -s * g + c * y;

        for (j = 0; j < m; j++) {
          y = u[j][i - 1];
          z = u[j][i];
          u[j][i - 1] = y * c + z * s;
          u[j][i] = -y * s + z * c;
        }
      }

      e[l] = 0.0;
      e[k] = f;
      q[k] = x;
    }
  } //vt= transpose(v)
  //return (u,q,vt)


  for (i = 0; i < q.length; i++) {
    if (q[i] < prec) q[i] = 0;
  } //sort eigenvalues	


  for (i = 0; i < n; i++) {
    //writeln(q)
    for (j = i - 1; j >= 0; j--) {
      if (q[j] < q[i]) {
        //  writeln(i,'-',j)
        c = q[j];
        q[j] = q[i];
        q[i] = c;

        for (k = 0; k < u.length; k++) {
          temp = u[k][i];
          u[k][i] = u[k][j];
          u[k][j] = temp;
        }

        for (k = 0; k < v.length; k++) {
          temp = v[k][i];
          v[k][i] = v[k][j];
          v[k][j] = temp;
        } //	   u.swapCols(i,j)
        //	   v.swapCols(i,j)


        i = j;
      }
    }
  }

  return {
    U: u,
    S: q,
    V: v
  };
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],234:[function(require,module,exports){
"use strict";

var math = require('mathjs/core').create();

math.import(require('mathjs/lib/type/matrix'));
math.import(require('mathjs/lib/function/arithmetic'));
math.import(require('mathjs/lib/function/matrix'));

var numeric = require('numeric');

var stat = require('pw-stat');
/**
 * Creates a new CSP object
 * @constructor
 * @param {number[][]} class1 - Data samples for class 1. Rows should be samples, columns should be signals.
 * @param {number[][]} class2 - Data samples for class 2. Rows should be samples, columns should be signals.
 */


function CSP(class1, class2) {
  var cov1 = stat.cov(class1);
  var cov2 = stat.cov(class2);
  this.V = numeric.eig(math.multiply(math.inv(math.add(cov1, cov2)), cov1)).E.x;
}
/**
 * Projects data and reduces to given number of dimensions
 * @param {number[][]} data - Data points to be projected. Rows should be samples, columns should be signals.
 * @param {number} [dimensions] - Number of dimensions to be returned. Can range from 1 to number of signals. Defaults to number of signals.
 * @returns {number[][]} Projected data. Rows are samples, columns are dimensions sorted by descending importance.
 */


CSP.prototype.project = function (data, dimensions) {
  var projected = math.multiply(data, this.V); // Default number of dimensions is all of them, which is number of columns in data

  dimensions = typeof dimensions !== "undefined" ? dimensions : projected[0].length;
  var reduced = [];

  for (var r = 0; r < projected.length; r++) {
    reduced.push([]);

    for (var i = 0; i < dimensions; i++) {
      // Start at left and right ends of matrix columns are work towards center
      if (i % 2 == 0) {
        var column = i / 2;
      } else {
        var column = projected[0].length - (i + 1) / 2;
      }

      reduced[r].push(projected[r][column]);
    }
  }

  return reduced;
};

module.exports = CSP;

},{"mathjs/core":47,"mathjs/lib/function/arithmetic":71,"mathjs/lib/function/matrix":98,"mathjs/lib/type/matrix":197,"numeric":233,"pw-stat":236}],235:[function(require,module,exports){
"use strict";

var math = require('mathjs/core').create();

math.import(require('mathjs/lib/type/matrix'));
math.import(require('mathjs/lib/function/arithmetic'));
math.import(require('mathjs/lib/function/matrix'));

var stat = require('pw-stat');
/**
 * An LDA object.
 * @constructor
 * @param {...number[][]} classes - Each parameter is a 2d class array. In each class array, rows are samples, columns are variables.
 * @example
 * let classifier = new LDA(class1, class2, class3);
 */


function LDA() {
  // Compute pairwise LDA classes (needed for multiclass LDA)
  if (arguments.length < 2) {
    throw new Error('Please pass at least 2 classes');
  }

  var numberOfPairs = arguments.length * (arguments.length - 1) / 2;
  var pair1 = 0;
  var pair2 = 1;
  var pairs = new Array(numberOfPairs);

  for (var i = 0; i < numberOfPairs; i++) {
    pairs[i] = computeLdaParams(pair1 < 0 || arguments.length <= pair1 ? undefined : arguments[pair1], pair2 < 0 || arguments.length <= pair2 ? undefined : arguments[pair2], pair1, pair2);
    pair2++;

    if (pair2 == arguments.length) {
      pair1++;
      pair2 = pair1 + 1;
    }
  }

  this.pairs = pairs;
  this.numberOfClasses = arguments.length;
}

function computeLdaParams(class1, class2, class1id, class2id) {
  var mu1 = math.transpose(stat.mean(class1));
  var mu2 = math.transpose(stat.mean(class2));
  var pooledCov = math.add(stat.cov(class1), stat.cov(class2));
  var theta = math.multiply(math.inv(pooledCov), math.subtract(mu2, mu1));
  var b = math.multiply(-1, math.transpose(theta), math.add(mu1, mu2), 1 / 2);
  return {
    theta: theta,
    b: b,
    class1id: class1id,
    class2id: class2id
  };
}
/**
 * Project the unknown data point to one dimension.
 * Currently only supports binary LDA.
 * @param {number[]} point - The data point to be projected.
 * @returns {number} value less than 0 if predicted to be in class 1, 0 if exactly in between, greater than 0 if class 2
 */


LDA.prototype.project = function (point) {
  if (this.pairs.length != 1) {
    throw new Error('LDA project currently only supports 2 classes. LDA classify can be used to perform multiclass classification.');
  }

  return projectPoint(point, this.pairs[0].theta, this.pairs[0].b);
};

function projectPoint(point, theta, b) {
  return math.add(math.multiply(point, theta), b);
}
/**
 * Classify an unknown point. Uses a pairwise voting system in the event of multiclass classification.
 * @param {number[]} point - The data point to be classified.
 * @returns {number} Returns the predicted class. Class numbers range from 0 to (number_of_classes - 1).
 */


LDA.prototype.classify = function (point) {
  // In the event of a binary classifier, skip the voting process
  if (this.numberOfClasses == 2) {
    return projectPoint(point, this.pairs[0].theta, this.pairs[0].b) <= 0 ? 0 : 1;
  } // Start each class with 0 votes


  var votes = new Array(this.numberOfClasses);

  for (var i = 0; i < this.numberOfClasses; i++) {
    votes[i] = 0;
  } // Allow each pair to cast a vote


  for (var _i = 0; _i < this.pairs.length; _i++) {
    var params = this.pairs[_i];
    var projection = projectPoint(point, params.theta, params.b);

    if (projection <= 0) {
      votes[params.class1id]++;
    } else {
      votes[params.class2id]++;
    }
  } // Find the winning class


  var classificaion = 0;
  var maxVotes = votes[0];

  for (var _i2 = 1; _i2 < votes.length; _i2++) {
    if (votes[_i2] > maxVotes) {
      classificaion = _i2;
      maxVotes = votes[_i2];
    }
  }

  return classificaion;
};

module.exports = LDA;

},{"mathjs/core":47,"mathjs/lib/function/arithmetic":71,"mathjs/lib/function/matrix":98,"mathjs/lib/type/matrix":197,"pw-stat":236}],236:[function(require,module,exports){
"use strict";

/**
 * Returns the covariance matrix for a given matrix.
 * @param {number[][]} x - A matrix where rows are samples and columns are variables.
 */
function cov(x) {
  // Useful variables
  var N = x.length; // Step 1: Find expected value for each variable (columns are variables, rows are samples)

  var E = [];

  for (var c = 0; c < x[0].length; c++) {
    var u = 0;

    for (var r = 0; r < N; r++) {
      u += x[r][c];
    }

    E.push(u / N);
  } // Step 2: Center each variable at 0


  var centered = [];

  for (var _r = 0; _r < N; _r++) {
    centered.push([]);

    for (var _c = 0; _c < x[0].length; _c++) {
      centered[_r].push(x[_r][_c] - E[_c]);
    }
  } // Step 3: Calculate covariance between each possible combination of variables


  var S = [];

  for (var i = 0; i < x[0].length; i++) {
    S.push([]);
  }

  for (var c1 = 0; c1 < x[0].length; c1++) {
    // Doing c2 = c1; because, for example, cov(1,2) = cov(2, 1)
    // so no need to recalculate
    for (var c2 = c1; c2 < x[0].length; c2++) {
      // Solve cov(c1, c2) = average of elementwise products of each variable sample
      var _cov = 0;

      for (var _r2 = 0; _r2 < N; _r2++) {
        _cov += centered[_r2][c1] * centered[_r2][c2];
      }

      _cov /= N - 1; // N-1 for sample covariance, N for population. In this case, using sample covariance

      S[c1][c2] = _cov;
      S[c2][c1] = _cov; // Matrix is symmetric
    }
  }

  return S;
}
/**
 * Returns the mean of each column in the provided matrix.
 * @param {number[][]} x - Two-dimensional matrix.
 */


function mean(x) {
  var result = [];

  for (var c = 0; c < x[0].length; c++) {
    result.push(0);
  }

  for (var r = 0; r < x.length; r++) {
    for (var _c2 = 0; _c2 < x[r].length; _c2++) {
      result[_c2] += x[r][_c2];
    }
  }

  for (var _c3 = 0; _c3 < x[0].length; _c3++) {
    result[_c3] /= x.length;
  }

  return result;
}

exports.cov = cov;
exports.mean = mean;

},{}],237:[function(require,module,exports){
(function (global){
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var width = 256; // each RC4 output is 0 <= x < 256

var chunks = 6; // at least six RC4 outputs for each double

var digits = 52; // there are 52 significant digits in a double

var pool = []; // pool: entropy pool starts empty

var GLOBAL = typeof global === 'undefined' ? window : global; //
// The following constants are related to IEEE 754 limits.
//

var startdenom = Math.pow(width, chunks),
    significance = Math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1;
var oldRandom = Math.random; //
// seedrandom()
// This is the seedrandom function described above.
//

module.exports = function (seed, options) {
  if (options && options.global === true) {
    options.global = false;
    Math.random = module.exports(seed, options);
    options.global = true;
    return Math.random;
  }

  var use_entropy = options && options.entropy || false;
  var key = []; // Flatten the seed string or build one from local entropy if needed.

  var shortseed = mixkey(flatten(use_entropy ? [seed, tostring(pool)] : 0 in arguments ? seed : autoseed(), 3), key); // Use the seed to initialize an ARC4 generator.

  var arc4 = new ARC4(key); // Mix the randomness into accumulated entropy.

  mixkey(tostring(arc4.S), pool); // Override Math.random
  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.

  return function () {
    // Closure to return a random double:
    var n = arc4.g(chunks),
        // Start with a numerator n < 2 ^ 48
    d = startdenom,
        //   and denominator d = 2 ^ 48.
    x = 0; //   and no 'extra last byte'.

    while (n < significance) {
      // Fill up all significant digits by
      n = (n + x) * width; //   shifting numerator and

      d *= width; //   denominator and generating a

      x = arc4.g(1); //   new least-significant-byte.
    }

    while (n >= overflow) {
      // To avoid rounding up, before adding
      n /= 2; //   last byte, shift everything

      d /= 2; //   right using integer Math until

      x >>>= 1; //   we have exactly the desired bits.
    }

    return (n + x) / d; // Form the number within [0, 1).
  };
};

module.exports.resetGlobal = function () {
  Math.random = oldRandom;
}; //
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//

/** @constructor */


function ARC4(key) {
  var t,
      keylen = key.length,
      me = this,
      i = 0,
      j = me.i = me.j = 0,
      s = me.S = []; // The empty key [] is treated as [0].

  if (!keylen) {
    key = [keylen++];
  } // Set up S using the standard key scheduling algorithm.


  while (i < width) {
    s[i] = i++;
  }

  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
    s[j] = t;
  } // The "g" method returns the next (count) outputs as one number.


  (me.g = function (count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t,
        r = 0,
        i = me.i,
        j = me.j,
        s = me.S;

    while (count--) {
      t = s[i = mask & i + 1];
      r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];
    }

    me.i = i;
    me.j = j;
    return r; // For robust unpredictability discard an initial batch of values.
    // See http://www.rsa.com/rsalabs/node.asp?id=2009
  })(width);
} //
// flatten()
// Converts an object tree to nested arrays of strings.
//


function flatten(obj, depth) {
  var result = [],
      typ = _typeof(obj)[0],
      prop;

  if (depth && typ == 'o') {
    for (prop in obj) {
      try {
        result.push(flatten(obj[prop], depth - 1));
      } catch (e) {}
    }
  }

  return result.length ? result : typ == 's' ? obj : obj + '\0';
} //
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//


function mixkey(seed, key) {
  var stringseed = seed + '',
      smear,
      j = 0;

  while (j < stringseed.length) {
    key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
  }

  return tostring(key);
} //
// autoseed()
// Returns an object for autoseeding, using window.crypto if available.
//

/** @param {Uint8Array=} seed */


function autoseed(seed) {
  try {
    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
    return tostring(seed);
  } catch (e) {
    return [+new Date(), GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins, GLOBAL.screen, tostring(pool)];
  }
} //
// tostring()
// Converts an array of charcodes to a string
//


function tostring(a) {
  return String.fromCharCode.apply(0, a);
} //
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to intefere with determinstic PRNG state later,
// seedrandom will not call Math.random on its own again after
// initialization.
//


mixkey(Math.random(), pool);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],238:[function(require,module,exports){
"use strict";

function E() {// Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function on(name, callback, ctx) {
    var e = this.e || (this.e = {});
    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });
    return this;
  },
  once: function once(name, callback, ctx) {
    var self = this;

    function listener() {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    }

    ;
    listener._ = callback;
    return this.on(name, listener, ctx);
  },
  emit: function emit(name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },
  off: function off(name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
      }
    } // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910


    liveEvents.length ? e[name] = liveEvents : delete e[name];
    return this;
  }
};
module.exports = E;

},{}],239:[function(require,module,exports){
/**
 * typed-function
 *
 * Type checking for JavaScript functions
 *
 * https://github.com/josdejong/typed-function
 */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    // OldNode. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like OldNode.
    module.exports = factory();
  } else {
    // Browser globals (root is window)
    root.typed = factory();
  }
})(void 0, function () {
  // factory function to create a new instance of typed-function
  // TODO: allow passing configuration, types, tests via the factory function
  function create() {
    /**
     * Get a type test function for a specific data type
     * @param {string} name                   Name of a data type like 'number' or 'string'
     * @returns {Function(obj: *) : boolean}  Returns a type testing function.
     *                                        Throws an error for an unknown type.
     */
    function getTypeTest(name) {
      var test;

      for (var i = 0; i < typed.types.length; i++) {
        var entry = typed.types[i];

        if (entry.name === name) {
          test = entry.test;
          break;
        }
      }

      if (!test) {
        var hint;

        for (i = 0; i < typed.types.length; i++) {
          entry = typed.types[i];

          if (entry.name.toLowerCase() == name.toLowerCase()) {
            hint = entry.name;
            break;
          }
        }

        throw new Error('Unknown type "' + name + '"' + (hint ? '. Did you mean "' + hint + '"?' : ''));
      }

      return test;
    }
    /**
     * Retrieve the function name from a set of functions, and check
     * whether the name of all functions match (if given)
     * @param {Array.<function>} fns
     */


    function getName(fns) {
      var name = '';

      for (var i = 0; i < fns.length; i++) {
        var fn = fns[i]; // merge function name when this is a typed function

        if (fn.signatures && fn.name != '') {
          if (name == '') {
            name = fn.name;
          } else if (name != fn.name) {
            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
            err.data = {
              actual: fn.name,
              expected: name
            };
            throw err;
          }
        }
      }

      return name;
    }
    /**
     * Create an ArgumentsError. Creates messages like:
     *
     *   Unexpected type of argument (expected: ..., actual: ..., index: ...)
     *   Too few arguments (expected: ..., index: ...)
     *   Too many arguments (expected: ..., actual: ...)
     *
     * @param {String} fn         Function name
     * @param {number} argCount   Number of arguments
     * @param {Number} index      Current argument index
     * @param {*} actual          Current argument
     * @param {string} [expected] An optional, comma separated string with
     *                            expected types on given index
     * @extends Error
     */


    function createError(fn, argCount, index, actual, expected) {
      var actualType = getTypeOf(actual);

      var _expected = expected ? expected.split(',') : null;

      var _fn = fn || 'unnamed';

      var anyType = _expected && contains(_expected, 'any');

      var message;
      var data = {
        fn: fn,
        index: index,
        actual: actualType,
        expected: _expected
      };

      if (_expected) {
        if (argCount > index && !anyType) {
          // unexpected type
          message = 'Unexpected type of argument in function ' + _fn + ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';
        } else {
          // too few arguments
          message = 'Too few arguments in function ' + _fn + ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';
        }
      } else {
        // too many arguments
        message = 'Too many arguments in function ' + _fn + ' (expected: ' + index + ', actual: ' + argCount + ')';
      }

      var err = new TypeError(message);
      err.data = data;
      return err;
    }
    /**
     * Collection with function references (local shortcuts to functions)
     * @constructor
     * @param {string} [name='refs']  Optional name for the refs, used to generate
     *                                JavaScript code
     */


    function Refs(name) {
      this.name = name || 'refs';
      this.categories = {};
    }
    /**
     * Add a function reference.
     * @param {Function} fn
     * @param {string} [category='fn']    A function category, like 'fn' or 'signature'
     * @returns {string} Returns the function name, for example 'fn0' or 'signature2'
     */


    Refs.prototype.add = function (fn, category) {
      var cat = category || 'fn';
      if (!this.categories[cat]) this.categories[cat] = [];
      var index = this.categories[cat].indexOf(fn);

      if (index == -1) {
        index = this.categories[cat].length;
        this.categories[cat].push(fn);
      }

      return cat + index;
    };
    /**
     * Create code lines for all function references
     * @returns {string} Returns the code containing all function references
     */


    Refs.prototype.toCode = function () {
      var code = [];
      var path = this.name + '.categories';
      var categories = this.categories;

      for (var cat in categories) {
        if (categories.hasOwnProperty(cat)) {
          var category = categories[cat];

          for (var i = 0; i < category.length; i++) {
            code.push('var ' + cat + i + ' = ' + path + '[\'' + cat + '\'][' + i + '];');
          }
        }
      }

      return code.join('\n');
    };
    /**
     * A function parameter
     * @param {string | string[] | Param} types    A parameter type like 'string',
     *                                             'number | boolean'
     * @param {boolean} [varArgs=false]            Variable arguments if true
     * @constructor
     */


    function Param(types, varArgs) {
      // parse the types, can be a string with types separated by pipe characters |
      if (typeof types === 'string') {
        // parse variable arguments operator (ellipses '...number')
        var _types = types.trim();

        var _varArgs = _types.substr(0, 3) === '...';

        if (_varArgs) {
          _types = _types.substr(3);
        }

        if (_types === '') {
          this.types = ['any'];
        } else {
          this.types = _types.split('|');

          for (var i = 0; i < this.types.length; i++) {
            this.types[i] = this.types[i].trim();
          }
        }
      } else if (Array.isArray(types)) {
        this.types = types;
      } else if (types instanceof Param) {
        return types.clone();
      } else {
        throw new Error('String or Array expected');
      } // can hold a type to which to convert when handling this parameter


      this.conversions = []; // TODO: implement better API for conversions, be able to add conversions via constructor (support a new type Object?)
      // variable arguments

      this.varArgs = _varArgs || varArgs || false; // check for any type arguments

      this.anyType = this.types.indexOf('any') !== -1;
    }
    /**
     * Order Params
     * any type ('any') will be ordered last, and object as second last (as other
     * types may be an object as well, like Array).
     *
     * @param {Param} a
     * @param {Param} b
     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
     */


    Param.compare = function (a, b) {
      // TODO: simplify parameter comparison, it's a mess
      if (a.anyType) return 1;
      if (b.anyType) return -1;
      if (contains(a.types, 'Object')) return 1;
      if (contains(b.types, 'Object')) return -1;

      if (a.hasConversions()) {
        if (b.hasConversions()) {
          var i, ac, bc;

          for (i = 0; i < a.conversions.length; i++) {
            if (a.conversions[i] !== undefined) {
              ac = a.conversions[i];
              break;
            }
          }

          for (i = 0; i < b.conversions.length; i++) {
            if (b.conversions[i] !== undefined) {
              bc = b.conversions[i];
              break;
            }
          }

          return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);
        } else {
          return 1;
        }
      } else {
        if (b.hasConversions()) {
          return -1;
        } else {
          // both params have no conversions
          var ai, bi;

          for (i = 0; i < typed.types.length; i++) {
            if (typed.types[i].name === a.types[0]) {
              ai = i;
              break;
            }
          }

          for (i = 0; i < typed.types.length; i++) {
            if (typed.types[i].name === b.types[0]) {
              bi = i;
              break;
            }
          }

          return ai - bi;
        }
      }
    };
    /**
     * Test whether this parameters types overlap an other parameters types.
     * Will not match ['any'] with ['number']
     * @param {Param} other
     * @return {boolean} Returns true when there are overlapping types
     */


    Param.prototype.overlapping = function (other) {
      for (var i = 0; i < this.types.length; i++) {
        if (contains(other.types, this.types[i])) {
          return true;
        }
      }

      return false;
    };
    /**
     * Test whether this parameters types matches an other parameters types.
     * When any of the two parameters contains `any`, true is returned
     * @param {Param} other
     * @return {boolean} Returns true when there are matching types
     */


    Param.prototype.matches = function (other) {
      return this.anyType || other.anyType || this.overlapping(other);
    };
    /**
     * Create a clone of this param
     * @returns {Param} Returns a cloned version of this param
     */


    Param.prototype.clone = function () {
      var param = new Param(this.types.slice(), this.varArgs);
      param.conversions = this.conversions.slice();
      return param;
    };
    /**
     * Test whether this parameter contains conversions
     * @returns {boolean} Returns true if the parameter contains one or
     *                    multiple conversions.
     */


    Param.prototype.hasConversions = function () {
      return this.conversions.length > 0;
    };
    /**
     * Tests whether this parameters contains any of the provided types
     * @param {Object} types  A Map with types, like {'number': true}
     * @returns {boolean}     Returns true when the parameter contains any
     *                        of the provided types
     */


    Param.prototype.contains = function (types) {
      for (var i = 0; i < this.types.length; i++) {
        if (types[this.types[i]]) {
          return true;
        }
      }

      return false;
    };
    /**
     * Return a string representation of this params types, like 'string' or
     * 'number | boolean' or '...number'
     * @param {boolean} [toConversion]   If true, the returned types string
     *                                   contains the types where the parameter
     *                                   will convert to. If false (default)
     *                                   the "from" types are returned
     * @returns {string}
     */


    Param.prototype.toString = function (toConversion) {
      var types = [];
      var keys = {};

      for (var i = 0; i < this.types.length; i++) {
        var conversion = this.conversions[i];
        var type = toConversion && conversion ? conversion.to : this.types[i];

        if (!(type in keys)) {
          keys[type] = true;
          types.push(type);
        }
      }

      return (this.varArgs ? '...' : '') + types.join('|');
    };
    /**
     * A function signature
     * @param {string | string[] | Param[]} params
     *                         Array with the type(s) of each parameter,
     *                         or a comma separated string with types
     * @param {Function} fn    The actual function
     * @constructor
     */


    function Signature(params, fn) {
      var _params;

      if (typeof params === 'string') {
        _params = params !== '' ? params.split(',') : [];
      } else if (Array.isArray(params)) {
        _params = params;
      } else {
        throw new Error('string or Array expected');
      }

      this.params = new Array(_params.length);
      this.anyType = false;
      this.varArgs = false;

      for (var i = 0; i < _params.length; i++) {
        var param = new Param(_params[i]);
        this.params[i] = param;

        if (param.anyType) {
          this.anyType = true;
        }

        if (i === _params.length - 1) {
          // the last argument
          this.varArgs = param.varArgs;
        } else {
          // non-last argument
          if (param.varArgs) {
            throw new SyntaxError('Unexpected variable arguments operator "..."');
          }
        }
      }

      this.fn = fn;
    }
    /**
     * Create a clone of this signature
     * @returns {Signature} Returns a cloned version of this signature
     */


    Signature.prototype.clone = function () {
      return new Signature(this.params.slice(), this.fn);
    };
    /**
     * Expand a signature: split params with union types in separate signatures
     * For example split a Signature "string | number" into two signatures.
     * @return {Signature[]} Returns an array with signatures (at least one)
     */


    Signature.prototype.expand = function () {
      var signatures = [];

      function recurse(signature, path) {
        if (path.length < signature.params.length) {
          var i, newParam, conversion;
          var param = signature.params[path.length];

          if (param.varArgs) {
            // a variable argument. do not split the types in the parameter
            newParam = param.clone(); // add conversions to the parameter
            // recurse for all conversions

            for (i = 0; i < typed.conversions.length; i++) {
              conversion = typed.conversions[i];

              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
                var j = newParam.types.length;
                newParam.types[j] = conversion.from;
                newParam.conversions[j] = conversion;
              }
            }

            recurse(signature, path.concat(newParam));
          } else {
            // split each type in the parameter
            for (i = 0; i < param.types.length; i++) {
              recurse(signature, path.concat(new Param(param.types[i])));
            } // recurse for all conversions


            for (i = 0; i < typed.conversions.length; i++) {
              conversion = typed.conversions[i];

              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
                newParam = new Param(conversion.from);
                newParam.conversions[0] = conversion;
                recurse(signature, path.concat(newParam));
              }
            }
          }
        } else {
          signatures.push(new Signature(path, signature.fn));
        }
      }

      recurse(this, []);
      return signatures;
    };
    /**
     * Compare two signatures.
     *
     * When two params are equal and contain conversions, they will be sorted
     * by lowest index of the first conversions.
     *
     * @param {Signature} a
     * @param {Signature} b
     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
     */


    Signature.compare = function (a, b) {
      if (a.params.length > b.params.length) return 1;
      if (a.params.length < b.params.length) return -1; // count the number of conversions

      var i;
      var len = a.params.length; // a and b have equal amount of params

      var ac = 0;
      var bc = 0;

      for (i = 0; i < len; i++) {
        if (a.params[i].hasConversions()) ac++;
        if (b.params[i].hasConversions()) bc++;
      }

      if (ac > bc) return 1;
      if (ac < bc) return -1; // compare the order per parameter

      for (i = 0; i < a.params.length; i++) {
        var cmp = Param.compare(a.params[i], b.params[i]);

        if (cmp !== 0) {
          return cmp;
        }
      }

      return 0;
    };
    /**
     * Test whether any of the signatures parameters has conversions
     * @return {boolean} Returns true when any of the parameters contains
     *                   conversions.
     */


    Signature.prototype.hasConversions = function () {
      for (var i = 0; i < this.params.length; i++) {
        if (this.params[i].hasConversions()) {
          return true;
        }
      }

      return false;
    };
    /**
     * Test whether this signature should be ignored.
     * Checks whether any of the parameters contains a type listed in
     * typed.ignore
     * @return {boolean} Returns true when the signature should be ignored
     */


    Signature.prototype.ignore = function () {
      // create a map with ignored types
      var types = {};

      for (var i = 0; i < typed.ignore.length; i++) {
        types[typed.ignore[i]] = true;
      } // test whether any of the parameters contains this type


      for (i = 0; i < this.params.length; i++) {
        if (this.params[i].contains(types)) {
          return true;
        }
      }

      return false;
    };
    /**
     * Test whether the path of this signature matches a given path.
     * @param {Param[]} params
     */


    Signature.prototype.paramsStartWith = function (params) {
      if (params.length === 0) {
        return true;
      }

      var aLast = last(this.params);
      var bLast = last(params);

      for (var i = 0; i < params.length; i++) {
        var a = this.params[i] || (aLast.varArgs ? aLast : null);
        var b = params[i] || (bLast.varArgs ? bLast : null);

        if (!a || !b || !a.matches(b)) {
          return false;
        }
      }

      return true;
    };
    /**
     * Generate the code to invoke this signature
     * @param {Refs} refs
     * @param {string} prefix
     * @returns {string} Returns code
     */


    Signature.prototype.toCode = function (refs, prefix) {
      var code = [];
      var args = new Array(this.params.length);

      for (var i = 0; i < this.params.length; i++) {
        var param = this.params[i];
        var conversion = param.conversions[0];

        if (param.varArgs) {
          args[i] = 'varArgs';
        } else if (conversion) {
          args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';
        } else {
          args[i] = 'arg' + i;
        }
      }

      var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;

      if (ref) {
        return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');
      }

      return code.join('\n');
    };
    /**
     * Return a string representation of the signature
     * @returns {string}
     */


    Signature.prototype.toString = function () {
      return this.params.join(', ');
    };
    /**
     * A group of signatures with the same parameter on given index
     * @param {Param[]} path
     * @param {Signature} [signature]
     * @param {Node[]} childs
     * @param {boolean} [fallThrough=false]
     * @constructor
     */


    function Node(path, signature, childs, fallThrough) {
      this.path = path || [];
      this.param = path[path.length - 1] || null;
      this.signature = signature || null;
      this.childs = childs || [];
      this.fallThrough = fallThrough || false;
    }
    /**
     * Generate code for this group of signatures
     * @param {Refs} refs
     * @param {string} prefix
     * @returns {string} Returns the code as string
     */


    Node.prototype.toCode = function (refs, prefix) {
      // TODO: split this function in multiple functions, it's too large
      var code = [];

      if (this.param) {
        var index = this.path.length - 1;
        var conversion = this.param.conversions[0];
        var comment = '// type: ' + (conversion ? conversion.from + ' (convert to ' + conversion.to + ')' : this.param); // non-root node (path is non-empty)

        if (this.param.varArgs) {
          if (this.param.anyType) {
            // variable arguments with any type
            code.push(prefix + 'if (arguments.length > ' + index + ') {');
            code.push(prefix + '  var varArgs = [];');
            code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');
            code.push(prefix + '    varArgs.push(arguments[i]);');
            code.push(prefix + '  }');
            code.push(this.signature.toCode(refs, prefix + '  '));
            code.push(prefix + '}');
          } else {
            // variable arguments with a fixed type
            var getTests = function (types, arg) {
              var tests = [];

              for (var i = 0; i < types.length; i++) {
                tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';
              }

              return tests.join(' || ');
            }.bind(this);

            var allTypes = this.param.types;
            var exactTypes = [];

            for (var i = 0; i < allTypes.length; i++) {
              if (this.param.conversions[i] === undefined) {
                exactTypes.push(allTypes[i]);
              }
            }

            code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);
            code.push(prefix + '  var varArgs = [arg' + index + '];');
            code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');
            code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');
            code.push(prefix + '      varArgs.push(arguments[i]);');

            for (var i = 0; i < allTypes.length; i++) {
              var conversion_i = this.param.conversions[i];

              if (conversion_i) {
                var test = refs.add(getTypeTest(allTypes[i]), 'test');
                var convert = refs.add(conversion_i.convert, 'convert');
                code.push(prefix + '    }');
                code.push(prefix + '    else if (' + test + '(arguments[i])) {');
                code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');
              }
            }

            code.push(prefix + '    } else {');
            code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \'' + exactTypes.join(',') + '\');');
            code.push(prefix + '    }');
            code.push(prefix + '  }');
            code.push(this.signature.toCode(refs, prefix + '  '));
            code.push(prefix + '}');
          }
        } else {
          if (this.param.anyType) {
            // any type
            code.push(prefix + '// type: any');
            code.push(this._innerCode(refs, prefix));
          } else {
            // regular type
            var type = this.param.types[0];
            var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;
            code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);
            code.push(this._innerCode(refs, prefix + '  '));
            code.push(prefix + '}');
          }
        }
      } else {
        // root node (path is empty)
        code.push(this._innerCode(refs, prefix));
      }

      return code.join('\n');
    };
    /**
     * Generate inner code for this group of signatures.
     * This is a helper function of Node.prototype.toCode
     * @param {Refs} refs
     * @param {string} prefix
     * @returns {string} Returns the inner code as string
     * @private
     */


    Node.prototype._innerCode = function (refs, prefix) {
      var code = [];
      var i;

      if (this.signature) {
        code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');
        code.push(this.signature.toCode(refs, prefix + '  '));
        code.push(prefix + '}');
      }

      for (i = 0; i < this.childs.length; i++) {
        code.push(this.childs[i].toCode(refs, prefix));
      } // TODO: shouldn't the this.param.anyType check be redundant


      if (!this.fallThrough || this.param && this.param.anyType) {
        var exceptions = this._exceptions(refs, prefix);

        if (exceptions) {
          code.push(exceptions);
        }
      }

      return code.join('\n');
    };
    /**
     * Generate code to throw exceptions
     * @param {Refs} refs
     * @param {string} prefix
     * @returns {string} Returns the inner code as string
     * @private
     */


    Node.prototype._exceptions = function (refs, prefix) {
      var index = this.path.length;

      if (this.childs.length === 0) {
        // TODO: can this condition be simplified? (we have a fall-through here)
        return [prefix + 'if (arguments.length > ' + index + ') {', prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);', prefix + '}'].join('\n');
      } else {
        var keys = {};
        var types = [];

        for (var i = 0; i < this.childs.length; i++) {
          var node = this.childs[i];

          if (node.param) {
            for (var j = 0; j < node.param.types.length; j++) {
              var type = node.param.types[j];

              if (!(type in keys) && !node.param.conversions[j]) {
                keys[type] = true;
                types.push(type);
              }
            }
          }
        }

        return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \'' + types.join(',') + '\');';
      }
    };
    /**
     * Split all raw signatures into an array with expanded Signatures
     * @param {Object.<string, Function>} rawSignatures
     * @return {Signature[]} Returns an array with expanded signatures
     */


    function parseSignatures(rawSignatures) {
      // FIXME: need to have deterministic ordering of signatures, do not create via object
      var signature;
      var keys = {};
      var signatures = [];
      var i;

      for (var types in rawSignatures) {
        if (rawSignatures.hasOwnProperty(types)) {
          var fn = rawSignatures[types];
          signature = new Signature(types, fn);

          if (signature.ignore()) {
            continue;
          }

          var expanded = signature.expand();

          for (i = 0; i < expanded.length; i++) {
            var signature_i = expanded[i];
            var key = signature_i.toString();
            var existing = keys[key];

            if (!existing) {
              keys[key] = signature_i;
            } else {
              var cmp = Signature.compare(signature_i, existing);

              if (cmp < 0) {
                // override if sorted first
                keys[key] = signature_i;
              } else if (cmp === 0) {
                throw new Error('Signature "' + key + '" is defined twice');
              } // else: just ignore

            }
          }
        }
      } // convert from map to array


      for (key in keys) {
        if (keys.hasOwnProperty(key)) {
          signatures.push(keys[key]);
        }
      } // order the signatures


      signatures.sort(function (a, b) {
        return Signature.compare(a, b);
      }); // filter redundant conversions from signatures with varArgs
      // TODO: simplify this loop or move it to a separate function

      for (i = 0; i < signatures.length; i++) {
        signature = signatures[i];

        if (signature.varArgs) {
          var index = signature.params.length - 1;
          var param = signature.params[index];
          var t = 0;

          while (t < param.types.length) {
            if (param.conversions[t]) {
              var type = param.types[t];

              for (var j = 0; j < signatures.length; j++) {
                var other = signatures[j];
                var p = other.params[index];

                if (other !== signature && p && contains(p.types, type) && !p.conversions[index]) {
                  // this (conversion) type already exists, remove it
                  param.types.splice(t, 1);
                  param.conversions.splice(t, 1);
                  t--;
                  break;
                }
              }
            }

            t++;
          }
        }
      }

      return signatures;
    }
    /**
     * Filter all any type signatures
     * @param {Signature[]} signatures
     * @return {Signature[]} Returns only any type signatures
     */


    function filterAnyTypeSignatures(signatures) {
      var filtered = [];

      for (var i = 0; i < signatures.length; i++) {
        if (signatures[i].anyType) {
          filtered.push(signatures[i]);
        }
      }

      return filtered;
    }
    /**
     * create a map with normalized signatures as key and the function as value
     * @param {Signature[]} signatures   An array with split signatures
     * @return {Object.<string, Function>} Returns a map with normalized
     *                                     signatures as key, and the function
     *                                     as value.
     */


    function mapSignatures(signatures) {
      var normalized = {};

      for (var i = 0; i < signatures.length; i++) {
        var signature = signatures[i];

        if (signature.fn && !signature.hasConversions()) {
          var params = signature.params.join(',');
          normalized[params] = signature.fn;
        }
      }

      return normalized;
    }
    /**
     * Parse signatures recursively in a node tree.
     * @param {Signature[]} signatures  Array with expanded signatures
     * @param {Param[]} path            Traversed path of parameter types
     * @param {Signature[]} anys
     * @return {Node}                   Returns a node tree
     */


    function parseTree(signatures, path, anys) {
      var i, signature;
      var index = path.length;
      var nodeSignature;
      var filtered = [];

      for (i = 0; i < signatures.length; i++) {
        signature = signatures[i]; // filter the first signature with the correct number of params

        if (signature.params.length === index && !nodeSignature) {
          nodeSignature = signature;
        }

        if (signature.params[index] != undefined) {
          filtered.push(signature);
        }
      } // sort the filtered signatures by param


      filtered.sort(function (a, b) {
        return Param.compare(a.params[index], b.params[index]);
      }); // recurse over the signatures

      var entries = [];

      for (i = 0; i < filtered.length; i++) {
        signature = filtered[i]; // group signatures with the same param at current index

        var param = signature.params[index]; // TODO: replace the next filter loop

        var existing = entries.filter(function (entry) {
          return entry.param.overlapping(param);
        })[0]; //var existing;
        //for (var j = 0; j < entries.length; j++) {
        //  if (entries[j].param.overlapping(param)) {
        //    existing = entries[j];
        //    break;
        //  }
        //}

        if (existing) {
          if (existing.param.varArgs) {
            throw new Error('Conflicting types "' + existing.param + '" and "' + param + '"');
          }

          existing.signatures.push(signature);
        } else {
          entries.push({
            param: param,
            signatures: [signature]
          });
        }
      } // find all any type signature that can still match our current path


      var matchingAnys = [];

      for (i = 0; i < anys.length; i++) {
        if (anys[i].paramsStartWith(path)) {
          matchingAnys.push(anys[i]);
        }
      } // see if there are any type signatures that don't match any of the
      // signatures that we have in our tree, i.e. we have alternative
      // matching signature(s) outside of our current tree and we should
      // fall through to them instead of throwing an exception


      var fallThrough = false;

      for (i = 0; i < matchingAnys.length; i++) {
        if (!contains(signatures, matchingAnys[i])) {
          fallThrough = true;
          break;
        }
      } // parse the childs


      var childs = new Array(entries.length);

      for (i = 0; i < entries.length; i++) {
        var entry = entries[i];
        childs[i] = parseTree(entry.signatures, path.concat(entry.param), matchingAnys);
      }

      return new Node(path, nodeSignature, childs, fallThrough);
    }
    /**
     * Generate an array like ['arg0', 'arg1', 'arg2']
     * @param {number} count Number of arguments to generate
     * @returns {Array} Returns an array with argument names
     */


    function getArgs(count) {
      // create an array with all argument names
      var args = [];

      for (var i = 0; i < count; i++) {
        args[i] = 'arg' + i;
      }

      return args;
    }
    /**
     * Compose a function from sub-functions each handling a single type signature.
     * Signatures:
     *   typed(signature: string, fn: function)
     *   typed(name: string, signature: string, fn: function)
     *   typed(signatures: Object.<string, function>)
     *   typed(name: string, signatures: Object.<string, function>)
     *
     * @param {string | null} name
     * @param {Object.<string, Function>} signatures
     * @return {Function} Returns the typed function
     * @private
     */


    function _typed(name, signatures) {
      var refs = new Refs(); // parse signatures, expand them

      var _signatures = parseSignatures(signatures);

      if (_signatures.length == 0) {
        throw new Error('No signatures provided');
      } // filter all any type signatures


      var anys = filterAnyTypeSignatures(_signatures); // parse signatures into a node tree

      var node = parseTree(_signatures, [], anys); //var util = require('util');
      //console.log('ROOT');
      //console.log(util.inspect(node, { depth: null }));
      // generate code for the typed function
      // safeName is a conservative replacement of characters 
      // to prevend being able to inject JS code at the place of the function name 
      // the name is useful for stack trackes therefore we want have it there

      var code = [];
      var safeName = (name || '').replace(/[^a-zA-Z0-9_$]/g, '_');
      var args = getArgs(maxParams(_signatures));
      code.push('function ' + safeName + '(' + args.join(', ') + ') {');
      code.push('  "use strict";');
      code.push('  var name = ' + JSON.stringify(name || '') + ';');
      code.push(node.toCode(refs, '  ', false));
      code.push('}'); // generate body for the factory function

      var body = [refs.toCode(), 'return ' + code.join('\n')].join('\n'); // evaluate the JavaScript code and attach function references

      var factory = new Function(refs.name, 'createError', body);
      var fn = factory(refs, createError); //console.log('FN\n' + fn.toString()); // TODO: cleanup
      // attach the signatures with sub-functions to the constructed function

      fn.signatures = mapSignatures(_signatures);
      return fn;
    }
    /**
     * Calculate the maximum number of parameters in givens signatures
     * @param {Signature[]} signatures
     * @returns {number} The maximum number of parameters
     */


    function maxParams(signatures) {
      var max = 0;

      for (var i = 0; i < signatures.length; i++) {
        var len = signatures[i].params.length;

        if (len > max) {
          max = len;
        }
      }

      return max;
    }
    /**
     * Get the type of a value
     * @param {*} x
     * @returns {string} Returns a string with the type of value
     */


    function getTypeOf(x) {
      var obj;

      for (var i = 0; i < typed.types.length; i++) {
        var entry = typed.types[i];

        if (entry.name === 'Object') {
          // Array and Date are also Object, so test for Object afterwards
          obj = entry;
        } else {
          if (entry.test(x)) return entry.name;
        }
      } // at last, test whether an object


      if (obj && obj.test(x)) return obj.name;
      return 'unknown';
    }
    /**
     * Test whether an array contains some item
     * @param {Array} array
     * @param {*} item
     * @return {boolean} Returns true if array contains item, false if not.
     */


    function contains(array, item) {
      return array.indexOf(item) !== -1;
    }
    /**
     * Returns the last item in the array
     * @param {Array} array
     * @return {*} item
     */


    function last(array) {
      return array[array.length - 1];
    } // data type tests


    var types = [{
      name: 'number',
      test: function test(x) {
        return typeof x === 'number';
      }
    }, {
      name: 'string',
      test: function test(x) {
        return typeof x === 'string';
      }
    }, {
      name: 'boolean',
      test: function test(x) {
        return typeof x === 'boolean';
      }
    }, {
      name: 'Function',
      test: function test(x) {
        return typeof x === 'function';
      }
    }, {
      name: 'Array',
      test: Array.isArray
    }, {
      name: 'Date',
      test: function test(x) {
        return x instanceof Date;
      }
    }, {
      name: 'RegExp',
      test: function test(x) {
        return x instanceof RegExp;
      }
    }, {
      name: 'Object',
      test: function test(x) {
        return _typeof(x) === 'object';
      }
    }, {
      name: 'null',
      test: function test(x) {
        return x === null;
      }
    }, {
      name: 'undefined',
      test: function test(x) {
        return x === undefined;
      }
    }]; // configuration

    var config = {}; // type conversions. Order is important

    var conversions = []; // types to be ignored

    var ignore = []; // temporary object for holding types and conversions, for constructing
    // the `typed` function itself
    // TODO: find a more elegant solution for this

    var typed = {
      config: config,
      types: types,
      conversions: conversions,
      ignore: ignore
    };
    /**
     * Construct the typed function itself with various signatures
     *
     * Signatures:
     *
     *   typed(signatures: Object.<string, function>)
     *   typed(name: string, signatures: Object.<string, function>)
     */

    typed = _typed('typed', {
      'Object': function Object(signatures) {
        var fns = [];

        for (var signature in signatures) {
          if (signatures.hasOwnProperty(signature)) {
            fns.push(signatures[signature]);
          }
        }

        var name = getName(fns);
        return _typed(name, signatures);
      },
      'string, Object': _typed,
      // TODO: add a signature 'Array.<function>'
      '...Function': function Function(fns) {
        var err;
        var name = getName(fns);
        var signatures = {};

        for (var i = 0; i < fns.length; i++) {
          var fn = fns[i]; // test whether this is a typed-function

          if (!(_typeof(fn.signatures) === 'object')) {
            err = new TypeError('Function is no typed-function (index: ' + i + ')');
            err.data = {
              index: i
            };
            throw err;
          } // merge the signatures


          for (var signature in fn.signatures) {
            if (fn.signatures.hasOwnProperty(signature)) {
              if (signatures.hasOwnProperty(signature)) {
                if (fn.signatures[signature] !== signatures[signature]) {
                  err = new Error('Signature "' + signature + '" is defined twice');
                  err.data = {
                    signature: signature
                  };
                  throw err;
                } // else: both signatures point to the same function, that's fine

              } else {
                signatures[signature] = fn.signatures[signature];
              }
            }
          }
        }

        return _typed(name, signatures);
      }
    });
    /**
     * Find a specific signature from a (composed) typed function, for
     * example:
     *
     *   typed.find(fn, ['number', 'string'])
     *   typed.find(fn, 'number, string')
     *
     * Function find only only works for exact matches.
     *
     * @param {Function} fn                   A typed-function
     * @param {string | string[]} signature   Signature to be found, can be
     *                                        an array or a comma separated string.
     * @return {Function}                     Returns the matching signature, or
     *                                        throws an errror when no signature
     *                                        is found.
     */

    function find(fn, signature) {
      if (!fn.signatures) {
        throw new TypeError('Function is no typed-function');
      } // normalize input


      var arr;

      if (typeof signature === 'string') {
        arr = signature.split(',');

        for (var i = 0; i < arr.length; i++) {
          arr[i] = arr[i].trim();
        }
      } else if (Array.isArray(signature)) {
        arr = signature;
      } else {
        throw new TypeError('String array or a comma separated string expected');
      }

      var str = arr.join(','); // find an exact match

      var match = fn.signatures[str];

      if (match) {
        return match;
      } // TODO: extend find to match non-exact signatures


      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
    }
    /**
     * Convert a given value to another data type.
     * @param {*} value
     * @param {string} type
     */


    function convert(value, type) {
      var from = getTypeOf(value); // check conversion is needed

      if (type === from) {
        return value;
      }

      for (var i = 0; i < typed.conversions.length; i++) {
        var conversion = typed.conversions[i];

        if (conversion.from === from && conversion.to === type) {
          return conversion.convert(value);
        }
      }

      throw new Error('Cannot convert from ' + from + ' to ' + type);
    } // attach types and conversions to the final `typed` function


    typed.config = config;
    typed.types = types;
    typed.conversions = conversions;
    typed.ignore = ignore;
    typed.create = create;
    typed.find = find;
    typed.convert = convert; // add a type

    typed.addType = function (type) {
      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
        throw new TypeError('Object with properties {name: string, test: function} expected');
      }

      typed.types.push(type);
    }; // add a conversion


    typed.addConversion = function (conversion) {
      if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {
        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
      }

      typed.conversions.push(conversion);
    };

    return typed;
  }

  return create();
});

},{}],240:[function(require,module,exports){
"use strict";

module.exports = [[0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489], [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2], [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603], [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670], [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED], [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A], [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902], [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D], [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981], [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD], [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C], [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D], [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC], [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD], [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C], [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D], [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0], [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48], [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC], [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD], [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D], [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6], [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E], [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC], [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35], [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E], [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97], [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030], [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039], [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F], [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753], [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD], [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD], [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922], [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B], [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34], [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42], [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF], [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063], [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F], [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B], [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F], [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB], [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F], [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169], [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD], [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F], [0xE0100, 0xE01EF]];

},{}],241:[function(require,module,exports){
"use strict";

var defaults = require('defaults');

var combining = require('./combining');

var DEFAULTS = {
  nul: 0,
  control: 0
};

module.exports = function wcwidth(str) {
  return wcswidth(str, DEFAULTS);
};

module.exports.config = function (opts) {
  opts = defaults(opts || {}, DEFAULTS);
  return function wcwidth(str) {
    return wcswidth(str, opts);
  };
};
/*
 *  The following functions define the column width of an ISO 10646
 *  character as follows:
 *  - The null character (U+0000) has a column width of 0.
 *  - Other C0/C1 control characters and DEL will lead to a return value
 *    of -1.
 *  - Non-spacing and enclosing combining characters (general category
 *    code Mn or Me in the
 *    Unicode database) have a column width of 0.
 *  - SOFT HYPHEN (U+00AD) has a column width of 1.
 *  - Other format characters (general category code Cf in the Unicode
 *    database) and ZERO WIDTH
 *    SPACE (U+200B) have a column width of 0.
 *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)
 *    have a column width of 0.
 *  - Spacing characters in the East Asian Wide (W) or East Asian
 *    Full-width (F) category as
 *    defined in Unicode Technical Report #11 have a column width of 2.
 *  - All remaining characters (including all printable ISO 8859-1 and
 *    WGL4 characters, Unicode control characters, etc.) have a column
 *    width of 1.
 *  This implementation assumes that characters are encoded in ISO 10646.
*/


function wcswidth(str, opts) {
  if (typeof str !== 'string') return wcwidth(str, opts);
  var s = 0;

  for (var i = 0; i < str.length; i++) {
    var n = wcwidth(str.charCodeAt(i), opts);
    if (n < 0) return -1;
    s += n;
  }

  return s;
}

function wcwidth(ucs, opts) {
  // test for 8-bit control characters
  if (ucs === 0) return opts.nul;
  if (ucs < 32 || ucs >= 0x7f && ucs < 0xa0) return opts.control; // binary search in table of non-spacing characters

  if (bisearch(ucs)) return 0; // if we arrive here, ucs is not a combining or C0/C1 control character

  return 1 + (ucs >= 0x1100 && (ucs <= 0x115f || // Hangul Jamo init. consonants
  ucs == 0x2329 || ucs == 0x232a || ucs >= 0x2e80 && ucs <= 0xa4cf && ucs != 0x303f || // CJK ... Yi
  ucs >= 0xac00 && ucs <= 0xd7a3 || // Hangul Syllables
  ucs >= 0xf900 && ucs <= 0xfaff || // CJK Compatibility Ideographs
  ucs >= 0xfe10 && ucs <= 0xfe19 || // Vertical forms
  ucs >= 0xfe30 && ucs <= 0xfe6f || // CJK Compatibility Forms
  ucs >= 0xff00 && ucs <= 0xff60 || // Fullwidth Forms
  ucs >= 0xffe0 && ucs <= 0xffe6 || ucs >= 0x20000 && ucs <= 0x2fffd || ucs >= 0x30000 && ucs <= 0x3fffd));
}

function bisearch(ucs) {
  var min = 0;
  var max = combining.length - 1;
  var mid;
  if (ucs < combining[0][0] || ucs > combining[max][1]) return false;

  while (max >= min) {
    mid = Math.floor((min + max) / 2);
    if (ucs > combining[mid][1]) min = mid + 1;else if (ucs < combining[mid][0]) max = mid - 1;else return true;
  }

  return false;
}

},{"./combining":240,"defaults":41}]},{},[1])(1)
});
