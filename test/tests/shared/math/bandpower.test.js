describe('periodogram', function(){
    it('Estimates the power spectral density of a signal', function(){
        let x = [0.67913554086574768,0.39551521566859305,0.36743664854447655,0.98798200316163276,0.037738866239552138,0.88516800820247532,0.913286827639239,0.796183873585212,0.0987122786555743,0.26187118387071606,0.33535683996279653,0.679727951377338,0.13655313735536967,0.72122749858174018,0.10676186160724144,0.65375734866855961,0.49417393663927012,0.77905172323127514,0.71503707840069408,0.90372056055631633,0.89092250433078923,0.33416305273749625,0.69874583233479448,0.19780982668592917,0.030540946304636662,0.74407426036746238,0.50002243559020088,0.47992214114606047,0.90472223806736274,0.60986664842255844,0.61766638958845466,0.85944230564621227,0.80548942452968564,0.5767215156146851,0.18292246941491397,0.23993201056871738,0.88651193307610132,0.028674152464106095,0.48990138851222387,0.16792714568225675,0.97868064964115875,0.71269447167891409,0.500471624154843,0.4710883745419393,0.05961886757963919,0.68197190414906317,0.042431137500741678,0.071445464600642383,0.5216498424642837,0.096730025780866979,0.81814855385962471,0.81754709207928633,0.7224395923668423,0.14986544247796685,0.65960525290830718,0.51859494251053817,0.97297455476386252,0.64899149271235612,0.80033057535240149,0.45379770872691949,0.43239150378346169,0.82531379540204564,0.083469814858914027,0.13317100760716172,0.17338861311900555,0.39093780232373554,0.83137974283906957,0.80336439160244022,0.060471179169893641,0.3992577706135757,0.52687583050829589,0.41679946793078693,0.65685989097370723,0.62797335919010422,0.29198407996171494,0.43165117024872024,0.01548712563601895,0.98406372437915379,0.16716840991465598,0.10621634492866383,0.37240974005553695,0.19811840254297464,0.48968763801602389,0.33949341339075767,0.951630464777727,0.92033203983656375,0.052676997680792592,0.73785809551699655,0.26911942639855591,0.42283561500880784,0.54787090121484472,0.94273698427693431,0.4177441043166622,0.98305246646985611,0.30145494871206546,0.7010987559009263,0.66633885158442563,0.53912646504285666,0.69810552018030836,0.66652791340258688,0.17813245440033776,0.12801439972017259,0.99908039476136068,0.17112106635643209,0.032600820530528041,0.56119979270966014,0.88186650045180992,0.66917530453439378,0.19043326717995412,0.3689165460638949,0.46072593726041156,0.98163795097074968,0.15640495222656348,0.85552280584591134,0.644764536870088,0.37627221027883162,0.19092369523630304,0.428252992979386,0.4820220610318563,0.1206116132971623,0.589507484695059,0.22618767975267573,0.38461912436941081,0.58298638274767389,0.25180612247231282,0.29044066427697934,0.61709088439322335,0.26528090981002939,0.824376266688835,0.98266339972195027,0.73024879226759765,0.34387700411498312,0.584069333278452,0.10776901524374305,0.90630815064973291,0.87965372448190482,0.81776055937064185,0.26072799905546462,0.59435625066433084,0.022512592740231763,0.42525932021413493,0.31271888682061555,0.16148474431174997,0.17876618675236822,0.42288568910008451,0.094229338887734659,0.59852366875674112,0.470924256358334,0.69594931330160792,0.69988784992829156,0.63853075827183792,0.033603836066429471,0.068806099118051245,0.31959973518049611,0.5308642806941265,0.65444570775706634,0.40761919704115257,0.81998122278194063,0.71835894320588367,0.96864933023109367,0.53133390656567447,0.32514568182056003,0.10562920332902193,0.61095865874620059,0.77880224182409252,0.42345291896273829,0.090823285787439478,0.2664714907790724,0.15365671759130661,0.2810053025338709,0.44008513900172086,0.52714274176065223,0.457424365687674,0.8753715986041849,0.51805210836110416,0.94362262454838786,0.637709098072174,0.95769393984158324,0.24070703548016026,0.67612230386375183,0.28906457167447674,0.67180816541421517,0.69514049955173718,0.067992768470010567,0.25479015659700532,0.22404003082421875,0.66783272701371654,0.84439215652720456,0.34446241130104216,0.78051965273135793,0.67533206574699955,0.0067153143184774944,0.60217048758179526,0.38677119452098463,0.9159912441314253,0.0011510571291072358,0.46244915924232866,0.4243490398153752,0.460916366028964,0.77015972860860926,0.32247180718677859,0.78473929476074156,0.4713571537106116,0.035762733269117941,0.1758744156835309,0.72175803339110245,0.47348599296532035,0.15272120043823179,0.3411246070491093,0.60738921376834742,0.19174525546179777,0.73842683997694158,0.2428495983181691,0.91742434204938239,0.26906158668601832,0.76550001662143841,0.188661976791491,0.28749817306613124,0.091113463686534946,0.576209380663007,0.683363243294653,0.54659311459032278,0.42572884187118787,0.64444278143133649,0.64761763017268437,0.679016754093202,0.63578671051408364,0.94517411310940136,0.20893492242602285,0.7092817027105448,0.23623057699379657,0.11939624779730551,0.60730394068563465,0.450137696965896,0.45872549364886783,0.66194475190565194,0.77028551480366014,0.35021801344110504,0.66200959835913453,0.41615858996979649,0.841929152691309,0.83291681907521575,0.25644099222914729,0.61346073681287527,0.58224916452722708,0.54073933712440969,0.86994103235800735,0.26477902647563,0.31807407548105915,0.11921454105419116,0.93982947034492059,0.64555187497252353,0.47946322494888782,0.63931696104010838,0.54471611052676283,0.64731148029312768];
        let sample_rate = 256;

        // Assert comparison threshold
        let threshold = 0.00000000001;

        // Check output values (default window is Hann)
        let bands = ['delta', 'theta', 'alpha', 'beta', 'gamma'];
        let powers = bands.map(band => bci.bandpower(x, sample_rate, band));
        let expected = [0.077484474017630, 0.001444858938927, 0.005240977980124, 0.011789209787558, 0.014367955346233];
        assert(arrayAlmostEqual(expected, powers, threshold));

        // Check rectangular window
        powers = bands.map(band => bci.bandpower(x, sample_rate, band, {window: 'rectangular'}));
        expected = [8.990989418700449e-04, 0.001112937041278, 0.003097470389661, 0.012687774966708, 0.012761160881297];
        assert(arrayAlmostEqual(expected, powers, threshold));

        // Check string mappings
        assert.equal(bci.bandpower(x, sample_rate, 'delta'), bci.bandpower(x, sample_rate, [1, 3]));
        assert.equal(bci.bandpower(x, sample_rate, 'theta'), bci.bandpower(x, sample_rate, [4, 7]));
        assert.equal(bci.bandpower(x, sample_rate, 'alpha'), bci.bandpower(x, sample_rate, [8, 12]));
        assert.equal(bci.bandpower(x, sample_rate, 'beta'), bci.bandpower(x, sample_rate, [13, 30]));
        assert.equal(bci.bandpower(x, sample_rate, 'gamma'), bci.bandpower(x, sample_rate, [31, 50]));
    });
});
